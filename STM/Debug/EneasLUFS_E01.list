
EneasLUFS_E01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08009388  08009388  0000a388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d0  080097d0  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  0000a7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080097d8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009234  200001e8  080099c0  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000941c  080099c0  0000b41c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d5b  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d47  00000000  00000000  0001df73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00020cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c56  00000000  00000000  00021ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b4f  00000000  00000000  000228fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015527  00000000  00000000  0004644d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1292  00000000  00000000  0005b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cc06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  0012cc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  00132220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800936c 	.word	0x0800936c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800936c 	.word	0x0800936c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <lcd_send_cmd>:
	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53},
	{0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27},
	{0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67}};

void lcd_send_cmd(uint8_t command)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	const uint8_t dataD7ToD4 = (0xF0 & (command));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	73fb      	strb	r3, [r7, #15]
	const uint8_t dataD3ToD0 = (0xF0 & (command << 4));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
	uint8_t i2cData[4] =
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	723b      	strb	r3, [r7, #8]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	727b      	strb	r3, [r7, #9]
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72fb      	strb	r3, [r7, #11]
			dataD7ToD4 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_EN_PIN,
			dataD7ToD4 | PCF8574_LCD_BKL_PIN,
			dataD3ToD0 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_EN_PIN,
			dataD3ToD0 | PCF8574_LCD_BKL_PIN,
		};
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, i2cData, 4, 100);
 8000fb8:	f107 0208 	add.w	r2, r7, #8
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	214e      	movs	r1, #78	@ 0x4e
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <lcd_send_cmd+0x5c>)
 8000fc6:	f002 f905 	bl	80031d4 <HAL_I2C_Master_Transmit>
	return;
 8000fca:	bf00      	nop
}
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000020c 	.word	0x2000020c

08000fd8 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	const uint8_t dataD7ToD4 = (0xF0 & (data));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	73fb      	strb	r3, [r7, #15]
	const uint8_t dataD3ToD0 = (0xF0 & (data << 4));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	73bb      	strb	r3, [r7, #14]
	uint8_t i2cData[4] =
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	723b      	strb	r3, [r7, #8]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	f043 030d 	orr.w	r3, r3, #13
 800100a:	b2db      	uxtb	r3, r3
 800100c:	72bb      	strb	r3, [r7, #10]
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	f043 0309 	orr.w	r3, r3, #9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72fb      	strb	r3, [r7, #11]
			dataD7ToD4 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_RS_PIN | PCF8574_LCD_EN_PIN,
			dataD7ToD4 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_RS_PIN,
			dataD3ToD0 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_RS_PIN | PCF8574_LCD_EN_PIN,
			dataD3ToD0 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_RS_PIN,
		};
	HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, i2cData, 4, 100);
 8001018:	f107 0208 	add.w	r2, r7, #8
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2304      	movs	r3, #4
 8001022:	214e      	movs	r1, #78	@ 0x4e
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <lcd_send_data+0x5c>)
 8001026:	f002 f8d5 	bl	80031d4 <HAL_I2C_Master_Transmit>
	return;
 800102a:	bf00      	nop
}
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020c 	.word	0x2000020c

08001038 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string(const char *str)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint8_t rep = 195;
 8001040:	23c3      	movs	r3, #195	@ 0xc3
 8001042:	77bb      	strb	r3, [r7, #30]

	char *auml = "\xE1";
 8001044:	4b48      	ldr	r3, [pc, #288]	@ (8001168 <lcd_send_string+0x130>)
 8001046:	61bb      	str	r3, [r7, #24]
	char *ouml = "\xEF";
 8001048:	4b48      	ldr	r3, [pc, #288]	@ (800116c <lcd_send_string+0x134>)
 800104a:	617b      	str	r3, [r7, #20]
	char *uuml = "\xF5";
 800104c:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <lcd_send_string+0x138>)
 800104e:	613b      	str	r3, [r7, #16]
	char *sz = "\xE2";
 8001050:	4b48      	ldr	r3, [pc, #288]	@ (8001174 <lcd_send_string+0x13c>)
 8001052:	60fb      	str	r3, [r7, #12]
	bool is_cmd = false;
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]

	while (*str)
 8001058:	e07b      	b.n	8001152 <lcd_send_string+0x11a>
		if (*str != '\0')
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d077      	beq.n	8001152 <lcd_send_string+0x11a>
		{
			if (is_cmd)
 8001062:	7ffb      	ldrb	r3, [r7, #31]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d062      	beq.n	800112e <lcd_send_string+0xf6>
			{
				switch (*str)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3b9f      	subs	r3, #159	@ 0x9f
 800106e:	2b1d      	cmp	r3, #29
 8001070:	d856      	bhi.n	8001120 <lcd_send_string+0xe8>
 8001072:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <lcd_send_string+0x40>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001115 	.word	0x08001115
 800107c:	08001121 	.word	0x08001121
 8001080:	08001121 	.word	0x08001121
 8001084:	08001121 	.word	0x08001121
 8001088:	08001121 	.word	0x08001121
 800108c:	080010f1 	.word	0x080010f1
 8001090:	08001121 	.word	0x08001121
 8001094:	08001121 	.word	0x08001121
 8001098:	08001121 	.word	0x08001121
 800109c:	08001121 	.word	0x08001121
 80010a0:	08001121 	.word	0x08001121
 80010a4:	08001121 	.word	0x08001121
 80010a8:	08001121 	.word	0x08001121
 80010ac:	08001121 	.word	0x08001121
 80010b0:	08001121 	.word	0x08001121
 80010b4:	08001121 	.word	0x08001121
 80010b8:	08001121 	.word	0x08001121
 80010bc:	08001121 	.word	0x08001121
 80010c0:	08001121 	.word	0x08001121
 80010c4:	08001121 	.word	0x08001121
 80010c8:	08001121 	.word	0x08001121
 80010cc:	08001121 	.word	0x08001121
 80010d0:	08001121 	.word	0x08001121
 80010d4:	080010fd 	.word	0x080010fd
 80010d8:	08001121 	.word	0x08001121
 80010dc:	08001121 	.word	0x08001121
 80010e0:	08001121 	.word	0x08001121
 80010e4:	08001121 	.word	0x08001121
 80010e8:	08001121 	.word	0x08001121
 80010ec:	08001109 	.word	0x08001109
				{
				case rep_auml:
					lcd_send_data(*auml);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff6f 	bl	8000fd8 <lcd_send_data>
					break;
 80010fa:	e012      	b.n	8001122 <lcd_send_string+0xea>
				case rep_ouml:
					lcd_send_data(*ouml);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff69 	bl	8000fd8 <lcd_send_data>
					break;
 8001106:	e00c      	b.n	8001122 <lcd_send_string+0xea>
				case rep_uuml:
					lcd_send_data(*uuml);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff63 	bl	8000fd8 <lcd_send_data>
					break;
 8001112:	e006      	b.n	8001122 <lcd_send_string+0xea>
				case rep_sz:
					lcd_send_data(*sz);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <lcd_send_data>
					break;
 800111e:	e000      	b.n	8001122 <lcd_send_string+0xea>
				default:
					break;
 8001120:	bf00      	nop
				}
				*str++;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3301      	adds	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
				is_cmd = false;
 8001128:	2300      	movs	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]
				continue;
 800112c:	e011      	b.n	8001152 <lcd_send_string+0x11a>
			}
			if ((*str) == rep)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	7fba      	ldrb	r2, [r7, #30]
 8001134:	429a      	cmp	r2, r3
 8001136:	d105      	bne.n	8001144 <lcd_send_string+0x10c>
			{
				*str++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	607b      	str	r3, [r7, #4]
				is_cmd = true;
 800113e:	2301      	movs	r3, #1
 8001140:	77fb      	strb	r3, [r7, #31]
				continue;
 8001142:	e006      	b.n	8001152 <lcd_send_string+0x11a>
			}
			lcd_send_data(*str++);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff43 	bl	8000fd8 <lcd_send_data>
	while (*str)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f47f af7f 	bne.w	800105a <lcd_send_string+0x22>
		}
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	08009388 	.word	0x08009388
 800116c:	0800938c 	.word	0x0800938c
 8001170:	08009390 	.word	0x08009390
 8001174:	08009394 	.word	0x08009394

08001178 <lcd_write>:

void lcd_write(const char *txt, uint8_t line, uint8_t column)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
 8001184:	4613      	mov	r3, r2
 8001186:	70bb      	strb	r3, [r7, #2]
	lcd_clear_line(line, column);
 8001188:	78ba      	ldrb	r2, [r7, #2]
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f81a 	bl	80011c8 <lcd_clear_line>
	lcd_send_cmd(0x80 | lcdPos[line][column]);
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	78b9      	ldrb	r1, [r7, #2]
 8001198:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <lcd_write+0x4c>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	440b      	add	r3, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fee2 	bl	8000f78 <lcd_send_cmd>
	lcd_send_string(txt);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff3f 	bl	8001038 <lcd_send_string>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	080093e8 	.word	0x080093e8

080011c8 <lcd_clear_line>:

void lcd_clear_line(uint8_t line, uint8_t column)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	lcd_send_cmd(0x80 | lcdPos[line][column]);
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	79b9      	ldrb	r1, [r7, #6]
 80011dc:	4810      	ldr	r0, [pc, #64]	@ (8001220 <lcd_clear_line+0x58>)
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4403      	add	r3, r0
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fec0 	bl	8000f78 <lcd_send_cmd>
	for (int i = 0; i < (COLUMS - column); i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e005      	b.n	800120a <lcd_clear_line+0x42>
	{
		lcd_send_data(' ');
 80011fe:	2020      	movs	r0, #32
 8001200:	f7ff feea 	bl	8000fd8 <lcd_send_data>
	for (int i = 0; i < (COLUMS - column); i++)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f1c3 0314 	rsb	r3, r3, #20
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	429a      	cmp	r2, r3
 8001214:	dbf3      	blt.n	80011fe <lcd_clear_line+0x36>
	}
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	080093e8 	.word	0x080093e8

08001224 <lcd16x2_i2c_proxy_sendCommandNibble>:
 * some nibbles must be sent through D7-D4 according to IC datasheet
 * @param[in] nibbleOnLSN  A byte containing the nibble to be sent in the less significant nibble. example: 0x03 to send 0x3 through D7-D4
 * @return -1 if I2C transmission fails, 0 if succeeds
 */
static int32_t lcd16x2_i2c_proxy_sendCommandNibble(const uint8_t nibbleOnLSN)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    const uint8_t dataD7ToD4 = (0xF0 & (nibbleOnLSN << 4));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	73fb      	strb	r3, [r7, #15]
    uint8_t i2cData[2] =
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 030c 	orr.w	r3, r3, #12
 800123a:	b2db      	uxtb	r3, r3
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	b2db      	uxtb	r3, r3
 8001246:	737b      	strb	r3, [r7, #13]
        {
            dataD7ToD4 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_EN_PIN,
            dataD7ToD4 | PCF8574_LCD_BKL_PIN,
        };
    if (HAL_I2C_Master_Transmit(lcd16x2_i2c_proxy_pI2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 2, 100) != HAL_OK)
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <lcd16x2_i2c_proxy_sendCommandNibble+0x50>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	214e      	movs	r1, #78	@ 0x4e
 8001258:	f001 ffbc 	bl	80031d4 <HAL_I2C_Master_Transmit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <lcd16x2_i2c_proxy_sendCommandNibble+0x44>
    {
        return -1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e000      	b.n	800126a <lcd16x2_i2c_proxy_sendCommandNibble+0x46>
    }
    else
    {
        return 0;
 8001268:	2300      	movs	r3, #0
    }
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000204 	.word	0x20000204

08001278 <lcd16x2_i2c_proxy_sendCommand>:
 * @brief Send byte command to HD44780. Most significant nibble is D7-D4 and less significant nibble is D3-D0.
 * @param[in] command  command to be sent
 * @return -1 if I2C transmission fails, 0 if succeeds
 */
static int32_t lcd16x2_i2c_proxy_sendCommand(uint8_t command)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    const uint8_t dataD7ToD4 = (0xF0 & (command));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	73fb      	strb	r3, [r7, #15]
    const uint8_t dataD3ToD0 = (0xF0 & (command << 4));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	73bb      	strb	r3, [r7, #14]
    uint8_t i2cData[4] =
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f043 030c 	orr.w	r3, r3, #12
 8001296:	b2db      	uxtb	r3, r3
 8001298:	723b      	strb	r3, [r7, #8]
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	727b      	strb	r3, [r7, #9]
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	f043 030c 	orr.w	r3, r3, #12
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	72bb      	strb	r3, [r7, #10]
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	72fb      	strb	r3, [r7, #11]
            dataD7ToD4 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_EN_PIN,
            dataD7ToD4 | PCF8574_LCD_BKL_PIN,
            dataD3ToD0 | PCF8574_LCD_BKL_PIN | PCF8574_LCD_EN_PIN,
            dataD3ToD0 | PCF8574_LCD_BKL_PIN,
        };
    if (HAL_I2C_Master_Transmit(lcd16x2_i2c_proxy_pI2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 100) != HAL_OK)
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <lcd16x2_i2c_proxy_sendCommand+0x6c>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	f107 0208 	add.w	r2, r7, #8
 80012c0:	2364      	movs	r3, #100	@ 0x64
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2304      	movs	r3, #4
 80012c6:	214e      	movs	r1, #78	@ 0x4e
 80012c8:	f001 ff84 	bl	80031d4 <HAL_I2C_Master_Transmit>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <lcd16x2_i2c_proxy_sendCommand+0x60>
    {
        return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e000      	b.n	80012da <lcd16x2_i2c_proxy_sendCommand+0x62>
    }
    else
    {
        return 0;
 80012d8:	2300      	movs	r3, #0
    }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000204 	.word	0x20000204

080012e8 <lcd16x2_i2c_proxy_initialize>:
 * @param showCursor  enables cursor to be shown in the writing position
 * @param blinkCursor  enables cursor blinking effect
 * @return -1 if initialization fails, 0 if succeeds
 */
int32_t lcd16x2_i2c_proxy_initialize(I2C_HandleTypeDef *pI2cHandle, bool showCursor, bool blinkCursor)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
 80012f4:	4613      	mov	r3, r2
 80012f6:	70bb      	strb	r3, [r7, #2]
    int32_t transmissionResult = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]

    lcd16x2_i2c_proxy_pI2cHandle = pI2cHandle;
 80012fc:	4a3f      	ldr	r2, [pc, #252]	@ (80013fc <lcd16x2_i2c_proxy_initialize+0x114>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
    lcd16x2_i2c_proxy_cursorOn = showCursor;
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <lcd16x2_i2c_proxy_initialize+0x118>)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	7013      	strb	r3, [r2, #0]
    lcd16x2_i2c_proxy_blinking = blinkCursor;
 8001308:	4a3e      	ldr	r2, [pc, #248]	@ (8001404 <lcd16x2_i2c_proxy_initialize+0x11c>)
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	7013      	strb	r3, [r2, #0]

    if (HAL_I2C_IsDeviceReady(lcd16x2_i2c_proxy_pI2cHandle, LCD_I2C_SLAVE_ADDRESS, 5, 500) != HAL_OK)
 800130e:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <lcd16x2_i2c_proxy_initialize+0x114>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001316:	2205      	movs	r2, #5
 8001318:	214e      	movs	r1, #78	@ 0x4e
 800131a:	f002 f859 	bl	80033d0 <HAL_I2C_IsDeviceReady>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <lcd16x2_i2c_proxy_initialize+0x42>
    {
        return -1;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	e063      	b.n	80013f2 <lcd16x2_i2c_proxy_initialize+0x10a>
    }

    // Delays and commands sequence specified in HD44780 datasheet
    HAL_Delay(45);
 800132a:	202d      	movs	r0, #45	@ 0x2d
 800132c:	f000 ffba 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommandNibble(0x03);
 8001330:	2003      	movs	r0, #3
 8001332:	f7ff ff77 	bl	8001224 <lcd16x2_i2c_proxy_sendCommandNibble>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);
 800133e:	2005      	movs	r0, #5
 8001340:	f000 ffb0 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommandNibble(0x03);
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff ff6d 	bl	8001224 <lcd16x2_i2c_proxy_sendCommandNibble>
 800134a:	4602      	mov	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 ffa6 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommandNibble(0x03);
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff ff63 	bl	8001224 <lcd16x2_i2c_proxy_sendCommandNibble>
 800135e:	4602      	mov	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 ff9c 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommandNibble(0x02);
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff ff59 	bl	8001224 <lcd16x2_i2c_proxy_sendCommandNibble>
 8001372:	4602      	mov	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 ff92 	bl	80022a4 <HAL_Delay>
    // Initial configuration
    transmissionResult |= lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_FUNCTION_SET | LCD_FUNCTION_DL_4BITS_INTERFACE | LCD_FUNCTION_F_5_DOT_8_CHAR | LCD_FUNCTION_N_2_LINES);
 8001380:	2028      	movs	r0, #40	@ 0x28
 8001382:	f7ff ff79 	bl	8001278 <lcd16x2_i2c_proxy_sendCommand>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 ff88 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_ON_OFF_CONTROL |
                                                        LCD_ON_OFF_CONTROL_DISPLAY_ON |
                                                        (lcd16x2_i2c_proxy_cursorOn ? LCD_ON_OFF_CONTROL_CURSOR_ON : LCD_ON_OFF_CONTROL_CURSOR_OFF) |
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <lcd16x2_i2c_proxy_initialize+0x118>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <lcd16x2_i2c_proxy_initialize+0xb8>
 800139c:	220e      	movs	r2, #14
 800139e:	e000      	b.n	80013a2 <lcd16x2_i2c_proxy_initialize+0xba>
 80013a0:	220c      	movs	r2, #12
                                                        (lcd16x2_i2c_proxy_blinking ? LCD_ON_OFF_CONTROL_BLINK_CURSOR_ON : LCD_ON_OFF_CONTROL_BLINK_CURSOR_OFF));
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <lcd16x2_i2c_proxy_initialize+0x11c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
                                                        (lcd16x2_i2c_proxy_cursorOn ? LCD_ON_OFF_CONTROL_CURSOR_ON : LCD_ON_OFF_CONTROL_CURSOR_OFF) |
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
    transmissionResult |= lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_ON_OFF_CONTROL |
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff62 	bl	8001278 <lcd16x2_i2c_proxy_sendCommand>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 ff71 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_CLEAR);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ff58 	bl	8001278 <lcd16x2_i2c_proxy_sendCommand>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f000 ff67 	bl	80022a4 <HAL_Delay>
    transmissionResult |= lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_SET_ENTRY_MODE | LCD_ENTRY_MODE_ID_INCREMENT | LCD_ENTRY_MODE_NO_SHIFT);
 80013d6:	2006      	movs	r0, #6
 80013d8:	f7ff ff4e 	bl	8001278 <lcd16x2_i2c_proxy_sendCommand>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
    if (transmissionResult != HAL_OK)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <lcd16x2_i2c_proxy_initialize+0x108>
    {
        return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e000      	b.n	80013f2 <lcd16x2_i2c_proxy_initialize+0x10a>
    }
    return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000204 	.word	0x20000204
 8001400:	20000208 	.word	0x20000208
 8001404:	20000209 	.word	0x20000209

08001408 <lcd16x2_i2c_proxy_turnDisplayOn>:
/*
 * @brief Turn on display in the last state before turning off
 * @return -1 if i2c transmission fails, 0 if succeeds
 */
int32_t lcd16x2_i2c_proxy_turnDisplayOn()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    return lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_ON_OFF_CONTROL |
                                         LCD_ON_OFF_CONTROL_DISPLAY_ON |
                                         (lcd16x2_i2c_proxy_cursorOn ? LCD_ON_OFF_CONTROL_CURSOR_ON : LCD_ON_OFF_CONTROL_CURSOR_OFF) |
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <lcd16x2_i2c_proxy_turnDisplayOn+0x2c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <lcd16x2_i2c_proxy_turnDisplayOn+0x10>
 8001414:	220e      	movs	r2, #14
 8001416:	e000      	b.n	800141a <lcd16x2_i2c_proxy_turnDisplayOn+0x12>
 8001418:	220c      	movs	r2, #12
                                         (lcd16x2_i2c_proxy_blinking ? LCD_ON_OFF_CONTROL_BLINK_CURSOR_ON : LCD_ON_OFF_CONTROL_BLINK_CURSOR_OFF));
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <lcd16x2_i2c_proxy_turnDisplayOn+0x30>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b25b      	sxtb	r3, r3
                                         (lcd16x2_i2c_proxy_cursorOn ? LCD_ON_OFF_CONTROL_CURSOR_ON : LCD_ON_OFF_CONTROL_CURSOR_OFF) |
 8001420:	4313      	orrs	r3, r2
 8001422:	b25b      	sxtb	r3, r3
    return lcd16x2_i2c_proxy_sendCommand(LCD_COMMAND_ON_OFF_CONTROL |
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff26 	bl	8001278 <lcd16x2_i2c_proxy_sendCommand>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000208 	.word	0x20000208
 8001438:	20000209 	.word	0x20000209

0800143c <HAL_SPDIFRX_RxCpltCallback>:
static void MX_I2C3_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_SPDIFRX_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	uint32_t oldBuff = bufferIndex; //net gelezen buffernummer opslaan
 8001444:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <HAL_SPDIFRX_RxCpltCallback+0x22c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	61fb      	str	r3, [r7, #28]
	bufferIndex = 1 - bufferIndex; //wordt 1 als 0 is en vice versa
 800144a:	4b87      	ldr	r3, [pc, #540]	@ (8001668 <HAL_SPDIFRX_RxCpltCallback+0x22c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f1c3 0301 	rsb	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b84      	ldr	r3, [pc, #528]	@ (8001668 <HAL_SPDIFRX_RxCpltCallback+0x22c>)
 8001456:	701a      	strb	r2, [r3, #0]
	uint32_t buffsize = PROC_BLOCK_SZ * BLK_AMOUNT;
 8001458:	f241 133a 	movw	r3, #4410	@ 0x113a
 800145c:	61bb      	str	r3, [r7, #24]

	HAL_SPDIFRX_ReceiveDataFlow_DMA(hspdif, (uint32_t*) buffer[bufferIndex],
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <HAL_SPDIFRX_RxCpltCallback+0x22c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f244 43e8 	movw	r3, #17640	@ 0x44e8
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	4a7f      	ldr	r2, [pc, #508]	@ (800166c <HAL_SPDIFRX_RxCpltCallback+0x230>)
 800146e:	4413      	add	r3, r2
 8001470:	f244 42e8 	movw	r2, #17640	@ 0x44e8
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f003 fd98 	bl	8004fac <HAL_SPDIFRX_ReceiveDataFlow_DMA>
			sizeof(buffer[0])); //verder data lezen naar andere buffer

	//berekeningen maken op net gelezen buffer
	bufferCtr++;
 800147c:	4b7c      	ldr	r3, [pc, #496]	@ (8001670 <HAL_SPDIFRX_RxCpltCallback+0x234>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a7b      	ldr	r2, [pc, #492]	@ (8001670 <HAL_SPDIFRX_RxCpltCallback+0x234>)
 8001484:	6013      	str	r3, [r2, #0]
	uint32_t square = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t accumulated_squares = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < (buffsize); ++i) {
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	e063      	b.n	800155c <HAL_SPDIFRX_RxCpltCallback+0x120>
		int32_t currentSample = ((buffer[oldBuff][i] & 0xFFFF)
 8001494:	4975      	ldr	r1, [pc, #468]	@ (800166c <HAL_SPDIFRX_RxCpltCallback+0x230>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f241 123a 	movw	r2, #4410	@ 0x113a
 800149c:	fb03 f202 	mul.w	r2, r3, r2
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	4413      	add	r3, r2
 80014a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a8:	b29a      	uxth	r2, r3
				+ ((buffer[oldBuff][i] & 0xFFFF0000) >> 16) / 2);
 80014aa:	4870      	ldr	r0, [pc, #448]	@ (800166c <HAL_SPDIFRX_RxCpltCallback+0x230>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f241 113a 	movw	r1, #4410	@ 0x113a
 80014b2:	fb03 f101 	mul.w	r1, r3, r1
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	440b      	add	r3, r1
 80014ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014be:	0c1b      	lsrs	r3, r3, #16
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	4413      	add	r3, r2
		int32_t currentSample = ((buffer[oldBuff][i] & 0xFFFF)
 80014c4:	60bb      	str	r3, [r7, #8]
		if (currentSample <= 32766 || currentSample >= -32767) {
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dd03      	ble.n	80014d8 <HAL_SPDIFRX_RxCpltCallback+0x9c>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80014d6:	dd04      	ble.n	80014e2 <HAL_SPDIFRX_RxCpltCallback+0xa6>
			overs++;
 80014d8:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_SPDIFRX_RxCpltCallback+0x238>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_SPDIFRX_RxCpltCallback+0x238>)
 80014e0:	6013      	str	r3, [r2, #0]
		}
		if (abs(currentSample) > maxPeak) {
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bfb8      	it	lt
 80014e8:	425b      	neglt	r3, r3
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f2:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <HAL_SPDIFRX_RxCpltCallback+0x23c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd22      	ble.n	8001548 <HAL_SPDIFRX_RxCpltCallback+0x10c>
			maxPeak = (float) (20 * log10((abs(currentSample) / 32768)));
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	bfb8      	it	lt
 8001508:	425b      	neglt	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	da02      	bge.n	8001514 <HAL_SPDIFRX_RxCpltCallback+0xd8>
 800150e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001512:	337f      	adds	r3, #127	@ 0x7f
 8001514:	13db      	asrs	r3, r3, #15
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f824 	bl	8000564 <__aeabi_i2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b10 	vmov	d0, r2, r3
 8001524:	f007 fb90 	bl	8008c48 <log10>
 8001528:	ec51 0b10 	vmov	r0, r1, d0
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b52      	ldr	r3, [pc, #328]	@ (800167c <HAL_SPDIFRX_RxCpltCallback+0x240>)
 8001532:	f7ff f881 	bl	8000638 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb53 	bl	8000be8 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <HAL_SPDIFRX_RxCpltCallback+0x23c>)
 8001546:	6013      	str	r3, [r2, #0]
		}

		square += currentSample * currentSample;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	fb03 f303 	mul.w	r3, r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	4413      	add	r3, r2
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < (buffsize); ++i) {
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	3301      	adds	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	429a      	cmp	r2, r3
 8001562:	d897      	bhi.n	8001494 <HAL_SPDIFRX_RxCpltCallback+0x58>
	}
	if (!(bufferCtr % 3)) {
 8001564:	4b42      	ldr	r3, [pc, #264]	@ (8001670 <HAL_SPDIFRX_RxCpltCallback+0x234>)
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <HAL_SPDIFRX_RxCpltCallback+0x244>)
 800156a:	fba3 2301 	umull	r2, r3, r3, r1
 800156e:	085a      	lsrs	r2, r3, #1
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	1aca      	subs	r2, r1, r3
 8001578:	2a00      	cmp	r2, #0
 800157a:	d16c      	bne.n	8001656 <HAL_SPDIFRX_RxCpltCallback+0x21a>
		float RMS = sqrt(((float) accumulated_squares) / ((float) (buffsize))); //SQRT van de mean van de som vd squares => RMS
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001590:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001594:	ee16 0a90 	vmov	r0, s13
 8001598:	f7fe fff6 	bl	8000588 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	ec43 2b10 	vmov	d0, r2, r3
 80015a4:	f007 fb8e 	bl	8008cc4 <sqrt>
 80015a8:	ec53 2b10 	vmov	r2, r3, d0
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb1a 	bl	8000be8 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]
		accumulated_squares = square; //100ms overlap
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	617b      	str	r3, [r7, #20]
		float dBRMS = 20 * log10(RMS / 32768); //omzetten naar decibels
 80015bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001684 <HAL_SPDIFRX_RxCpltCallback+0x248>
 80015c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015c8:	ee16 0a90 	vmov	r0, s13
 80015cc:	f7fe ffdc 	bl	8000588 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	ec43 2b10 	vmov	d0, r2, r3
 80015d8:	f007 fb36 	bl	8008c48 <log10>
 80015dc:	ec51 0b10 	vmov	r0, r1, d0
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <HAL_SPDIFRX_RxCpltCallback+0x240>)
 80015e6:	f7ff f827 	bl	8000638 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff faf9 	bl	8000be8 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	60fb      	str	r3, [r7, #12]
		momentary = dBRMS;
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <HAL_SPDIFRX_RxCpltCallback+0x24c>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6013      	str	r3, [r2, #0]
		if (momentary > maxMomentary) {
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <HAL_SPDIFRX_RxCpltCallback+0x24c>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_SPDIFRX_RxCpltCallback+0x250>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	dd03      	ble.n	800161e <HAL_SPDIFRX_RxCpltCallback+0x1e2>
			maxMomentary = momentary;
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_SPDIFRX_RxCpltCallback+0x24c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1c      	ldr	r2, [pc, #112]	@ (800168c <HAL_SPDIFRX_RxCpltCallback+0x250>)
 800161c:	6013      	str	r3, [r2, #0]
		}
		integrated = ((((bufferCtr - 1) * integrated) + dBRMS) / (bufferCtr)); //cumulatief gemiddelde
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_SPDIFRX_RxCpltCallback+0x234>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_SPDIFRX_RxCpltCallback+0x254>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_SPDIFRX_RxCpltCallback+0x234>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_SPDIFRX_RxCpltCallback+0x254>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
	} else {
		accumulated_squares += square;
	}
	return;
 8001654:	e004      	b.n	8001660 <HAL_SPDIFRX_RxCpltCallback+0x224>
		accumulated_squares += square;
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
	return;
 800165e:	bf00      	nop
}
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000922c 	.word	0x2000922c
 800166c:	2000085c 	.word	0x2000085c
 8001670:	20009244 	.word	0x20009244
 8001674:	20009234 	.word	0x20009234
 8001678:	20009230 	.word	0x20009230
 800167c:	40340000 	.word	0x40340000
 8001680:	aaaaaaab 	.word	0xaaaaaaab
 8001684:	47000000 	.word	0x47000000
 8001688:	20009238 	.word	0x20009238
 800168c:	2000923c 	.word	0x2000923c
 8001690:	20009240 	.word	0x20009240

08001694 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b093      	sub	sp, #76	@ 0x4c
 8001698:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800169a:	f000 fd91 	bl	80021c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800169e:	f000 f8b9 	bl	8001814 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016a2:	f000 f9ff 	bl	8001aa4 <MX_GPIO_Init>
	MX_DMA_Init();
 80016a6:	f000 f9dd 	bl	8001a64 <MX_DMA_Init>
	MX_I2C3_Init();
 80016aa:	f000 f91f 	bl	80018ec <MX_I2C3_Init>
	MX_USART6_UART_Init();
 80016ae:	f000 f981 	bl	80019b4 <MX_USART6_UART_Init>
	MX_SPDIFRX_Init();
 80016b2:	f000 f949 	bl	8001948 <MX_SPDIFRX_Init>
	MX_USB_OTG_FS_PCD_Init();
 80016b6:	f000 f9a7 	bl	8001a08 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	char dB0_Blank[] = "Momentary:     ";
 80016ba:	4b45      	ldr	r3, [pc, #276]	@ (80017d0 <main+0x13c>)
 80016bc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80016c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char dB1_Blank[] = "Short Term:    ";
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <main+0x140>)
 80016c8:	f107 0420 	add.w	r4, r7, #32
 80016cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char dB2_Blank[] = "Integrated:    ";
 80016d2:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <main+0x144>)
 80016d4:	f107 0410 	add.w	r4, r7, #16
 80016d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char dB3_Blank[] = "Overs:         ";
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <main+0x148>)
 80016e0:	463c      	mov	r4, r7
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	lcd16x2_i2c_proxy_initialize(&hi2c3, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <main+0x14c>)
 80016ee:	f7ff fdfb 	bl	80012e8 <lcd16x2_i2c_proxy_initialize>
	lcd16x2_i2c_proxy_turnDisplayOn();
 80016f2:	f7ff fe89 	bl	8001408 <lcd16x2_i2c_proxy_turnDisplayOn>
	lcd_write(dB0, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	483a      	ldr	r0, [pc, #232]	@ (80017e4 <main+0x150>)
 80016fc:	f7ff fd3c 	bl	8001178 <lcd_write>
	lcd_write(dB1, 1, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2101      	movs	r1, #1
 8001704:	4838      	ldr	r0, [pc, #224]	@ (80017e8 <main+0x154>)
 8001706:	f7ff fd37 	bl	8001178 <lcd_write>
	lcd_write(dB2, 2, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2102      	movs	r1, #2
 800170e:	4837      	ldr	r0, [pc, #220]	@ (80017ec <main+0x158>)
 8001710:	f7ff fd32 	bl	8001178 <lcd_write>
	lcd_write(dB3, 3, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2103      	movs	r1, #3
 8001718:	4835      	ldr	r0, [pc, #212]	@ (80017f0 <main+0x15c>)
 800171a:	f7ff fd2d 	bl	8001178 <lcd_write>

	HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, buffer[0], sizeof(buffer[0]));
 800171e:	f244 42e8 	movw	r2, #17640	@ 0x44e8
 8001722:	4934      	ldr	r1, [pc, #208]	@ (80017f4 <main+0x160>)
 8001724:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <main+0x164>)
 8001726:	f003 fc41 	bl	8004fac <HAL_SPDIFRX_ReceiveDataFlow_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		snprintf(dB0, 20, "%s%3.1f", dB0_Blank, momentary);
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <main+0x168>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff2a 	bl	8000588 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800173c:	e9cd 2300 	strd	r2, r3, [sp]
 8001740:	460b      	mov	r3, r1
 8001742:	4a2f      	ldr	r2, [pc, #188]	@ (8001800 <main+0x16c>)
 8001744:	2114      	movs	r1, #20
 8001746:	4827      	ldr	r0, [pc, #156]	@ (80017e4 <main+0x150>)
 8001748:	f005 f93e 	bl	80069c8 <sniprintf>
		snprintf(dB1, 20, "%s%3.1f", dB1_Blank, maxMomentary);
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <main+0x170>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff19 	bl	8000588 <__aeabi_f2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	f107 0120 	add.w	r1, r7, #32
 800175e:	e9cd 2300 	strd	r2, r3, [sp]
 8001762:	460b      	mov	r3, r1
 8001764:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <main+0x16c>)
 8001766:	2114      	movs	r1, #20
 8001768:	481f      	ldr	r0, [pc, #124]	@ (80017e8 <main+0x154>)
 800176a:	f005 f92d 	bl	80069c8 <sniprintf>
		snprintf(dB2, 20, "%s%3.1f", dB2_Blank, integrated);
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <main+0x174>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff08 	bl	8000588 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	f107 0110 	add.w	r1, r7, #16
 8001780:	e9cd 2300 	strd	r2, r3, [sp]
 8001784:	460b      	mov	r3, r1
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <main+0x16c>)
 8001788:	2114      	movs	r1, #20
 800178a:	4818      	ldr	r0, [pc, #96]	@ (80017ec <main+0x158>)
 800178c:	f005 f91c 	bl	80069c8 <sniprintf>
		snprintf(dB3, 20, "%s%04lu", dB3_Blank, overs);
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <main+0x178>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	463a      	mov	r2, r7
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	4a1d      	ldr	r2, [pc, #116]	@ (8001810 <main+0x17c>)
 800179c:	2114      	movs	r1, #20
 800179e:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <main+0x15c>)
 80017a0:	f005 f912 	bl	80069c8 <sniprintf>
		lcd_write(dB0, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <main+0x150>)
 80017aa:	f7ff fce5 	bl	8001178 <lcd_write>
		lcd_write(dB1, 1, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2101      	movs	r1, #1
 80017b2:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <main+0x154>)
 80017b4:	f7ff fce0 	bl	8001178 <lcd_write>
		lcd_write(dB2, 2, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2102      	movs	r1, #2
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <main+0x158>)
 80017be:	f7ff fcdb 	bl	8001178 <lcd_write>
		lcd_write(dB3, 3, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2103      	movs	r1, #3
 80017c6:	480a      	ldr	r0, [pc, #40]	@ (80017f0 <main+0x15c>)
 80017c8:	f7ff fcd6 	bl	8001178 <lcd_write>
		snprintf(dB0, 20, "%s%3.1f", dB0_Blank, momentary);
 80017cc:	bf00      	nop
 80017ce:	e7ac      	b.n	800172a <main+0x96>
 80017d0:	080093a8 	.word	0x080093a8
 80017d4:	080093b8 	.word	0x080093b8
 80017d8:	080093c8 	.word	0x080093c8
 80017dc:	080093d8 	.word	0x080093d8
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	20009248 	.word	0x20009248
 80017e8:	20009268 	.word	0x20009268
 80017ec:	20009288 	.word	0x20009288
 80017f0:	200092a8 	.word	0x200092a8
 80017f4:	2000085c 	.word	0x2000085c
 80017f8:	20000260 	.word	0x20000260
 80017fc:	20009238 	.word	0x20009238
 8001800:	08009398 	.word	0x08009398
 8001804:	2000923c 	.word	0x2000923c
 8001808:	20009240 	.word	0x20009240
 800180c:	20009234 	.word	0x20009234
 8001810:	080093a0 	.word	0x080093a0

08001814 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b094      	sub	sp, #80	@ 0x50
 8001818:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	2234      	movs	r2, #52	@ 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f947 	bl	8006ab6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <SystemClock_Config+0xd0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a28      	ldr	r2, [pc, #160]	@ (80018e4 <SystemClock_Config+0xd0>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <SystemClock_Config+0xd0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <SystemClock_Config+0xd4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a22      	ldr	r2, [pc, #136]	@ (80018e8 <SystemClock_Config+0xd4>)
 800185e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <SystemClock_Config+0xd4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001878:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001884:	2304      	movs	r3, #4
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001888:	2390      	movs	r3, #144	@ 0x90
 800188a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800188c:	2302      	movs	r3, #2
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8001890:	2306      	movs	r3, #6
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f003 f88b 	bl	80049b8 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x98>
		Error_Handler();
 80018a8:	f000 f96a 	bl	8001b80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018bc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	2104      	movs	r1, #4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fa00 	bl	8003cd0 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xc6>
		Error_Handler();
 80018d6:	f000 f953 	bl	8001b80 <Error_Handler>
	}
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	@ 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_I2C3_Init+0x50>)
 80018f2:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <MX_I2C3_Init+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_I2C3_Init+0x50>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <MX_I2C3_Init+0x58>)
 80018fa:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_I2C3_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_I2C3_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_I2C3_Init+0x50>)
 800190a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800190e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <MX_I2C3_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_I2C3_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <MX_I2C3_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_I2C3_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_I2C3_Init+0x50>)
 800192a:	f001 fb0f 	bl	8002f4c <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001934:	f000 f924 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000020c 	.word	0x2000020c
 8001940:	40005c00 	.word	0x40005c00
 8001944:	000186a0 	.word	0x000186a0

08001948 <MX_SPDIFRX_Init>:
/**
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 800194e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001952:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN2;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001956:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800195a:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_15;
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 800195e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001962:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196a:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_32BITS;
 8001972:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001974:	2220      	movs	r2, #32
 8001976:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 800197a:	2208      	movs	r2, #8
 800197c:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001984:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198c:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 8001996:	2240      	movs	r2, #64	@ 0x40
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK) {
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_SPDIFRX_Init+0x68>)
 800199c:	f003 faaa 	bl	8004ef4 <HAL_SPDIFRX_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_SPDIFRX_Init+0x62>
		Error_Handler();
 80019a6:	f000 f8eb 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000260 	.word	0x20000260

080019b4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <MX_USART6_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_USART6_UART_Init+0x4c>)
 80019ec:	f003 fd14 	bl	8005418 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80019f6:	f000 f8c3 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000030c 	.word	0x2000030c
 8001a04:	40011400 	.word	0x40011400

08001a08 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a12:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a16:	2206      	movs	r2, #6
 8001a18:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	62da      	str	r2, [r3, #44]	@ 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4c:	f001 fff7 	bl	8003a3e <HAL_PCD_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001a56:	f000 f893 	bl	8001b80 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000350 	.word	0x20000350

08001a64 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_DMA_Init+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f000 fd09 	bl	80024a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a90:	200c      	movs	r0, #12
 8001a92:	f000 fd22 	bl	80024da <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_GPIO_Init+0xd0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_G_Pin | LED_Y_Pin | LED_R_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b30:	4811      	ldr	r0, [pc, #68]	@ (8001b78 <MX_GPIO_Init+0xd4>)
 8001b32:	f001 f9f1 	bl	8002f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_GPIO_Init+0xd8>)
 8001b4a:	f001 f851 	bl	8002bf0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_G_Pin LED_Y_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_G_Pin | LED_Y_Pin | LED_R_Pin;
 8001b4e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <MX_GPIO_Init+0xd4>)
 8001b68:	f001 f842 	bl	8002bf0 <HAL_GPIO_Init>

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	@ 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800

08001b80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_I2C_MspInit+0xc4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d14b      	bne.n	8001c96 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <HAL_I2C_MspInit+0xcc>)
 8001c54:	f000 ffcc 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	480d      	ldr	r0, [pc, #52]	@ (8001cac <HAL_I2C_MspInit+0xd0>)
 8001c76:	f000 ffbb 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_I2C_MspInit+0xc8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005c00 	.word	0x40005c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a0      	sub	sp, #128	@ 0x80
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	225c      	movs	r2, #92	@ 0x5c
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fef0 	bl	8006ab6 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001cde:	d172      	bne.n	8001dc6 <HAL_SPDIFRX_MspInit+0x116>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.SpdifClockSelection = RCC_SPDIFRXCLKSOURCE_PLLR;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 f908 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_SPDIFRX_MspInit+0x4e>
    {
      Error_Handler();
 8001cfa:	f7ff ff41 	bl	8001b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4a32      	ldr	r2, [pc, #200]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0e:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <HAL_SPDIFRX_MspInit+0x120>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PC4     ------> SPDIFRX_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d36:	2310      	movs	r3, #16
 8001d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001d46:	2308      	movs	r3, #8
 8001d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4820      	ldr	r0, [pc, #128]	@ (8001dd4 <HAL_SPDIFRX_MspInit+0x124>)
 8001d52:	f000 ff4d 	bl	8002bf0 <HAL_GPIO_Init>

    /* SPDIFRX DMA Init */
    /* SPDIF_RX_DT Init */
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d58:	4a20      	ldr	r2, [pc, #128]	@ (8001ddc <HAL_SPDIFRX_MspInit+0x12c>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_spdif_rx_dt.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_spdif_rx_dt.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d7c:	615a      	str	r2, [r3, #20]
    hdma_spdif_rx_dt.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d84:	619a      	str	r2, [r3, #24]
    hdma_spdif_rx_dt.Init.Mode = DMA_NORMAL;
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 8001d9a:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001d9c:	f000 fbb8 	bl	8002510 <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_SPDIFRX_MspInit+0xfa>
    {
      Error_Handler();
 8001da6:	f7ff feeb 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hspdifrx,hdmaDrRx,hdma_spdif_rx_dt);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001dae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001db0:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_SPDIFRX_MspInit+0x128>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	205e      	movs	r0, #94	@ 0x5e
 8001dbc:	f000 fb71 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 8001dc0:	205e      	movs	r0, #94	@ 0x5e
 8001dc2:	f000 fb8a 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3780      	adds	r7, #128	@ 0x80
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	200002ac 	.word	0x200002ac
 8001ddc:	40026028 	.word	0x40026028

08001de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	@ 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	@ (8001e64 <HAL_UART_MspInit+0x84>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_UART_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e3a:	23c0      	movs	r3, #192	@ 0xc0
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <HAL_UART_MspInit+0x8c>)
 8001e56:	f000 fecb 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40011400 	.word	0x40011400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020800 	.word	0x40020800

08001e70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0a0      	sub	sp, #128	@ 0x80
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	225c      	movs	r2, #92	@ 0x5c
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 fe10 	bl	8006ab6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e9e:	d141      	bne.n	8001f24 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 f828 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001eba:	f7ff fe61 	bl	8001b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eec:	230a      	movs	r3, #10
 8001eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480e      	ldr	r0, [pc, #56]	@ (8001f30 <HAL_PCD_MspInit+0xc0>)
 8001ef8:	f000 fe7a 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f06:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <HAL_PCD_MspInit+0xbc>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3780      	adds	r7, #128	@ 0x80
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <NMI_Handler+0x4>

08001f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 f96b 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_dt);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <DMA1_Stream1_IRQHandler+0x10>)
 8001f9a:	f000 fbbf 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200002ac 	.word	0x200002ac

08001fa8 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <SPDIF_RX_IRQHandler+0x10>)
 8001fae:	f003 f8f7 	bl	80051a0 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000260 	.word	0x20000260

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_kill>:

int _kill(int pid, int sig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd6:	f004 fdc1 	bl	8006b5c <__errno>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2216      	movs	r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_exit>:

void _exit (int status)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ffe7 	bl	8001fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <_exit+0x12>

08002002 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e00a      	b.n	800202a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002014:	f3af 8000 	nop.w
 8002018:	4601      	mov	r1, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	b2ca      	uxtb	r2, r1
 8002022:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbf0      	blt.n	8002014 <_read+0x12>
  }

  return len;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e009      	b.n	8002062 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	60ba      	str	r2, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf1      	blt.n	800204e <_write+0x12>
  }
  return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_close>:

int _close(int file)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800209c:	605a      	str	r2, [r3, #4]
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_isatty>:

int _isatty(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f004 fd26 	bl	8006b5c <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20020000 	.word	0x20020000
 800213c:	00000400 	.word	0x00000400
 8002140:	200092c8 	.word	0x200092c8
 8002144:	20009420 	.word	0x20009420

08002148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002170:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002172:	490e      	ldr	r1, [pc, #56]	@ (80021ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002174:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0b      	ldr	r2, [pc, #44]	@ (80021b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002188:	4c0b      	ldr	r4, [pc, #44]	@ (80021b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002196:	f7ff ffd7 	bl	8002148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219a:	f004 fce5 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219e:	f7ff fa79 	bl	8001694 <main>
  bx  lr    
 80021a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021b0:	080097d8 	.word	0x080097d8
  ldr r2, =_sbss
 80021b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021b8:	2000941c 	.word	0x2000941c

080021bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_Init+0x40>)
 80021ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_Init+0x40>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <HAL_Init+0x40>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f000 f94f 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ee:	200f      	movs	r0, #15
 80021f0:	f000 f808 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f4:	f7ff fcca 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_InitTick+0x54>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0x58>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f967 	bl	80024f6 <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00e      	b.n	8002250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d80a      	bhi.n	800224e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002238:	2200      	movs	r2, #0
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f000 f92f 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <HAL_InitTick+0x5c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000000 	.word	0x20000000
 800225c:	20000008 	.word	0x20000008
 8002260:	20000004 	.word	0x20000004

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	200092cc 	.word	0x200092cc

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200092cc 	.word	0x200092cc

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	@ (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	@ (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff feb6 	bl	800228c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e099      	b.n	8002660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254c:	e00f      	b.n	800256e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254e:	f7ff fe9d 	bl	800228c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b05      	cmp	r3, #5
 800255a:	d908      	bls.n	800256e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e078      	b.n	8002660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e8      	bne.n	800254e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_DMA_Init+0x158>)
 8002588:	4013      	ands	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4313      	orrs	r3, r2
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0307 	bic.w	r3, r3, #7
 80025ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d117      	bne.n	8002632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa6f 	bl	8002af8 <DMA_CheckFifoParam>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800262e:	2301      	movs	r3, #1
 8002630:	e016      	b.n	8002660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa26 	bl	8002a8c <DMA_CalcBaseAndBitshift>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	223f      	movs	r2, #63	@ 0x3f
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	f010803f 	.word	0xf010803f

0800266c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_DMA_Start_IT+0x26>
 800268e:	2302      	movs	r3, #2
 8002690:	e040      	b.n	8002714 <HAL_DMA_Start_IT+0xa8>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d12f      	bne.n	8002706 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f9b8 	bl	8002a30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	223f      	movs	r2, #63	@ 0x3f
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0216 	orr.w	r2, r2, #22
 80026da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e005      	b.n	8002712 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800270e:	2302      	movs	r3, #2
 8002710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002712:	7dfb      	ldrb	r3, [r7, #23]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002728:	4b8e      	ldr	r3, [pc, #568]	@ (8002964 <HAL_DMA_IRQHandler+0x248>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a8e      	ldr	r2, [pc, #568]	@ (8002968 <HAL_DMA_IRQHandler+0x24c>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2208      	movs	r2, #8
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2208      	movs	r2, #8
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	2204      	movs	r2, #4
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	2210      	movs	r2, #16
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03c      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	2210      	movs	r2, #16
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d024      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e01f      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e016      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0208 	bic.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	2220      	movs	r2, #32
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808f 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8087 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2220      	movs	r2, #32
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d136      	bne.n	8002934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x1da>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	223f      	movs	r2, #63	@ 0x3f
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	d07e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
        }
        return;
 8002932:	e079      	b.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e02c      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000
 8002968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e01e      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d032      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2205      	movs	r2, #5
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d307      	bcc.n	8002a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x2cc>
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a28:	bf00      	nop
    }
  }
}
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d108      	bne.n	8002a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a6e:	e007      	b.n	8002a80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3b10      	subs	r3, #16
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aa6:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <DMA_CalcBaseAndBitshift+0x68>)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d909      	bls.n	8002ace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	1d1a      	adds	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002acc:	e007      	b.n	8002ade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	aaaaaaab 	.word	0xaaaaaaab
 8002af4:	08009450 	.word	0x08009450

08002af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11f      	bne.n	8002b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d856      	bhi.n	8002bc6 <DMA_CheckFifoParam+0xce>
 8002b18:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <DMA_CheckFifoParam+0x28>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b43 	.word	0x08002b43
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	08002bc7 	.word	0x08002bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d046      	beq.n	8002bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e043      	b.n	8002bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b4a:	d140      	bne.n	8002bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e03d      	b.n	8002bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	d121      	bne.n	8002ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d837      	bhi.n	8002bd2 <DMA_CheckFifoParam+0xda>
 8002b62:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <DMA_CheckFifoParam+0x70>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002b7f 	.word	0x08002b7f
 8002b70:	08002b79 	.word	0x08002b79
 8002b74:	08002b91 	.word	0x08002b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e030      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d025      	beq.n	8002bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e022      	b.n	8002bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b98:	d11f      	bne.n	8002bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b9e:	e01c      	b.n	8002bda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d903      	bls.n	8002bae <DMA_CheckFifoParam+0xb6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bac:	e018      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb2:	e015      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e00b      	b.n	8002bde <DMA_CheckFifoParam+0xe6>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e00a      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e008      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e006      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e004      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
    }
  } 
  
  return status; 
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e165      	b.n	8002ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8154 	bne.w	8002ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d005      	beq.n	8002c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d130      	bne.n	8002ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0201 	and.w	r2, r3, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d017      	beq.n	8002ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d123      	bne.n	8002d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80ae 	beq.w	8002ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef8 <HAL_GPIO_Init+0x308>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x21a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002efc <HAL_GPIO_Init+0x30c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x216>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x310>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x212>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f04 <HAL_GPIO_Init+0x314>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_GPIO_Init+0x318>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x20a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f0c <HAL_GPIO_Init+0x31c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x206>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a49      	ldr	r2, [pc, #292]	@ (8002f10 <HAL_GPIO_Init+0x320>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x202>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1c:	4935      	ldr	r1, [pc, #212]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4e:	4a31      	ldr	r2, [pc, #196]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ecc:	4a11      	ldr	r2, [pc, #68]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	f67f ae96 	bls.w	8002c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020400 	.word	0x40020400
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40021400 	.word	0x40021400
 8002f10:	40021800 	.word	0x40021800
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e12b      	b.n	80031b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fe32 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	@ 0x24
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f000 ff80 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a81      	ldr	r2, [pc, #516]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d807      	bhi.n	8002fd0 <HAL_I2C_Init+0x84>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a80      	ldr	r2, [pc, #512]	@ (80031c4 <HAL_I2C_Init+0x278>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e006      	b.n	8002fde <HAL_I2C_Init+0x92>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a7d      	ldr	r2, [pc, #500]	@ (80031c8 <HAL_I2C_Init+0x27c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	bf94      	ite	ls
 8002fd8:	2301      	movls	r3, #1
 8002fda:	2300      	movhi	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0e7      	b.n	80031b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a78      	ldr	r2, [pc, #480]	@ (80031cc <HAL_I2C_Init+0x280>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a6a      	ldr	r2, [pc, #424]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <HAL_I2C_Init+0xd4>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3301      	adds	r3, #1
 800301e:	e009      	b.n	8003034 <HAL_I2C_Init+0xe8>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	4a69      	ldr	r2, [pc, #420]	@ (80031d0 <HAL_I2C_Init+0x284>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	3301      	adds	r3, #1
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003046:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	495c      	ldr	r1, [pc, #368]	@ (80031c0 <HAL_I2C_Init+0x274>)
 8003050:	428b      	cmp	r3, r1
 8003052:	d819      	bhi.n	8003088 <HAL_I2C_Init+0x13c>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e59      	subs	r1, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003068:	400b      	ands	r3, r1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_I2C_Init+0x138>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e59      	subs	r1, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fbb1 f3f3 	udiv	r3, r1, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003082:	e051      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003084:	2304      	movs	r3, #4
 8003086:	e04f      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d111      	bne.n	80030b4 <HAL_I2C_Init+0x168>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e012      	b.n	80030da <HAL_I2C_Init+0x18e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Init+0x196>
 80030de:	2301      	movs	r3, #1
 80030e0:	e022      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10e      	bne.n	8003108 <HAL_I2C_Init+0x1bc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e58      	subs	r0, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	440b      	add	r3, r1
 80030f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Init+0x1dc>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	0099      	lsls	r1, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6809      	ldr	r1, [r1, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003156:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6911      	ldr	r1, [r2, #16]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	4311      	orrs	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	000186a0 	.word	0x000186a0
 80031c4:	001e847f 	.word	0x001e847f
 80031c8:	003d08ff 	.word	0x003d08ff
 80031cc:	431bde83 	.word	0x431bde83
 80031d0:	10624dd3 	.word	0x10624dd3

080031d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	460b      	mov	r3, r1
 80031e2:	817b      	strh	r3, [r7, #10]
 80031e4:	4613      	mov	r3, r2
 80031e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7ff f850 	bl	800228c <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	f040 80e0 	bne.w	80033bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2319      	movs	r3, #25
 8003202:	2201      	movs	r2, #1
 8003204:	4970      	ldr	r1, [pc, #448]	@ (80033c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa92 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	e0d3      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_I2C_Master_Transmit+0x50>
 8003220:	2302      	movs	r3, #2
 8003222:	e0cc      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d007      	beq.n	800324a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003258:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2221      	movs	r2, #33	@ 0x21
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2210      	movs	r2, #16
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	893a      	ldrh	r2, [r7, #8]
 800327a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a50      	ldr	r2, [pc, #320]	@ (80033cc <HAL_I2C_Master_Transmit+0x1f8>)
 800328a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800328c:	8979      	ldrh	r1, [r7, #10]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f9ca 	bl	800362c <I2C_MasterRequestWrite>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e08d      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032b8:	e066      	b.n	8003388 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	6a39      	ldr	r1, [r7, #32]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fb0c 	bl	80038dc <I2C_WaitOnTXEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d107      	bne.n	80032e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06b      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b04      	cmp	r3, #4
 8003322:	d11b      	bne.n	800335c <HAL_I2C_Master_Transmit+0x188>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d017      	beq.n	800335c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	6a39      	ldr	r1, [r7, #32]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fafc 	bl	800395e <I2C_WaitOnBTFFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b04      	cmp	r3, #4
 8003372:	d107      	bne.n	8003384 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003382:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e01a      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d194      	bne.n	80032ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	00100002 	.word	0x00100002
 80033cc:	ffff0000 	.word	0xffff0000

080033d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7fe ff54 	bl	800228c <HAL_GetTick>
 80033e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	f040 8111 	bne.w	800361a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2319      	movs	r3, #25
 80033fe:	2201      	movs	r2, #1
 8003400:	4988      	ldr	r1, [pc, #544]	@ (8003624 <HAL_I2C_IsDeviceReady+0x254>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f994 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
 8003410:	e104      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2C_IsDeviceReady+0x50>
 800341c:	2302      	movs	r3, #2
 800341e:	e0fd      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d007      	beq.n	8003446 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2224      	movs	r2, #36	@ 0x24
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a70      	ldr	r2, [pc, #448]	@ (8003628 <HAL_I2C_IsDeviceReady+0x258>)
 8003468:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003478:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f952 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a0:	d103      	bne.n	80034aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b6      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034be:	f7fe fee5 	bl	800228c <HAL_GetTick>
 80034c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034f2:	e025      	b.n	8003540 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034f4:	f7fe feca 	bl	800228c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <HAL_I2C_IsDeviceReady+0x13a>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22a0      	movs	r2, #160	@ 0xa0
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2ba0      	cmp	r3, #160	@ 0xa0
 800354a:	d005      	beq.n	8003558 <HAL_I2C_IsDeviceReady+0x188>
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_I2C_IsDeviceReady+0x188>
 8003552:	7dbb      	ldrb	r3, [r7, #22]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0cd      	beq.n	80034f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d129      	bne.n	80035c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2319      	movs	r3, #25
 800359a:	2201      	movs	r2, #1
 800359c:	4921      	ldr	r1, [pc, #132]	@ (8003624 <HAL_I2C_IsDeviceReady+0x254>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8c6 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e036      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e02c      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2319      	movs	r3, #25
 80035e2:	2201      	movs	r2, #1
 80035e4:	490f      	ldr	r1, [pc, #60]	@ (8003624 <HAL_I2C_IsDeviceReady+0x254>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f8a2 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e012      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3301      	adds	r3, #1
 80035fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	f4ff af32 	bcc.w	800346a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00100002 	.word	0x00100002
 8003628:	ffff0000 	.word	0xffff0000

0800362c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	460b      	mov	r3, r1
 800363a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d006      	beq.n	8003656 <I2C_MasterRequestWrite+0x2a>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d003      	beq.n	8003656 <I2C_MasterRequestWrite+0x2a>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003654:	d108      	bne.n	8003668 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e00b      	b.n	8003680 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	2b12      	cmp	r3, #18
 800366e:	d107      	bne.n	8003680 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f84f 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a6:	d103      	bne.n	80036b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e035      	b.n	8003720 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036bc:	d108      	bne.n	80036d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	e01b      	b.n	8003708 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	11db      	asrs	r3, r3, #7
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f063 030f 	orn	r3, r3, #15
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	490e      	ldr	r1, [pc, #56]	@ (8003728 <I2C_MasterRequestWrite+0xfc>)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f875 	bl	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e010      	b.n	8003720 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4907      	ldr	r1, [pc, #28]	@ (800372c <I2C_MasterRequestWrite+0x100>)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f865 	bl	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	00010008 	.word	0x00010008
 800372c:	00010002 	.word	0x00010002

08003730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	e025      	b.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d021      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fe fd9f 	bl	800228c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e023      	b.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10d      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	e00c      	b.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d0b6      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ec:	e051      	b.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037fc:	d123      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e046      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d021      	beq.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fd1d 	bl	800228c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d116      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e020      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10c      	bne.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e00b      	b.n	80038ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d18d      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e8:	e02d      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f878 	bl	80039e0 <I2C_IsAcknowledgeFailed>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02d      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d021      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fcc3 	bl	800228c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d116      	bne.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e007      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d1ca      	bne.n	80038ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800396a:	e02d      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f837 	bl	80039e0 <I2C_IsAcknowledgeFailed>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e02d      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d021      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fe fc82 	bl	800228c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e007      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d1ca      	bne.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f6:	d11b      	bne.n	8003a30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a40:	b08f      	sub	sp, #60	@ 0x3c
 8003a42:	af0a      	add	r7, sp, #40	@ 0x28
 8003a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e116      	b.n	8003c7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fa00 	bl	8001e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 ffe5 	bl	8005a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	687e      	ldr	r6, [r7, #4]
 8003a9c:	466d      	mov	r5, sp
 8003a9e:	f106 0410 	add.w	r4, r6, #16
 8003aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ab2:	1d33      	adds	r3, r6, #4
 8003ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab6:	6838      	ldr	r0, [r7, #0]
 8003ab8:	f001 ff70 	bl	800599c <USB_CoreInit>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0d7      	b.n	8003c7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 ffd3 	bl	8005a80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e04a      	b.n	8003b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	333d      	adds	r3, #61	@ 0x3d
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	333c      	adds	r3, #60	@ 0x3c
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	b298      	uxth	r0, r3
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3344      	adds	r3, #68	@ 0x44
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3340      	adds	r3, #64	@ 0x40
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3348      	adds	r3, #72	@ 0x48
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334c      	adds	r3, #76	@ 0x4c
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3354      	adds	r3, #84	@ 0x54
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	3301      	adds	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3af      	bcc.n	8003ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e044      	b.n	8003c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3b5      	bcc.n	8003b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	687e      	ldr	r6, [r7, #4]
 8003c22:	466d      	mov	r5, sp
 8003c24:	f106 0410 	add.w	r4, r6, #16
 8003c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c38:	1d33      	adds	r3, r6, #4
 8003c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3c:	6838      	ldr	r0, [r7, #0]
 8003c3e:	f001 ff6b 	bl	8005b18 <USB_DevInit>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e014      	b.n	8003c7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f80a 	bl	8003c86 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 f929 	bl	8005ece <USB_DevDisconnect>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	f043 0303 	orr.w	r3, r3, #3
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cc      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b68      	ldr	r3, [pc, #416]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d90c      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b65      	ldr	r3, [pc, #404]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a58      	ldr	r2, [pc, #352]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d044      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d119      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e06f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e067      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b37      	ldr	r3, [pc, #220]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4934      	ldr	r1, [pc, #208]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe fa64 	bl	800228c <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fe fa60 	bl	800228c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df0:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d20c      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 fb7f 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f9c4 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	08009438 	.word	0x08009438
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000000 	.word	0x20000000

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	@ (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	08009448 	.word	0x08009448

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08009448 	.word	0x08009448

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	@ 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f42:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	496c      	ldr	r1, [pc, #432]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f6a:	4b64      	ldr	r3, [pc, #400]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f70:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	4960      	ldr	r1, [pc, #384]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f98:	4b58      	ldr	r3, [pc, #352]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4955      	ldr	r1, [pc, #340]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d017      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd4:	4b49      	ldr	r3, [pc, #292]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	4946      	ldr	r1, [pc, #280]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 808a 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	4b39      	ldr	r3, [pc, #228]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	4a38      	ldr	r2, [pc, #224]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	@ 0x40
 8004022:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800402e:	4b34      	ldr	r3, [pc, #208]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a33      	ldr	r2, [pc, #204]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7fe f927 	bl	800228c <HAL_GetTick>
 800403e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe f923 	bl	800228c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e278      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004054:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004060:	4b26      	ldr	r3, [pc, #152]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004068:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	429a      	cmp	r2, r3
 800407c:	d028      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800407e:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004086:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004088:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004094:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800409a:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d114      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe f8f1 	bl	800228c <HAL_GetTick>
 80040aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe f8ed 	bl	800228c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e240      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040dc:	d114      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80040de:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f2:	4902      	ldr	r1, [pc, #8]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
 80040f8:	e00c      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40007000 	.word	0x40007000
 8004104:	42470e40 	.word	0x42470e40
 8004108:	4b4a      	ldr	r3, [pc, #296]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a49      	ldr	r2, [pc, #292]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800410e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004116:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	4944      	ldr	r1, [pc, #272]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004122:	4313      	orrs	r3, r2
 8004124:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004138:	4b3f      	ldr	r3, [pc, #252]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800413a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004148:	4b3a      	ldr	r3, [pc, #232]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004156:	4937      	ldr	r1, [pc, #220]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004170:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004178:	492e      	ldr	r1, [pc, #184]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800418c:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004192:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	4926      	ldr	r1, [pc, #152]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041aa:	d101      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041ac:	2301      	movs	r3, #1
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	491a      	ldr	r1, [pc, #104]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d011      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ec:	4911      	ldr	r1, [pc, #68]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041fc:	d101      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80041fe:	2301      	movs	r3, #1
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d005      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004210:	f040 80ff 	bne.w	8004412 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fe f837 	bl	800228c <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004220:	e00e      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004222:	f7fe f833 	bl	800228c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d907      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e188      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004234:	40023800 	.word	0x40023800
 8004238:	424711e0 	.word	0x424711e0
 800423c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004240:	4b7e      	ldr	r3, [pc, #504]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ea      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d124      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004274:	4b71      	ldr	r3, [pc, #452]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	3301      	adds	r3, #1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004286:	4b6d      	ldr	r3, [pc, #436]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	431a      	orrs	r2, r3
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	4961      	ldr	r1, [pc, #388]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d035      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e8:	d130      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042ea:	4b54      	ldr	r3, [pc, #336]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042fc:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004302:	0f1b      	lsrs	r3, r3, #28
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	019b      	lsls	r3, r3, #6
 8004314:	431a      	orrs	r2, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	431a      	orrs	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4943      	ldr	r1, [pc, #268]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004334:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800433a:	f023 021f 	bic.w	r2, r3, #31
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	493d      	ldr	r1, [pc, #244]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d029      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004360:	d124      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004362:	4b36      	ldr	r3, [pc, #216]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004374:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437a:	0f1b      	lsrs	r3, r3, #28
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	019b      	lsls	r3, r3, #6
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	431a      	orrs	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	071b      	lsls	r3, r3, #28
 80043a4:	4925      	ldr	r1, [pc, #148]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d016      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	4917      	ldr	r1, [pc, #92]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e6:	4b16      	ldr	r3, [pc, #88]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fd ff4e 	bl	800228c <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043f4:	f7fd ff4a 	bl	800228c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e09f      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004406:	4b0d      	ldr	r3, [pc, #52]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	2b01      	cmp	r3, #1
 8004416:	f040 8095 	bne.w	8004544 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004420:	f7fd ff34 	bl	800228c <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004426:	e00f      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004428:	f7fd ff30 	bl	800228c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d908      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e085      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	42470068 	.word	0x42470068
 8004444:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004448:	4b41      	ldr	r3, [pc, #260]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004454:	d0e8      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	2b00      	cmp	r3, #0
 800447c:	d127      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800447e:	4b34      	ldr	r3, [pc, #208]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	431a      	orrs	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	4928      	ldr	r1, [pc, #160]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044b4:	4b26      	ldr	r3, [pc, #152]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ba:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	3b01      	subs	r3, #1
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	4922      	ldr	r1, [pc, #136]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01d      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044e2:	d118      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	0e1b      	lsrs	r3, r3, #24
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	019b      	lsls	r3, r3, #6
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	4910      	ldr	r1, [pc, #64]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800451c:	f7fd feb6 	bl	800228c <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004524:	f7fd feb2 	bl	800228c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e007      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800453e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004542:	d1ef      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3730      	adds	r7, #48	@ 0x30
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	42470070 	.word	0x42470070

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b0ae      	sub	sp, #184	@ 0xb8
 800455e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800457e:	4bcb      	ldr	r3, [pc, #812]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b0c      	cmp	r3, #12
 8004588:	f200 8206 	bhi.w	8004998 <HAL_RCC_GetSysClockFreq+0x440>
 800458c:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <HAL_RCC_GetSysClockFreq+0x3c>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c9 	.word	0x080045c9
 8004598:	08004999 	.word	0x08004999
 800459c:	08004999 	.word	0x08004999
 80045a0:	08004999 	.word	0x08004999
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	08004999 	.word	0x08004999
 80045ac:	08004999 	.word	0x08004999
 80045b0:	08004999 	.word	0x08004999
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	08004999 	.word	0x08004999
 80045bc:	08004999 	.word	0x08004999
 80045c0:	08004999 	.word	0x08004999
 80045c4:	080047c9 	.word	0x080047c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4bb9      	ldr	r3, [pc, #740]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80045ce:	e1e7      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4bb8      	ldr	r3, [pc, #736]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045d6:	e1e3      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d8:	4bb4      	ldr	r3, [pc, #720]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e4:	4bb1      	ldr	r3, [pc, #708]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d071      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f0:	4bae      	ldr	r3, [pc, #696]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004628:	0150      	lsls	r0, r2, #5
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4621      	mov	r1, r4
 8004630:	1a51      	subs	r1, r2, r1
 8004632:	6439      	str	r1, [r7, #64]	@ 0x40
 8004634:	4629      	mov	r1, r5
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	647b      	str	r3, [r7, #68]	@ 0x44
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004648:	4649      	mov	r1, r9
 800464a:	018b      	lsls	r3, r1, #6
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004652:	4641      	mov	r1, r8
 8004654:	018a      	lsls	r2, r1, #6
 8004656:	4641      	mov	r1, r8
 8004658:	1a51      	subs	r1, r2, r1
 800465a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800465c:	4649      	mov	r1, r9
 800465e:	eb63 0301 	sbc.w	r3, r3, r1
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004670:	4649      	mov	r1, r9
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4641      	mov	r1, r8
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4622      	mov	r2, r4
 8004686:	189b      	adds	r3, r3, r2
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	462b      	mov	r3, r5
 800468c:	460a      	mov	r2, r1
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046a0:	4629      	mov	r1, r5
 80046a2:	024b      	lsls	r3, r1, #9
 80046a4:	4621      	mov	r1, r4
 80046a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046aa:	4621      	mov	r1, r4
 80046ac:	024a      	lsls	r2, r1, #9
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80046c4:	f7fc fae0 	bl	8000c88 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4613      	mov	r3, r2
 80046ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046d2:	e067      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d4:	4b75      	ldr	r3, [pc, #468]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80046e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ee:	2300      	movs	r3, #0
 80046f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	0159      	lsls	r1, r3, #5
 8004704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004708:	0150      	lsls	r0, r2, #5
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4621      	mov	r1, r4
 8004710:	1a51      	subs	r1, r2, r1
 8004712:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004714:	4629      	mov	r1, r5
 8004716:	eb63 0301 	sbc.w	r3, r3, r1
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004728:	4649      	mov	r1, r9
 800472a:	018b      	lsls	r3, r1, #6
 800472c:	4641      	mov	r1, r8
 800472e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004732:	4641      	mov	r1, r8
 8004734:	018a      	lsls	r2, r1, #6
 8004736:	4641      	mov	r1, r8
 8004738:	ebb2 0a01 	subs.w	sl, r2, r1
 800473c:	4649      	mov	r1, r9
 800473e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800474e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004756:	4692      	mov	sl, r2
 8004758:	469b      	mov	fp, r3
 800475a:	4623      	mov	r3, r4
 800475c:	eb1a 0303 	adds.w	r3, sl, r3
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	462b      	mov	r3, r5
 8004764:	eb4b 0303 	adc.w	r3, fp, r3
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004776:	4629      	mov	r1, r5
 8004778:	028b      	lsls	r3, r1, #10
 800477a:	4621      	mov	r1, r4
 800477c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004780:	4621      	mov	r1, r4
 8004782:	028a      	lsls	r2, r1, #10
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800478c:	2200      	movs	r2, #0
 800478e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004790:	677a      	str	r2, [r7, #116]	@ 0x74
 8004792:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004796:	f7fc fa77 	bl	8000c88 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4613      	mov	r3, r2
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80047b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047c6:	e0eb      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b38      	ldr	r3, [pc, #224]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d4:	4b35      	ldr	r3, [pc, #212]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d06b      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e0:	4b32      	ldr	r3, [pc, #200]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	2200      	movs	r2, #0
 80047e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f4:	2300      	movs	r3, #0
 80047f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047fc:	4622      	mov	r2, r4
 80047fe:	462b      	mov	r3, r5
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	0159      	lsls	r1, r3, #5
 800480a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480e:	0150      	lsls	r0, r2, #5
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4621      	mov	r1, r4
 8004816:	1a51      	subs	r1, r2, r1
 8004818:	61b9      	str	r1, [r7, #24]
 800481a:	4629      	mov	r1, r5
 800481c:	eb63 0301 	sbc.w	r3, r3, r1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800482e:	4659      	mov	r1, fp
 8004830:	018b      	lsls	r3, r1, #6
 8004832:	4651      	mov	r1, sl
 8004834:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004838:	4651      	mov	r1, sl
 800483a:	018a      	lsls	r2, r1, #6
 800483c:	4651      	mov	r1, sl
 800483e:	ebb2 0801 	subs.w	r8, r2, r1
 8004842:	4659      	mov	r1, fp
 8004844:	eb63 0901 	sbc.w	r9, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485c:	4690      	mov	r8, r2
 800485e:	4699      	mov	r9, r3
 8004860:	4623      	mov	r3, r4
 8004862:	eb18 0303 	adds.w	r3, r8, r3
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	462b      	mov	r3, r5
 800486a:	eb49 0303 	adc.w	r3, r9, r3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800487c:	4629      	mov	r1, r5
 800487e:	024b      	lsls	r3, r1, #9
 8004880:	4621      	mov	r1, r4
 8004882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004886:	4621      	mov	r1, r4
 8004888:	024a      	lsls	r2, r1, #9
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004892:	2200      	movs	r2, #0
 8004894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004896:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800489c:	f7fc f9f4 	bl	8000c88 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048aa:	e065      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x420>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	2200      	movs	r2, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	4611      	mov	r1, r2
 80048c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80048ca:	2300      	movs	r3, #0
 80048cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	0159      	lsls	r1, r3, #5
 80048e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e4:	0150      	lsls	r0, r2, #5
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4641      	mov	r1, r8
 80048ec:	1a51      	subs	r1, r2, r1
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	4649      	mov	r1, r9
 80048f2:	eb63 0301 	sbc.w	r3, r3, r1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004904:	4659      	mov	r1, fp
 8004906:	018b      	lsls	r3, r1, #6
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800490e:	4651      	mov	r1, sl
 8004910:	018a      	lsls	r2, r1, #6
 8004912:	4651      	mov	r1, sl
 8004914:	1a54      	subs	r4, r2, r1
 8004916:	4659      	mov	r1, fp
 8004918:	eb63 0501 	sbc.w	r5, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	00eb      	lsls	r3, r5, #3
 8004926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492a:	00e2      	lsls	r2, r4, #3
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	4643      	mov	r3, r8
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	464b      	mov	r3, r9
 8004938:	eb45 0303 	adc.w	r3, r5, r3
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494a:	4629      	mov	r1, r5
 800494c:	028b      	lsls	r3, r1, #10
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004954:	4621      	mov	r1, r4
 8004956:	028a      	lsls	r2, r1, #10
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004960:	2200      	movs	r2, #0
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004964:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800496a:	f7fc f98d 	bl	8000c88 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4613      	mov	r3, r2
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004978:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0f1b      	lsrs	r3, r3, #28
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800498a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004996:	e003      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800499e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	37b8      	adds	r7, #184	@ 0xb8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e28d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8083 	beq.w	8004ade <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049d8:	4b94      	ldr	r3, [pc, #592]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d019      	beq.n	8004a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049e4:	4b91      	ldr	r3, [pc, #580]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049f0:	4b8e      	ldr	r3, [pc, #568]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b8b      	ldr	r3, [pc, #556]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b84      	ldr	r3, [pc, #528]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x124>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e25a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x90>
 8004a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7b      	ldr	r2, [pc, #492]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xcc>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0xb4>
 8004a52:	4b76      	ldr	r3, [pc, #472]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b73      	ldr	r3, [pc, #460]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a72      	ldr	r2, [pc, #456]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xcc>
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6e      	ldr	r2, [pc, #440]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b6c      	ldr	r3, [pc, #432]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fbfe 	bl	800228c <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd fbfa 	bl	800228c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e21f      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b61      	ldr	r3, [pc, #388]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xdc>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fbea 	bl	800228c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd fbe6 	bl	800228c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e20b      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b57      	ldr	r3, [pc, #348]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x104>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d06f      	beq.n	8004bca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004aea:	4b50      	ldr	r3, [pc, #320]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004af6:	4b4d      	ldr	r3, [pc, #308]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b02:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b47      	ldr	r3, [pc, #284]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b44      	ldr	r3, [pc, #272]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b41      	ldr	r3, [pc, #260]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x186>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1d3      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4937      	ldr	r1, [pc, #220]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fd fb93 	bl	800228c <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd fb8f 	bl	800228c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1b4      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b28      	ldr	r3, [pc, #160]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4925      	ldr	r1, [pc, #148]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b24      	ldr	r3, [pc, #144]	@ (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fb72 	bl	800228c <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fd fb6e 	bl	800228c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e193      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fd fb52 	bl	800228c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fd fb4e 	bl	800228c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e173      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x234>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fb3b 	bl	800228c <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	e00e      	b.n	8004c38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fb37 	bl	800228c <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d907      	bls.n	8004c38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e15c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470000 	.word	0x42470000
 8004c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b8a      	ldr	r3, [pc, #552]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ea      	bne.n	8004c1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8097 	beq.w	8004d80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b83      	ldr	r3, [pc, #524]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b7f      	ldr	r3, [pc, #508]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c72:	4b7c      	ldr	r3, [pc, #496]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b79      	ldr	r3, [pc, #484]	@ (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b76      	ldr	r3, [pc, #472]	@ (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a75      	ldr	r2, [pc, #468]	@ (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd faf7 	bl	800228c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fd faf3 	bl	800228c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e118      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x31e>
 8004cc8:	4b66      	ldr	r3, [pc, #408]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a65      	ldr	r2, [pc, #404]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x358>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x340>
 8004cde:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a60      	ldr	r2, [pc, #384]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	4b5e      	ldr	r3, [pc, #376]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	4a5d      	ldr	r2, [pc, #372]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x358>
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a59      	ldr	r2, [pc, #356]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	4b57      	ldr	r3, [pc, #348]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a56      	ldr	r2, [pc, #344]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd fab8 	bl	800228c <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fd fab4 	bl	800228c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0d7      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	4b4b      	ldr	r3, [pc, #300]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x368>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd faa2 	bl	800228c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fa9e 	bl	800228c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0c1      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	4b40      	ldr	r3, [pc, #256]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4a3a      	ldr	r2, [pc, #232]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ad 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8a:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d060      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d145      	bne.n	8004e2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b33      	ldr	r3, [pc, #204]	@ (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fd fa72 	bl	800228c <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fd fa6e 	bl	800228c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e093      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b29      	ldr	r3, [pc, #164]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	491b      	ldr	r1, [pc, #108]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd fa43 	bl	800228c <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fd fa3f 	bl	800228c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e064      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1c:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x452>
 8004e28:	e05c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fa2c 	bl	800228c <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd fa28 	bl	800228c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e04d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x480>
 8004e56:	e045      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e040      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <HAL_RCC_OscConfig+0x538>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d030      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d129      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d122      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d119      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e04e      	b.n	8004fa4 <HAL_SPDIFRX_Init+0xb0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fec8 	bl	8001cb0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0203 	bic.w	r2, r2, #3
 8004f36:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 23ef 	bic.w	r3, r3, #489472	@ 0x77800
 8004f46:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004f4a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8004f54:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8004f5a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8004f60:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8004f66:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8004f6c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8004f72:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8004f78:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8004f7e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8004f84:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_SPDIFRX_ReceiveDataFlow_DMA>:
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint16_t Size)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8004fba:	4b74      	ldr	r3, [pc, #464]	@ (800518c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1e0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a74      	ldr	r2, [pc, #464]	@ (8005190 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1e4>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	0a5a      	lsrs	r2, r3, #9
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fd4:	74fb      	strb	r3, [r7, #19]

  if ((pData == NULL) || (Size == 0U))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x36>
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x3a>
  {
    return  HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0cd      	b.n	8005182 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d6>
  }

  if ((tempState == HAL_SPDIFRX_STATE_READY) || (tempState == HAL_SPDIFRX_STATE_BUSY_CX))
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d003      	beq.n	8004ff4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x48>
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	f040 80c6 	bne.w	8005180 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d4>
  {
    /* Process Locked */
    __HAL_LOCK(hspdif);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x58>
 8005000:	2302      	movs	r3, #2
 8005002:	e0be      	b.n	8005182 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d6>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    hspdif->pRxBuffPtr = pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspdif->RxXferSize = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	869a      	strh	r2, [r3, #52]	@ 0x34
    hspdif->RxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	86da      	strh	r2, [r3, #54]	@ 0x36

    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	649a      	str	r2, [r3, #72]	@ 0x48
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2203      	movs	r2, #3
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Set the SPDIFRX Rx DMA Half transfer complete callback */
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	4a58      	ldr	r2, [pc, #352]	@ (8005194 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1e8>)
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SPDIFRX Rx DMA transfer complete callback */
    hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	4a57      	ldr	r2, [pc, #348]	@ (8005198 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1ec>)
 800503a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	4a56      	ldr	r2, [pc, #344]	@ (800519c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1f0>)
 8005042:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the DMA request */
    if (HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPtr, Size) != HAL_OK)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3310      	adds	r3, #16
 800504e:	4619      	mov	r1, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	461a      	mov	r2, r3
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	f7fd fb08 	bl	800266c <HAL_DMA_Start_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00c      	beq.n	800507c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xd0>
    {
      /* Set SPDIFRX error */
      hspdif->ErrorCode = HAL_SPDIFRX_ERROR_DMA;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2208      	movs	r2, #8
 8005066:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Set SPDIFRX state */
      hspdif->State = HAL_SPDIFRX_STATE_ERROR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2207      	movs	r2, #7
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Process Unlocked */
      __HAL_UNLOCK(hspdif);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e082      	b.n	8005182 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d6>
    }

    /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
    hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0204 	orr.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]

    if ((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_RCV)
 800508c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d06c      	beq.n	8005174 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1c8>
    {
      /* Start synchronization */
      __HAL_SPDIFRX_SYNC(hspdif);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

      /* Wait until SYNCD flag is set */
      do
      {
        if (count == 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d14f      	bne.n	8005150 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1a4>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	b292      	uxth	r2, r2
 80050c2:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	889b      	ldrh	r3, [r3, #4]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0202 	bic.w	r2, r2, #2
 80050d4:	b292      	uxth	r2, r2
 80050d6:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	889b      	ldrh	r3, [r3, #4]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0204 	bic.w	r2, r2, #4
 80050e8:	b292      	uxth	r2, r2
 80050ea:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	889b      	ldrh	r3, [r3, #4]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0208 	bic.w	r2, r2, #8
 80050fc:	b292      	uxth	r2, r2
 80050fe:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	889b      	ldrh	r3, [r3, #4]
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0210 	bic.w	r2, r2, #16
 8005110:	b292      	uxth	r2, r2
 8005112:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	889b      	ldrh	r3, [r3, #4]
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0220 	bic.w	r2, r2, #32
 8005124:	b292      	uxth	r2, r2
 8005126:	809a      	strh	r2, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	889b      	ldrh	r3, [r3, #4]
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005138:	b292      	uxth	r2, r2
 800513a:	809a      	strh	r2, [r3, #4]

          hspdif->State = HAL_SPDIFRX_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

          /* Process Unlocked */
          __HAL_UNLOCK(hspdif);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e018      	b.n	8005182 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d6>
        }
        count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b20      	cmp	r3, #32
 8005162:	d1a2      	bne.n	80050aa <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xfe>

      /* Start reception */
      __HAL_SPDIFRX_RCV(hspdif);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0203 	orr.w	r2, r2, #3
 8005172:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000000 	.word	0x20000000
 8005190:	057619f1 	.word	0x057619f1
 8005194:	080052e5 	.word	0x080052e5
 8005198:	0800529f 	.word	0x0800529f
 800519c:	08005301 	.word	0x08005301

080051a0 <HAL_SPDIFRX_IRQHandler>:
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */
void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t itFlag   = hspdif->Instance->SR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60fb      	str	r3, [r7, #12]
  uint32_t itSource = hspdif->Instance->IMR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	889b      	ldrh	r3, [r3, #4]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	60bb      	str	r3, [r7, #8]

  /* SPDIFRX in mode Data Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_SPDIFRX_IRQHandler+0x3c>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <HAL_SPDIFRX_IRQHandler+0x3c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	819a      	strh	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8b6 	bl	8005348 <SPDIFRX_ReceiveDataFlow_IT>
  }

  /* SPDIFRX in mode Control Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_SPDIFRX_IRQHandler+0x5e>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <HAL_SPDIFRX_IRQHandler+0x5e>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2202      	movs	r2, #2
 80051f6:	819a      	strh	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f8d9 	bl	80053b0 <SPDIFRX_ReceiveControlFlow_IT>
  }

  /* SPDIFRX Overrun error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d011      	beq.n	800522c <HAL_SPDIFRX_IRQHandler+0x8c>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <HAL_SPDIFRX_IRQHandler+0x8c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2208      	movs	r2, #8
 8005218:	819a      	strh	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800521e:	f043 0202 	orr.w	r2, r3, #2
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	649a      	str	r2, [r3, #72]	@ 0x48

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f82f 	bl	800528a <HAL_SPDIFRX_ErrorCallback>
  }

  /* SPDIFRX Parity error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_SPDIFRX_IRQHandler+0xba>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_SPDIFRX_IRQHandler+0xba>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2204      	movs	r2, #4
 8005246:	819a      	strh	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	649a      	str	r2, [r3, #72]	@ 0x48

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f818 	bl	800528a <HAL_SPDIFRX_ErrorCallback>
  }
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_SPDIFRX_RxHalfCpltCallback>:
  * @brief Rx Transfer (Data flow) half completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxHalfCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_SPDIFRX_CxCpltCallback>:
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_SPDIFRX_ErrorCallback>:
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <SPDIFRX_DMARxCplt>:
  * @brief DMA SPDIFRX receive process (Data flow) complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx DMA Request */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b4:	d00f      	beq.n	80052d6 <SPDIFRX_DMARxCplt+0x38>
  {
    hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6819      	ldr	r1, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80052c4:	400b      	ands	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]
    hspdif->RxXferCount = 0;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7fc f8b0 	bl	800143c <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <SPDIFRX_DMARxHalfCplt>:
  * @brief DMA SPDIFRX receive process (Data flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxHalfCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff ffb5 	bl	8005262 <HAL_SPDIFRX_RxHalfCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <SPDIFRX_DMAError>:
  * @brief DMA SPDIFRX communication error callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMAError(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Cb DMA Request */
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	f64f 33fb 	movw	r3, #64507	@ 0xfbfb
 800531c:	400b      	ands	r3, r1
 800531e:	6013      	str	r3, [r2, #0]
  hspdif->RxXferCount = 0;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	86da      	strh	r2, [r3, #54]	@ 0x36

  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the error code and execute error callback*/
  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005332:	f043 0208 	orr.w	r2, r3, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	649a      	str	r2, [r3, #72]	@ 0x48
#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  /* The transfer is not stopped */
  hspdif->ErrorCallback(hspdif);
#else
  /* The transfer is not stopped */
  HAL_SPDIFRX_ErrorCallback(hspdif);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ffa5 	bl	800528a <HAL_SPDIFRX_ErrorCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	6912      	ldr	r2, [r2, #16]
 800535a:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspdif->RxXferCount--;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspdif->RxXferCount == 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d114      	bne.n	80053a8 <SPDIFRX_ReceiveDataFlow_IT+0x60>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 020d 	bic.w	r2, r2, #13
 800538e:	b292      	uxth	r2, r2
 8005390:	809a      	strh	r2, [r3, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fc f84a 	bl	800143c <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c0:	6952      	ldr	r2, [r2, #20]
 80053c2:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	1d1a      	adds	r2, r3, #4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspdif->CsXferCount--;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	875a      	strh	r2, [r3, #58]	@ 0x3a

  if (hspdif->CsXferCount == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d114      	bne.n	8005410 <SPDIFRX_ReceiveControlFlow_IT+0x60>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	889b      	ldrh	r3, [r3, #4]
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0202 	bic.w	r2, r2, #2
 80053f6:	b292      	uxth	r2, r2
 80053f8:	809a      	strh	r2, [r3, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff33 	bl	8005276 <HAL_SPDIFRX_CxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e03f      	b.n	80054aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fcce 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	@ 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f829 	bl	80054b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b8:	b0c0      	sub	sp, #256	@ 0x100
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d0:	68d9      	ldr	r1, [r3, #12]
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	ea40 0301 	orr.w	r3, r0, r1
 80054dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800550c:	f021 010c 	bic.w	r1, r1, #12
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800551a:	430b      	orrs	r3, r1
 800551c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	6999      	ldr	r1, [r3, #24]
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	ea40 0301 	orr.w	r3, r0, r1
 800553a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b8f      	ldr	r3, [pc, #572]	@ (8005780 <UART_SetConfig+0x2cc>)
 8005544:	429a      	cmp	r2, r3
 8005546:	d005      	beq.n	8005554 <UART_SetConfig+0xa0>
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b8d      	ldr	r3, [pc, #564]	@ (8005784 <UART_SetConfig+0x2d0>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d104      	bne.n	800555e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005554:	f7fe fcc2 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8005558:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800555c:	e003      	b.n	8005566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800555e:	f7fe fca9 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005562:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005570:	f040 810c 	bne.w	800578c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005578:	2200      	movs	r2, #0
 800557a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800557e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	1891      	adds	r1, r2, r2
 800558c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800558e:	415b      	adcs	r3, r3
 8005590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005596:	4621      	mov	r1, r4
 8005598:	eb12 0801 	adds.w	r8, r2, r1
 800559c:	4629      	mov	r1, r5
 800559e:	eb43 0901 	adc.w	r9, r3, r1
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055b6:	4690      	mov	r8, r2
 80055b8:	4699      	mov	r9, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	eb18 0303 	adds.w	r3, r8, r3
 80055c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055c4:	462b      	mov	r3, r5
 80055c6:	eb49 0303 	adc.w	r3, r9, r3
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055e2:	460b      	mov	r3, r1
 80055e4:	18db      	adds	r3, r3, r3
 80055e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e8:	4613      	mov	r3, r2
 80055ea:	eb42 0303 	adc.w	r3, r2, r3
 80055ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80055f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055f8:	f7fb fb46 	bl	8000c88 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4b61      	ldr	r3, [pc, #388]	@ (8005788 <UART_SetConfig+0x2d4>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	011c      	lsls	r4, r3, #4
 800560a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005614:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800561c:	4642      	mov	r2, r8
 800561e:	464b      	mov	r3, r9
 8005620:	1891      	adds	r1, r2, r2
 8005622:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005624:	415b      	adcs	r3, r3
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800562c:	4641      	mov	r1, r8
 800562e:	eb12 0a01 	adds.w	sl, r2, r1
 8005632:	4649      	mov	r1, r9
 8005634:	eb43 0b01 	adc.w	fp, r3, r1
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564c:	4692      	mov	sl, r2
 800564e:	469b      	mov	fp, r3
 8005650:	4643      	mov	r3, r8
 8005652:	eb1a 0303 	adds.w	r3, sl, r3
 8005656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800565a:	464b      	mov	r3, r9
 800565c:	eb4b 0303 	adc.w	r3, fp, r3
 8005660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005670:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005678:	460b      	mov	r3, r1
 800567a:	18db      	adds	r3, r3, r3
 800567c:	643b      	str	r3, [r7, #64]	@ 0x40
 800567e:	4613      	mov	r3, r2
 8005680:	eb42 0303 	adc.w	r3, r2, r3
 8005684:	647b      	str	r3, [r7, #68]	@ 0x44
 8005686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800568a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800568e:	f7fb fafb 	bl	8000c88 <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4611      	mov	r1, r2
 8005698:	4b3b      	ldr	r3, [pc, #236]	@ (8005788 <UART_SetConfig+0x2d4>)
 800569a:	fba3 2301 	umull	r2, r3, r3, r1
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2264      	movs	r2, #100	@ 0x64
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	1acb      	subs	r3, r1, r3
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056ae:	4b36      	ldr	r3, [pc, #216]	@ (8005788 <UART_SetConfig+0x2d4>)
 80056b0:	fba3 2302 	umull	r2, r3, r3, r2
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056bc:	441c      	add	r4, r3
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056d8:	415b      	adcs	r3, r3
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056e0:	4641      	mov	r1, r8
 80056e2:	1851      	adds	r1, r2, r1
 80056e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80056e6:	4649      	mov	r1, r9
 80056e8:	414b      	adcs	r3, r1
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056f8:	4659      	mov	r1, fp
 80056fa:	00cb      	lsls	r3, r1, #3
 80056fc:	4651      	mov	r1, sl
 80056fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005702:	4651      	mov	r1, sl
 8005704:	00ca      	lsls	r2, r1, #3
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	4603      	mov	r3, r0
 800570c:	4642      	mov	r2, r8
 800570e:	189b      	adds	r3, r3, r2
 8005710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005714:	464b      	mov	r3, r9
 8005716:	460a      	mov	r2, r1
 8005718:	eb42 0303 	adc.w	r3, r2, r3
 800571c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800572c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005734:	460b      	mov	r3, r1
 8005736:	18db      	adds	r3, r3, r3
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573a:	4613      	mov	r3, r2
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800574a:	f7fb fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <UART_SetConfig+0x2d4>)
 8005754:	fba3 1302 	umull	r1, r3, r3, r2
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	2164      	movs	r1, #100	@ 0x64
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	3332      	adds	r3, #50	@ 0x32
 8005766:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <UART_SetConfig+0x2d4>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f003 0207 	and.w	r2, r3, #7
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4422      	add	r2, r4
 800577a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800577c:	e106      	b.n	800598c <UART_SetConfig+0x4d8>
 800577e:	bf00      	nop
 8005780:	40011000 	.word	0x40011000
 8005784:	40011400 	.word	0x40011400
 8005788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800578c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005796:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800579a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800579e:	4642      	mov	r2, r8
 80057a0:	464b      	mov	r3, r9
 80057a2:	1891      	adds	r1, r2, r2
 80057a4:	6239      	str	r1, [r7, #32]
 80057a6:	415b      	adcs	r3, r3
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ae:	4641      	mov	r1, r8
 80057b0:	1854      	adds	r4, r2, r1
 80057b2:	4649      	mov	r1, r9
 80057b4:	eb43 0501 	adc.w	r5, r3, r1
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	00eb      	lsls	r3, r5, #3
 80057c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057c6:	00e2      	lsls	r2, r4, #3
 80057c8:	4614      	mov	r4, r2
 80057ca:	461d      	mov	r5, r3
 80057cc:	4643      	mov	r3, r8
 80057ce:	18e3      	adds	r3, r4, r3
 80057d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057d4:	464b      	mov	r3, r9
 80057d6:	eb45 0303 	adc.w	r3, r5, r3
 80057da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057fa:	4629      	mov	r1, r5
 80057fc:	008b      	lsls	r3, r1, #2
 80057fe:	4621      	mov	r1, r4
 8005800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005804:	4621      	mov	r1, r4
 8005806:	008a      	lsls	r2, r1, #2
 8005808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800580c:	f7fb fa3c 	bl	8000c88 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4b60      	ldr	r3, [pc, #384]	@ (8005998 <UART_SetConfig+0x4e4>)
 8005816:	fba3 2302 	umull	r2, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	011c      	lsls	r4, r3, #4
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005828:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800582c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005830:	4642      	mov	r2, r8
 8005832:	464b      	mov	r3, r9
 8005834:	1891      	adds	r1, r2, r2
 8005836:	61b9      	str	r1, [r7, #24]
 8005838:	415b      	adcs	r3, r3
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005840:	4641      	mov	r1, r8
 8005842:	1851      	adds	r1, r2, r1
 8005844:	6139      	str	r1, [r7, #16]
 8005846:	4649      	mov	r1, r9
 8005848:	414b      	adcs	r3, r1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005858:	4659      	mov	r1, fp
 800585a:	00cb      	lsls	r3, r1, #3
 800585c:	4651      	mov	r1, sl
 800585e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005862:	4651      	mov	r1, sl
 8005864:	00ca      	lsls	r2, r1, #3
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	4603      	mov	r3, r0
 800586c:	4642      	mov	r2, r8
 800586e:	189b      	adds	r3, r3, r2
 8005870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005874:	464b      	mov	r3, r9
 8005876:	460a      	mov	r2, r1
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800588a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005898:	4649      	mov	r1, r9
 800589a:	008b      	lsls	r3, r1, #2
 800589c:	4641      	mov	r1, r8
 800589e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a2:	4641      	mov	r1, r8
 80058a4:	008a      	lsls	r2, r1, #2
 80058a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058aa:	f7fb f9ed 	bl	8000c88 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	4b38      	ldr	r3, [pc, #224]	@ (8005998 <UART_SetConfig+0x4e4>)
 80058b6:	fba3 2301 	umull	r2, r3, r3, r1
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2264      	movs	r2, #100	@ 0x64
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	1acb      	subs	r3, r1, r3
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	3332      	adds	r3, #50	@ 0x32
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <UART_SetConfig+0x4e4>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058d4:	441c      	add	r4, r3
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058da:	2200      	movs	r2, #0
 80058dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80058de:	677a      	str	r2, [r7, #116]	@ 0x74
 80058e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	415b      	adcs	r3, r3
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f4:	4641      	mov	r1, r8
 80058f6:	1851      	adds	r1, r2, r1
 80058f8:	6039      	str	r1, [r7, #0]
 80058fa:	4649      	mov	r1, r9
 80058fc:	414b      	adcs	r3, r1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800590c:	4659      	mov	r1, fp
 800590e:	00cb      	lsls	r3, r1, #3
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005916:	4651      	mov	r1, sl
 8005918:	00ca      	lsls	r2, r1, #3
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	4603      	mov	r3, r0
 8005920:	4642      	mov	r2, r8
 8005922:	189b      	adds	r3, r3, r2
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005926:	464b      	mov	r3, r9
 8005928:	460a      	mov	r2, r1
 800592a:	eb42 0303 	adc.w	r3, r2, r3
 800592e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	663b      	str	r3, [r7, #96]	@ 0x60
 800593a:	667a      	str	r2, [r7, #100]	@ 0x64
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005948:	4649      	mov	r1, r9
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	4641      	mov	r1, r8
 800594e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005952:	4641      	mov	r1, r8
 8005954:	008a      	lsls	r2, r1, #2
 8005956:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800595a:	f7fb f995 	bl	8000c88 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <UART_SetConfig+0x4e4>)
 8005964:	fba3 1302 	umull	r1, r3, r3, r2
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	2164      	movs	r1, #100	@ 0x64
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	3332      	adds	r3, #50	@ 0x32
 8005976:	4a08      	ldr	r2, [pc, #32]	@ (8005998 <UART_SetConfig+0x4e4>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4422      	add	r2, r4
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005992:	46bd      	mov	sp, r7
 8005994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005998:	51eb851f 	.word	0x51eb851f

0800599c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800599c:	b084      	sub	sp, #16
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	f107 001c 	add.w	r0, r7, #28
 80059aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d122      	bne.n	80059fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa9c 	bl	8005f2c <USB_CoreReset>
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	e01a      	b.n	8005a30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa90 	bl	8005f2c <USB_CoreReset>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a22:	e005      	b.n	8005a30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10b      	bne.n	8005a4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f043 0206 	orr.w	r2, r3, #6
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a5a:	b004      	add	sp, #16
 8005a5c:	4770      	bx	lr

08005a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d115      	bne.n	8005ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f7fc fbf8 	bl	80022a4 <HAL_Delay>
      ms++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa28 	bl	8005f10 <USB_GetMode>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d01e      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b31      	cmp	r3, #49	@ 0x31
 8005aca:	d9f0      	bls.n	8005aae <USB_SetCurrentMode+0x2e>
 8005acc:	e01a      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d115      	bne.n	8005b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7fc fbdf 	bl	80022a4 <HAL_Delay>
      ms++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa0f 	bl	8005f10 <USB_GetMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <USB_SetCurrentMode+0x84>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b31      	cmp	r3, #49	@ 0x31
 8005afc:	d9f0      	bls.n	8005ae0 <USB_SetCurrentMode+0x60>
 8005afe:	e001      	b.n	8005b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e005      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b32      	cmp	r3, #50	@ 0x32
 8005b08:	d101      	bne.n	8005b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e009      	b.n	8005b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3340      	adds	r3, #64	@ 0x40
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0e      	cmp	r3, #14
 8005b50:	d9f2      	bls.n	8005b38 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11c      	bne.n	8005b92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b66:	f043 0302 	orr.w	r3, r3, #2
 8005b6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e005      	b.n	8005b9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb8:	461a      	mov	r2, r3
 8005bba:	680b      	ldr	r3, [r1, #0]
 8005bbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10c      	bne.n	8005bde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f965 	bl	8005e9c <USB_SetDevSpeed>
 8005bd2:	e008      	b.n	8005be6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f960 	bl	8005e9c <USB_SetDevSpeed>
 8005bdc:	e003      	b.n	8005be6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bde:	2103      	movs	r1, #3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f95b 	bl	8005e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be6:	2110      	movs	r1, #16
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8f3 	bl	8005dd4 <USB_FlushTxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f91f 	bl	8005e3c <USB_FlushRxFifo>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e043      	b.n	8005cba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c48:	d118      	bne.n	8005c7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e013      	b.n	8005c8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e008      	b.n	8005c8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cac:	461a      	mov	r2, r3
 8005cae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3b7      	bcc.n	8005c32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e043      	b.n	8005d50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cde:	d118      	bne.n	8005d12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e013      	b.n	8005d24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e008      	b.n	8005d24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d3b7      	bcc.n	8005cc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f043 0210 	orr.w	r2, r3, #16
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd0 <USB_DevInit+0x2b8>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dcc:	b004      	add	sp, #16
 8005dce:	4770      	bx	lr
 8005dd0:	803c3800 	.word	0x803c3800

08005dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a13      	ldr	r2, [pc, #76]	@ (8005e38 <USB_FlushTxFifo+0x64>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e01b      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	daf2      	bge.n	8005de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	019b      	lsls	r3, r3, #6
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a08      	ldr	r2, [pc, #32]	@ (8005e38 <USB_FlushTxFifo+0x64>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d0f0      	beq.n	8005e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	00030d40 	.word	0x00030d40

08005e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a11      	ldr	r2, [pc, #68]	@ (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e018      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	daf2      	bge.n	8005e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d0f0      	beq.n	8005e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a13      	ldr	r2, [pc, #76]	@ (8005f90 <USB_CoreReset+0x64>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e01b      	b.n	8005f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	daf2      	bge.n	8005f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f043 0201 	orr.w	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <USB_CoreReset+0x64>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e006      	b.n	8005f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d0f0      	beq.n	8005f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	00030d40 	.word	0x00030d40

08005f94 <__cvt>:
 8005f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	ec57 6b10 	vmov	r6, r7, d0
 8005f9c:	2f00      	cmp	r7, #0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005faa:	461f      	movlt	r7, r3
 8005fac:	2300      	movge	r3, #0
 8005fae:	232d      	movlt	r3, #45	@ 0x2d
 8005fb0:	700b      	strb	r3, [r1, #0]
 8005fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fb8:	4691      	mov	r9, r2
 8005fba:	f023 0820 	bic.w	r8, r3, #32
 8005fbe:	bfbc      	itt	lt
 8005fc0:	4632      	movlt	r2, r6
 8005fc2:	4616      	movlt	r6, r2
 8005fc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fc8:	d005      	beq.n	8005fd6 <__cvt+0x42>
 8005fca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fce:	d100      	bne.n	8005fd2 <__cvt+0x3e>
 8005fd0:	3401      	adds	r4, #1
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	e000      	b.n	8005fd8 <__cvt+0x44>
 8005fd6:	2103      	movs	r1, #3
 8005fd8:	ab03      	add	r3, sp, #12
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	ab02      	add	r3, sp, #8
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	ec47 6b10 	vmov	d0, r6, r7
 8005fe4:	4653      	mov	r3, sl
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	f000 fe6e 	bl	8006cc8 <_dtoa_r>
 8005fec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	d119      	bne.n	8006028 <__cvt+0x94>
 8005ff4:	f019 0f01 	tst.w	r9, #1
 8005ff8:	d00e      	beq.n	8006018 <__cvt+0x84>
 8005ffa:	eb00 0904 	add.w	r9, r0, r4
 8005ffe:	2200      	movs	r2, #0
 8006000:	2300      	movs	r3, #0
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	f7fa fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800600a:	b108      	cbz	r0, 8006010 <__cvt+0x7c>
 800600c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006010:	2230      	movs	r2, #48	@ 0x30
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	454b      	cmp	r3, r9
 8006016:	d31e      	bcc.n	8006056 <__cvt+0xc2>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800601c:	1b5b      	subs	r3, r3, r5
 800601e:	4628      	mov	r0, r5
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	b004      	add	sp, #16
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800602c:	eb00 0904 	add.w	r9, r0, r4
 8006030:	d1e5      	bne.n	8005ffe <__cvt+0x6a>
 8006032:	7803      	ldrb	r3, [r0, #0]
 8006034:	2b30      	cmp	r3, #48	@ 0x30
 8006036:	d10a      	bne.n	800604e <__cvt+0xba>
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fd62 	bl	8000b08 <__aeabi_dcmpeq>
 8006044:	b918      	cbnz	r0, 800604e <__cvt+0xba>
 8006046:	f1c4 0401 	rsb	r4, r4, #1
 800604a:	f8ca 4000 	str.w	r4, [sl]
 800604e:	f8da 3000 	ldr.w	r3, [sl]
 8006052:	4499      	add	r9, r3
 8006054:	e7d3      	b.n	8005ffe <__cvt+0x6a>
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	9103      	str	r1, [sp, #12]
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e7d9      	b.n	8006012 <__cvt+0x7e>

0800605e <__exponent>:
 800605e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006060:	2900      	cmp	r1, #0
 8006062:	bfba      	itte	lt
 8006064:	4249      	neglt	r1, r1
 8006066:	232d      	movlt	r3, #45	@ 0x2d
 8006068:	232b      	movge	r3, #43	@ 0x2b
 800606a:	2909      	cmp	r1, #9
 800606c:	7002      	strb	r2, [r0, #0]
 800606e:	7043      	strb	r3, [r0, #1]
 8006070:	dd29      	ble.n	80060c6 <__exponent+0x68>
 8006072:	f10d 0307 	add.w	r3, sp, #7
 8006076:	461d      	mov	r5, r3
 8006078:	270a      	movs	r7, #10
 800607a:	461a      	mov	r2, r3
 800607c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006080:	fb07 1416 	mls	r4, r7, r6, r1
 8006084:	3430      	adds	r4, #48	@ 0x30
 8006086:	f802 4c01 	strb.w	r4, [r2, #-1]
 800608a:	460c      	mov	r4, r1
 800608c:	2c63      	cmp	r4, #99	@ 0x63
 800608e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006092:	4631      	mov	r1, r6
 8006094:	dcf1      	bgt.n	800607a <__exponent+0x1c>
 8006096:	3130      	adds	r1, #48	@ 0x30
 8006098:	1e94      	subs	r4, r2, #2
 800609a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800609e:	1c41      	adds	r1, r0, #1
 80060a0:	4623      	mov	r3, r4
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	d30a      	bcc.n	80060bc <__exponent+0x5e>
 80060a6:	f10d 0309 	add.w	r3, sp, #9
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ac      	cmp	r4, r5
 80060ae:	bf88      	it	hi
 80060b0:	2300      	movhi	r3, #0
 80060b2:	3302      	adds	r3, #2
 80060b4:	4403      	add	r3, r0
 80060b6:	1a18      	subs	r0, r3, r0
 80060b8:	b003      	add	sp, #12
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060c4:	e7ed      	b.n	80060a2 <__exponent+0x44>
 80060c6:	2330      	movs	r3, #48	@ 0x30
 80060c8:	3130      	adds	r1, #48	@ 0x30
 80060ca:	7083      	strb	r3, [r0, #2]
 80060cc:	70c1      	strb	r1, [r0, #3]
 80060ce:	1d03      	adds	r3, r0, #4
 80060d0:	e7f1      	b.n	80060b6 <__exponent+0x58>
	...

080060d4 <_printf_float>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b08d      	sub	sp, #52	@ 0x34
 80060da:	460c      	mov	r4, r1
 80060dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060e0:	4616      	mov	r6, r2
 80060e2:	461f      	mov	r7, r3
 80060e4:	4605      	mov	r5, r0
 80060e6:	f000 fcef 	bl	8006ac8 <_localeconv_r>
 80060ea:	6803      	ldr	r3, [r0, #0]
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fa f8de 	bl	80002b0 <strlen>
 80060f4:	2300      	movs	r3, #0
 80060f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f8:	f8d8 3000 	ldr.w	r3, [r8]
 80060fc:	9005      	str	r0, [sp, #20]
 80060fe:	3307      	adds	r3, #7
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	f103 0208 	add.w	r2, r3, #8
 8006108:	f894 a018 	ldrb.w	sl, [r4, #24]
 800610c:	f8d4 b000 	ldr.w	fp, [r4]
 8006110:	f8c8 2000 	str.w	r2, [r8]
 8006114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006118:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800611c:	9307      	str	r3, [sp, #28]
 800611e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006122:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800612a:	4b9c      	ldr	r3, [pc, #624]	@ (800639c <_printf_float+0x2c8>)
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	f7fa fd1c 	bl	8000b6c <__aeabi_dcmpun>
 8006134:	bb70      	cbnz	r0, 8006194 <_printf_float+0xc0>
 8006136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800613a:	4b98      	ldr	r3, [pc, #608]	@ (800639c <_printf_float+0x2c8>)
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	f7fa fcf6 	bl	8000b30 <__aeabi_dcmple>
 8006144:	bb30      	cbnz	r0, 8006194 <_printf_float+0xc0>
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa fce5 	bl	8000b1c <__aeabi_dcmplt>
 8006152:	b110      	cbz	r0, 800615a <_printf_float+0x86>
 8006154:	232d      	movs	r3, #45	@ 0x2d
 8006156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615a:	4a91      	ldr	r2, [pc, #580]	@ (80063a0 <_printf_float+0x2cc>)
 800615c:	4b91      	ldr	r3, [pc, #580]	@ (80063a4 <_printf_float+0x2d0>)
 800615e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006162:	bf94      	ite	ls
 8006164:	4690      	movls	r8, r2
 8006166:	4698      	movhi	r8, r3
 8006168:	2303      	movs	r3, #3
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	f02b 0304 	bic.w	r3, fp, #4
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	f04f 0900 	mov.w	r9, #0
 8006176:	9700      	str	r7, [sp, #0]
 8006178:	4633      	mov	r3, r6
 800617a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f000 f9d2 	bl	8006528 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	f040 808d 	bne.w	80062a4 <_printf_float+0x1d0>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	b00d      	add	sp, #52	@ 0x34
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa fce6 	bl	8000b6c <__aeabi_dcmpun>
 80061a0:	b140      	cbz	r0, 80061b4 <_printf_float+0xe0>
 80061a2:	464b      	mov	r3, r9
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbc      	itt	lt
 80061a8:	232d      	movlt	r3, #45	@ 0x2d
 80061aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061ae:	4a7e      	ldr	r2, [pc, #504]	@ (80063a8 <_printf_float+0x2d4>)
 80061b0:	4b7e      	ldr	r3, [pc, #504]	@ (80063ac <_printf_float+0x2d8>)
 80061b2:	e7d4      	b.n	800615e <_printf_float+0x8a>
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061ba:	9206      	str	r2, [sp, #24]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	d13b      	bne.n	8006238 <_printf_float+0x164>
 80061c0:	2306      	movs	r3, #6
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061c8:	2300      	movs	r3, #0
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80061d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061d4:	ab09      	add	r3, sp, #36	@ 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	ec49 8b10 	vmov	d0, r8, r9
 80061de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7ff fed6 	bl	8005f94 <__cvt>
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061ec:	2b47      	cmp	r3, #71	@ 0x47
 80061ee:	4680      	mov	r8, r0
 80061f0:	d129      	bne.n	8006246 <_printf_float+0x172>
 80061f2:	1cc8      	adds	r0, r1, #3
 80061f4:	db02      	blt.n	80061fc <_printf_float+0x128>
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	4299      	cmp	r1, r3
 80061fa:	dd41      	ble.n	8006280 <_printf_float+0x1ac>
 80061fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006200:	fa5f fa8a 	uxtb.w	sl, sl
 8006204:	3901      	subs	r1, #1
 8006206:	4652      	mov	r2, sl
 8006208:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800620c:	9109      	str	r1, [sp, #36]	@ 0x24
 800620e:	f7ff ff26 	bl	800605e <__exponent>
 8006212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006214:	1813      	adds	r3, r2, r0
 8006216:	2a01      	cmp	r2, #1
 8006218:	4681      	mov	r9, r0
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	dc02      	bgt.n	8006224 <_printf_float+0x150>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	07d2      	lsls	r2, r2, #31
 8006222:	d501      	bpl.n	8006228 <_printf_float+0x154>
 8006224:	3301      	adds	r3, #1
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0a2      	beq.n	8006176 <_printf_float+0xa2>
 8006230:	232d      	movs	r3, #45	@ 0x2d
 8006232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006236:	e79e      	b.n	8006176 <_printf_float+0xa2>
 8006238:	9a06      	ldr	r2, [sp, #24]
 800623a:	2a47      	cmp	r2, #71	@ 0x47
 800623c:	d1c2      	bne.n	80061c4 <_printf_float+0xf0>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c0      	bne.n	80061c4 <_printf_float+0xf0>
 8006242:	2301      	movs	r3, #1
 8006244:	e7bd      	b.n	80061c2 <_printf_float+0xee>
 8006246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800624a:	d9db      	bls.n	8006204 <_printf_float+0x130>
 800624c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006250:	d118      	bne.n	8006284 <_printf_float+0x1b0>
 8006252:	2900      	cmp	r1, #0
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	dd0b      	ble.n	8006270 <_printf_float+0x19c>
 8006258:	6121      	str	r1, [r4, #16]
 800625a:	b913      	cbnz	r3, 8006262 <_printf_float+0x18e>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	07d0      	lsls	r0, r2, #31
 8006260:	d502      	bpl.n	8006268 <_printf_float+0x194>
 8006262:	3301      	adds	r3, #1
 8006264:	440b      	add	r3, r1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	65a1      	str	r1, [r4, #88]	@ 0x58
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	e7db      	b.n	8006228 <_printf_float+0x154>
 8006270:	b913      	cbnz	r3, 8006278 <_printf_float+0x1a4>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	07d2      	lsls	r2, r2, #31
 8006276:	d501      	bpl.n	800627c <_printf_float+0x1a8>
 8006278:	3302      	adds	r3, #2
 800627a:	e7f4      	b.n	8006266 <_printf_float+0x192>
 800627c:	2301      	movs	r3, #1
 800627e:	e7f2      	b.n	8006266 <_printf_float+0x192>
 8006280:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006286:	4299      	cmp	r1, r3
 8006288:	db05      	blt.n	8006296 <_printf_float+0x1c2>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6121      	str	r1, [r4, #16]
 800628e:	07d8      	lsls	r0, r3, #31
 8006290:	d5ea      	bpl.n	8006268 <_printf_float+0x194>
 8006292:	1c4b      	adds	r3, r1, #1
 8006294:	e7e7      	b.n	8006266 <_printf_float+0x192>
 8006296:	2900      	cmp	r1, #0
 8006298:	bfd4      	ite	le
 800629a:	f1c1 0202 	rsble	r2, r1, #2
 800629e:	2201      	movgt	r2, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	e7e0      	b.n	8006266 <_printf_float+0x192>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	055a      	lsls	r2, r3, #21
 80062a8:	d407      	bmi.n	80062ba <_printf_float+0x1e6>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	4642      	mov	r2, r8
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	d12b      	bne.n	8006310 <_printf_float+0x23c>
 80062b8:	e767      	b.n	800618a <_printf_float+0xb6>
 80062ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062be:	f240 80dd 	bls.w	800647c <_printf_float+0x3a8>
 80062c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062c6:	2200      	movs	r2, #0
 80062c8:	2300      	movs	r3, #0
 80062ca:	f7fa fc1d 	bl	8000b08 <__aeabi_dcmpeq>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d033      	beq.n	800633a <_printf_float+0x266>
 80062d2:	4a37      	ldr	r2, [pc, #220]	@ (80063b0 <_printf_float+0x2dc>)
 80062d4:	2301      	movs	r3, #1
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	f43f af54 	beq.w	800618a <_printf_float+0xb6>
 80062e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062e6:	4543      	cmp	r3, r8
 80062e8:	db02      	blt.n	80062f0 <_printf_float+0x21c>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07d8      	lsls	r0, r3, #31
 80062ee:	d50f      	bpl.n	8006310 <_printf_float+0x23c>
 80062f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af45 	beq.w	800618a <_printf_float+0xb6>
 8006300:	f04f 0900 	mov.w	r9, #0
 8006304:	f108 38ff 	add.w	r8, r8, #4294967295
 8006308:	f104 0a1a 	add.w	sl, r4, #26
 800630c:	45c8      	cmp	r8, r9
 800630e:	dc09      	bgt.n	8006324 <_printf_float+0x250>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	f100 8103 	bmi.w	800651e <_printf_float+0x44a>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e734      	b.n	800618e <_printf_float+0xba>
 8006324:	2301      	movs	r3, #1
 8006326:	4652      	mov	r2, sl
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	47b8      	blx	r7
 800632e:	3001      	adds	r0, #1
 8006330:	f43f af2b 	beq.w	800618a <_printf_float+0xb6>
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	e7e8      	b.n	800630c <_printf_float+0x238>
 800633a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	dc39      	bgt.n	80063b4 <_printf_float+0x2e0>
 8006340:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <_printf_float+0x2dc>)
 8006342:	2301      	movs	r3, #1
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af1d 	beq.w	800618a <_printf_float+0xb6>
 8006350:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006354:	ea59 0303 	orrs.w	r3, r9, r3
 8006358:	d102      	bne.n	8006360 <_printf_float+0x28c>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	07d9      	lsls	r1, r3, #31
 800635e:	d5d7      	bpl.n	8006310 <_printf_float+0x23c>
 8006360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f af0d 	beq.w	800618a <_printf_float+0xb6>
 8006370:	f04f 0a00 	mov.w	sl, #0
 8006374:	f104 0b1a 	add.w	fp, r4, #26
 8006378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637a:	425b      	negs	r3, r3
 800637c:	4553      	cmp	r3, sl
 800637e:	dc01      	bgt.n	8006384 <_printf_float+0x2b0>
 8006380:	464b      	mov	r3, r9
 8006382:	e793      	b.n	80062ac <_printf_float+0x1d8>
 8006384:	2301      	movs	r3, #1
 8006386:	465a      	mov	r2, fp
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f aefb 	beq.w	800618a <_printf_float+0xb6>
 8006394:	f10a 0a01 	add.w	sl, sl, #1
 8006398:	e7ee      	b.n	8006378 <_printf_float+0x2a4>
 800639a:	bf00      	nop
 800639c:	7fefffff 	.word	0x7fefffff
 80063a0:	08009458 	.word	0x08009458
 80063a4:	0800945c 	.word	0x0800945c
 80063a8:	08009460 	.word	0x08009460
 80063ac:	08009464 	.word	0x08009464
 80063b0:	08009468 	.word	0x08009468
 80063b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063ba:	4553      	cmp	r3, sl
 80063bc:	bfa8      	it	ge
 80063be:	4653      	movge	r3, sl
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	4699      	mov	r9, r3
 80063c4:	dc36      	bgt.n	8006434 <_printf_float+0x360>
 80063c6:	f04f 0b00 	mov.w	fp, #0
 80063ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ce:	f104 021a 	add.w	r2, r4, #26
 80063d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063d4:	9306      	str	r3, [sp, #24]
 80063d6:	eba3 0309 	sub.w	r3, r3, r9
 80063da:	455b      	cmp	r3, fp
 80063dc:	dc31      	bgt.n	8006442 <_printf_float+0x36e>
 80063de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e0:	459a      	cmp	sl, r3
 80063e2:	dc3a      	bgt.n	800645a <_printf_float+0x386>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	07da      	lsls	r2, r3, #31
 80063e8:	d437      	bmi.n	800645a <_printf_float+0x386>
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	ebaa 0903 	sub.w	r9, sl, r3
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	ebaa 0303 	sub.w	r3, sl, r3
 80063f6:	4599      	cmp	r9, r3
 80063f8:	bfa8      	it	ge
 80063fa:	4699      	movge	r9, r3
 80063fc:	f1b9 0f00 	cmp.w	r9, #0
 8006400:	dc33      	bgt.n	800646a <_printf_float+0x396>
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640a:	f104 0b1a 	add.w	fp, r4, #26
 800640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006410:	ebaa 0303 	sub.w	r3, sl, r3
 8006414:	eba3 0309 	sub.w	r3, r3, r9
 8006418:	4543      	cmp	r3, r8
 800641a:	f77f af79 	ble.w	8006310 <_printf_float+0x23c>
 800641e:	2301      	movs	r3, #1
 8006420:	465a      	mov	r2, fp
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f aeae 	beq.w	800618a <_printf_float+0xb6>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	e7ec      	b.n	800640e <_printf_float+0x33a>
 8006434:	4642      	mov	r2, r8
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	d1c2      	bne.n	80063c6 <_printf_float+0x2f2>
 8006440:	e6a3      	b.n	800618a <_printf_float+0xb6>
 8006442:	2301      	movs	r3, #1
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	9206      	str	r2, [sp, #24]
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae9c 	beq.w	800618a <_printf_float+0xb6>
 8006452:	9a06      	ldr	r2, [sp, #24]
 8006454:	f10b 0b01 	add.w	fp, fp, #1
 8006458:	e7bb      	b.n	80063d2 <_printf_float+0x2fe>
 800645a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	d1c0      	bne.n	80063ea <_printf_float+0x316>
 8006468:	e68f      	b.n	800618a <_printf_float+0xb6>
 800646a:	9a06      	ldr	r2, [sp, #24]
 800646c:	464b      	mov	r3, r9
 800646e:	4442      	add	r2, r8
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	d1c3      	bne.n	8006402 <_printf_float+0x32e>
 800647a:	e686      	b.n	800618a <_printf_float+0xb6>
 800647c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006480:	f1ba 0f01 	cmp.w	sl, #1
 8006484:	dc01      	bgt.n	800648a <_printf_float+0x3b6>
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d536      	bpl.n	80064f8 <_printf_float+0x424>
 800648a:	2301      	movs	r3, #1
 800648c:	4642      	mov	r2, r8
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f ae78 	beq.w	800618a <_printf_float+0xb6>
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae70 	beq.w	800618a <_printf_float+0xb6>
 80064aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064b6:	f7fa fb27 	bl	8000b08 <__aeabi_dcmpeq>
 80064ba:	b9c0      	cbnz	r0, 80064ee <_printf_float+0x41a>
 80064bc:	4653      	mov	r3, sl
 80064be:	f108 0201 	add.w	r2, r8, #1
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	d10c      	bne.n	80064e6 <_printf_float+0x412>
 80064cc:	e65d      	b.n	800618a <_printf_float+0xb6>
 80064ce:	2301      	movs	r3, #1
 80064d0:	465a      	mov	r2, fp
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f ae56 	beq.w	800618a <_printf_float+0xb6>
 80064de:	f108 0801 	add.w	r8, r8, #1
 80064e2:	45d0      	cmp	r8, sl
 80064e4:	dbf3      	blt.n	80064ce <_printf_float+0x3fa>
 80064e6:	464b      	mov	r3, r9
 80064e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064ec:	e6df      	b.n	80062ae <_printf_float+0x1da>
 80064ee:	f04f 0800 	mov.w	r8, #0
 80064f2:	f104 0b1a 	add.w	fp, r4, #26
 80064f6:	e7f4      	b.n	80064e2 <_printf_float+0x40e>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4642      	mov	r2, r8
 80064fc:	e7e1      	b.n	80064c2 <_printf_float+0x3ee>
 80064fe:	2301      	movs	r3, #1
 8006500:	464a      	mov	r2, r9
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae3e 	beq.w	800618a <_printf_float+0xb6>
 800650e:	f108 0801 	add.w	r8, r8, #1
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	4543      	cmp	r3, r8
 800651a:	dcf0      	bgt.n	80064fe <_printf_float+0x42a>
 800651c:	e6fc      	b.n	8006318 <_printf_float+0x244>
 800651e:	f04f 0800 	mov.w	r8, #0
 8006522:	f104 0919 	add.w	r9, r4, #25
 8006526:	e7f4      	b.n	8006512 <_printf_float+0x43e>

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4698      	mov	r8, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006544:	4607      	mov	r7, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc26      	bgt.n	80065be <_printf_common+0x96>
 8006570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	3b00      	subs	r3, #0
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42b      	bmi.n	80065d8 <_printf_common+0xb0>
 8006580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d01e      	beq.n	80065cc <_printf_common+0xa4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf02      	ittt	eq
 800659a:	68e5      	ldreq	r5, [r4, #12]
 800659c:	6833      	ldreq	r3, [r6, #0]
 800659e:	1aed      	subeq	r5, r5, r3
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	bf0c      	ite	eq
 80065a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a8:	2500      	movne	r5, #0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bfc4      	itt	gt
 80065ae:	1a9b      	subgt	r3, r3, r2
 80065b0:	18ed      	addgt	r5, r5, r3
 80065b2:	2600      	movs	r6, #0
 80065b4:	341a      	adds	r4, #26
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d11a      	bne.n	80065f0 <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e008      	b.n	80065d0 <_printf_common+0xa8>
 80065be:	2301      	movs	r3, #1
 80065c0:	4652      	mov	r2, sl
 80065c2:	4641      	mov	r1, r8
 80065c4:	4638      	mov	r0, r7
 80065c6:	47c8      	blx	r9
 80065c8:	3001      	adds	r0, #1
 80065ca:	d103      	bne.n	80065d4 <_printf_common+0xac>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7c6      	b.n	8006566 <_printf_common+0x3e>
 80065d8:	18e1      	adds	r1, r4, r3
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	2030      	movs	r0, #48	@ 0x30
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065e2:	4422      	add	r2, r4
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065ec:	3302      	adds	r3, #2
 80065ee:	e7c7      	b.n	8006580 <_printf_common+0x58>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4622      	mov	r2, r4
 80065f4:	4641      	mov	r1, r8
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c8      	blx	r9
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0e6      	beq.n	80065cc <_printf_common+0xa4>
 80065fe:	3601      	adds	r6, #1
 8006600:	e7d9      	b.n	80065b6 <_printf_common+0x8e>
	...

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660c:	2f78      	cmp	r7, #120	@ 0x78
 800660e:	4691      	mov	r9, r2
 8006610:	4680      	mov	r8, r0
 8006612:	460c      	mov	r4, r1
 8006614:	469a      	mov	sl, r3
 8006616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	@ 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d2 	beq.w	80067ca <_printf_i+0x1c6>
 8006626:	2f58      	cmp	r7, #88	@ 0x58
 8006628:	f000 80b9 	beq.w	800679e <_printf_i+0x19a>
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	@ (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067b1 	.word	0x080067b1
 8006674:	080066db 	.word	0x080066db
 8006678:	0800676b 	.word	0x0800676b
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067d3 	.word	0x080067d3
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066db 	.word	0x080066db
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	08006773 	.word	0x08006773
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6032      	str	r2, [r6, #0]
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e09d      	b.n	80067ec <_printf_i+0x1e8>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xbc>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	e003      	b.n	80066c8 <_printf_i+0xc4>
 80066c0:	0645      	lsls	r5, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xb8>
 80066c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xd0>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	426d      	negs	r5, r5
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d4:	4859      	ldr	r0, [pc, #356]	@ (800683c <_printf_i+0x238>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e011      	b.n	80066fe <_printf_i+0xfa>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	0608      	lsls	r0, r1, #24
 80066e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0xe8>
 80066e6:	0649      	lsls	r1, r1, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ee:	4853      	ldr	r0, [pc, #332]	@ (800683c <_printf_i+0x238>)
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	bf14      	ite	ne
 80066f4:	230a      	movne	r3, #10
 80066f6:	2308      	moveq	r3, #8
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fe:	6866      	ldr	r6, [r4, #4]
 8006700:	60a6      	str	r6, [r4, #8]
 8006702:	2e00      	cmp	r6, #0
 8006704:	bfa2      	ittt	ge
 8006706:	6821      	ldrge	r1, [r4, #0]
 8006708:	f021 0104 	bicge.w	r1, r1, #4
 800670c:	6021      	strge	r1, [r4, #0]
 800670e:	b90d      	cbnz	r5, 8006714 <_printf_i+0x110>
 8006710:	2e00      	cmp	r6, #0
 8006712:	d04b      	beq.n	80067ac <_printf_i+0x1a8>
 8006714:	4616      	mov	r6, r2
 8006716:	fbb5 f1f3 	udiv	r1, r5, r3
 800671a:	fb03 5711 	mls	r7, r3, r1, r5
 800671e:	5dc7      	ldrb	r7, [r0, r7]
 8006720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006724:	462f      	mov	r7, r5
 8006726:	42bb      	cmp	r3, r7
 8006728:	460d      	mov	r5, r1
 800672a:	d9f4      	bls.n	8006716 <_printf_i+0x112>
 800672c:	2b08      	cmp	r3, #8
 800672e:	d10b      	bne.n	8006748 <_printf_i+0x144>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07df      	lsls	r7, r3, #31
 8006734:	d508      	bpl.n	8006748 <_printf_i+0x144>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6861      	ldr	r1, [r4, #4]
 800673a:	4299      	cmp	r1, r3
 800673c:	bfde      	ittt	le
 800673e:	2330      	movle	r3, #48	@ 0x30
 8006740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006748:	1b92      	subs	r2, r2, r6
 800674a:	6122      	str	r2, [r4, #16]
 800674c:	f8cd a000 	str.w	sl, [sp]
 8006750:	464b      	mov	r3, r9
 8006752:	aa03      	add	r2, sp, #12
 8006754:	4621      	mov	r1, r4
 8006756:	4640      	mov	r0, r8
 8006758:	f7ff fee6 	bl	8006528 <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	d14a      	bne.n	80067f6 <_printf_i+0x1f2>
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	b004      	add	sp, #16
 8006766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f043 0320 	orr.w	r3, r3, #32
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	4833      	ldr	r0, [pc, #204]	@ (8006840 <_printf_i+0x23c>)
 8006774:	2778      	movs	r7, #120	@ 0x78
 8006776:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	6831      	ldr	r1, [r6, #0]
 800677e:	061f      	lsls	r7, r3, #24
 8006780:	f851 5b04 	ldr.w	r5, [r1], #4
 8006784:	d402      	bmi.n	800678c <_printf_i+0x188>
 8006786:	065f      	lsls	r7, r3, #25
 8006788:	bf48      	it	mi
 800678a:	b2ad      	uxthmi	r5, r5
 800678c:	6031      	str	r1, [r6, #0]
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	bf44      	itt	mi
 8006792:	f043 0320 	orrmi.w	r3, r3, #32
 8006796:	6023      	strmi	r3, [r4, #0]
 8006798:	b11d      	cbz	r5, 80067a2 <_printf_i+0x19e>
 800679a:	2310      	movs	r3, #16
 800679c:	e7ac      	b.n	80066f8 <_printf_i+0xf4>
 800679e:	4827      	ldr	r0, [pc, #156]	@ (800683c <_printf_i+0x238>)
 80067a0:	e7e9      	b.n	8006776 <_printf_i+0x172>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f023 0320 	bic.w	r3, r3, #32
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	e7f6      	b.n	800679a <_printf_i+0x196>
 80067ac:	4616      	mov	r6, r2
 80067ae:	e7bd      	b.n	800672c <_printf_i+0x128>
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	6825      	ldr	r5, [r4, #0]
 80067b4:	6961      	ldr	r1, [r4, #20]
 80067b6:	1d18      	adds	r0, r3, #4
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	062e      	lsls	r6, r5, #24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	d501      	bpl.n	80067c4 <_printf_i+0x1c0>
 80067c0:	6019      	str	r1, [r3, #0]
 80067c2:	e002      	b.n	80067ca <_printf_i+0x1c6>
 80067c4:	0668      	lsls	r0, r5, #25
 80067c6:	d5fb      	bpl.n	80067c0 <_printf_i+0x1bc>
 80067c8:	8019      	strh	r1, [r3, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	4616      	mov	r6, r2
 80067d0:	e7bc      	b.n	800674c <_printf_i+0x148>
 80067d2:	6833      	ldr	r3, [r6, #0]
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	6032      	str	r2, [r6, #0]
 80067d8:	681e      	ldr	r6, [r3, #0]
 80067da:	6862      	ldr	r2, [r4, #4]
 80067dc:	2100      	movs	r1, #0
 80067de:	4630      	mov	r0, r6
 80067e0:	f7f9 fd16 	bl	8000210 <memchr>
 80067e4:	b108      	cbz	r0, 80067ea <_printf_i+0x1e6>
 80067e6:	1b80      	subs	r0, r0, r6
 80067e8:	6060      	str	r0, [r4, #4]
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	6123      	str	r3, [r4, #16]
 80067ee:	2300      	movs	r3, #0
 80067f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f4:	e7aa      	b.n	800674c <_printf_i+0x148>
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	4632      	mov	r2, r6
 80067fa:	4649      	mov	r1, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	47d0      	blx	sl
 8006800:	3001      	adds	r0, #1
 8006802:	d0ad      	beq.n	8006760 <_printf_i+0x15c>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	079b      	lsls	r3, r3, #30
 8006808:	d413      	bmi.n	8006832 <_printf_i+0x22e>
 800680a:	68e0      	ldr	r0, [r4, #12]
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	4298      	cmp	r0, r3
 8006810:	bfb8      	it	lt
 8006812:	4618      	movlt	r0, r3
 8006814:	e7a6      	b.n	8006764 <_printf_i+0x160>
 8006816:	2301      	movs	r3, #1
 8006818:	4632      	mov	r2, r6
 800681a:	4649      	mov	r1, r9
 800681c:	4640      	mov	r0, r8
 800681e:	47d0      	blx	sl
 8006820:	3001      	adds	r0, #1
 8006822:	d09d      	beq.n	8006760 <_printf_i+0x15c>
 8006824:	3501      	adds	r5, #1
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	9903      	ldr	r1, [sp, #12]
 800682a:	1a5b      	subs	r3, r3, r1
 800682c:	42ab      	cmp	r3, r5
 800682e:	dcf2      	bgt.n	8006816 <_printf_i+0x212>
 8006830:	e7eb      	b.n	800680a <_printf_i+0x206>
 8006832:	2500      	movs	r5, #0
 8006834:	f104 0619 	add.w	r6, r4, #25
 8006838:	e7f5      	b.n	8006826 <_printf_i+0x222>
 800683a:	bf00      	nop
 800683c:	0800946a 	.word	0x0800946a
 8006840:	0800947b 	.word	0x0800947b

08006844 <std>:
 8006844:	2300      	movs	r3, #0
 8006846:	b510      	push	{r4, lr}
 8006848:	4604      	mov	r4, r0
 800684a:	e9c0 3300 	strd	r3, r3, [r0]
 800684e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006852:	6083      	str	r3, [r0, #8]
 8006854:	8181      	strh	r1, [r0, #12]
 8006856:	6643      	str	r3, [r0, #100]	@ 0x64
 8006858:	81c2      	strh	r2, [r0, #14]
 800685a:	6183      	str	r3, [r0, #24]
 800685c:	4619      	mov	r1, r3
 800685e:	2208      	movs	r2, #8
 8006860:	305c      	adds	r0, #92	@ 0x5c
 8006862:	f000 f928 	bl	8006ab6 <memset>
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <std+0x58>)
 8006868:	6263      	str	r3, [r4, #36]	@ 0x24
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <std+0x5c>)
 800686c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <std+0x60>)
 8006870:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <std+0x64>)
 8006874:	6323      	str	r3, [r4, #48]	@ 0x30
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <std+0x68>)
 8006878:	6224      	str	r4, [r4, #32]
 800687a:	429c      	cmp	r4, r3
 800687c:	d006      	beq.n	800688c <std+0x48>
 800687e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006882:	4294      	cmp	r4, r2
 8006884:	d002      	beq.n	800688c <std+0x48>
 8006886:	33d0      	adds	r3, #208	@ 0xd0
 8006888:	429c      	cmp	r4, r3
 800688a:	d105      	bne.n	8006898 <std+0x54>
 800688c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006894:	f000 b98c 	b.w	8006bb0 <__retarget_lock_init_recursive>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	08006a31 	.word	0x08006a31
 80068a0:	08006a53 	.word	0x08006a53
 80068a4:	08006a8b 	.word	0x08006a8b
 80068a8:	08006aaf 	.word	0x08006aaf
 80068ac:	200092d0 	.word	0x200092d0

080068b0 <stdio_exit_handler>:
 80068b0:	4a02      	ldr	r2, [pc, #8]	@ (80068bc <stdio_exit_handler+0xc>)
 80068b2:	4903      	ldr	r1, [pc, #12]	@ (80068c0 <stdio_exit_handler+0x10>)
 80068b4:	4803      	ldr	r0, [pc, #12]	@ (80068c4 <stdio_exit_handler+0x14>)
 80068b6:	f000 b869 	b.w	800698c <_fwalk_sglue>
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	0800850d 	.word	0x0800850d
 80068c4:	2000001c 	.word	0x2000001c

080068c8 <cleanup_stdio>:
 80068c8:	6841      	ldr	r1, [r0, #4]
 80068ca:	4b0c      	ldr	r3, [pc, #48]	@ (80068fc <cleanup_stdio+0x34>)
 80068cc:	4299      	cmp	r1, r3
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	d001      	beq.n	80068d8 <cleanup_stdio+0x10>
 80068d4:	f001 fe1a 	bl	800850c <_fflush_r>
 80068d8:	68a1      	ldr	r1, [r4, #8]
 80068da:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <cleanup_stdio+0x38>)
 80068dc:	4299      	cmp	r1, r3
 80068de:	d002      	beq.n	80068e6 <cleanup_stdio+0x1e>
 80068e0:	4620      	mov	r0, r4
 80068e2:	f001 fe13 	bl	800850c <_fflush_r>
 80068e6:	68e1      	ldr	r1, [r4, #12]
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <cleanup_stdio+0x3c>)
 80068ea:	4299      	cmp	r1, r3
 80068ec:	d004      	beq.n	80068f8 <cleanup_stdio+0x30>
 80068ee:	4620      	mov	r0, r4
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	f001 be0a 	b.w	800850c <_fflush_r>
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	200092d0 	.word	0x200092d0
 8006900:	20009338 	.word	0x20009338
 8006904:	200093a0 	.word	0x200093a0

08006908 <global_stdio_init.part.0>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <global_stdio_init.part.0+0x30>)
 800690c:	4c0b      	ldr	r4, [pc, #44]	@ (800693c <global_stdio_init.part.0+0x34>)
 800690e:	4a0c      	ldr	r2, [pc, #48]	@ (8006940 <global_stdio_init.part.0+0x38>)
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	4620      	mov	r0, r4
 8006914:	2200      	movs	r2, #0
 8006916:	2104      	movs	r1, #4
 8006918:	f7ff ff94 	bl	8006844 <std>
 800691c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006920:	2201      	movs	r2, #1
 8006922:	2109      	movs	r1, #9
 8006924:	f7ff ff8e 	bl	8006844 <std>
 8006928:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800692c:	2202      	movs	r2, #2
 800692e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006932:	2112      	movs	r1, #18
 8006934:	f7ff bf86 	b.w	8006844 <std>
 8006938:	20009408 	.word	0x20009408
 800693c:	200092d0 	.word	0x200092d0
 8006940:	080068b1 	.word	0x080068b1

08006944 <__sfp_lock_acquire>:
 8006944:	4801      	ldr	r0, [pc, #4]	@ (800694c <__sfp_lock_acquire+0x8>)
 8006946:	f000 b934 	b.w	8006bb2 <__retarget_lock_acquire_recursive>
 800694a:	bf00      	nop
 800694c:	20009411 	.word	0x20009411

08006950 <__sfp_lock_release>:
 8006950:	4801      	ldr	r0, [pc, #4]	@ (8006958 <__sfp_lock_release+0x8>)
 8006952:	f000 b92f 	b.w	8006bb4 <__retarget_lock_release_recursive>
 8006956:	bf00      	nop
 8006958:	20009411 	.word	0x20009411

0800695c <__sinit>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4604      	mov	r4, r0
 8006960:	f7ff fff0 	bl	8006944 <__sfp_lock_acquire>
 8006964:	6a23      	ldr	r3, [r4, #32]
 8006966:	b11b      	cbz	r3, 8006970 <__sinit+0x14>
 8006968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800696c:	f7ff bff0 	b.w	8006950 <__sfp_lock_release>
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <__sinit+0x28>)
 8006972:	6223      	str	r3, [r4, #32]
 8006974:	4b04      	ldr	r3, [pc, #16]	@ (8006988 <__sinit+0x2c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f5      	bne.n	8006968 <__sinit+0xc>
 800697c:	f7ff ffc4 	bl	8006908 <global_stdio_init.part.0>
 8006980:	e7f2      	b.n	8006968 <__sinit+0xc>
 8006982:	bf00      	nop
 8006984:	080068c9 	.word	0x080068c9
 8006988:	20009408 	.word	0x20009408

0800698c <_fwalk_sglue>:
 800698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006990:	4607      	mov	r7, r0
 8006992:	4688      	mov	r8, r1
 8006994:	4614      	mov	r4, r2
 8006996:	2600      	movs	r6, #0
 8006998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800699c:	f1b9 0901 	subs.w	r9, r9, #1
 80069a0:	d505      	bpl.n	80069ae <_fwalk_sglue+0x22>
 80069a2:	6824      	ldr	r4, [r4, #0]
 80069a4:	2c00      	cmp	r4, #0
 80069a6:	d1f7      	bne.n	8006998 <_fwalk_sglue+0xc>
 80069a8:	4630      	mov	r0, r6
 80069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d907      	bls.n	80069c4 <_fwalk_sglue+0x38>
 80069b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b8:	3301      	adds	r3, #1
 80069ba:	d003      	beq.n	80069c4 <_fwalk_sglue+0x38>
 80069bc:	4629      	mov	r1, r5
 80069be:	4638      	mov	r0, r7
 80069c0:	47c0      	blx	r8
 80069c2:	4306      	orrs	r6, r0
 80069c4:	3568      	adds	r5, #104	@ 0x68
 80069c6:	e7e9      	b.n	800699c <_fwalk_sglue+0x10>

080069c8 <sniprintf>:
 80069c8:	b40c      	push	{r2, r3}
 80069ca:	b530      	push	{r4, r5, lr}
 80069cc:	4b17      	ldr	r3, [pc, #92]	@ (8006a2c <sniprintf+0x64>)
 80069ce:	1e0c      	subs	r4, r1, #0
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	b09d      	sub	sp, #116	@ 0x74
 80069d4:	da08      	bge.n	80069e8 <sniprintf+0x20>
 80069d6:	238b      	movs	r3, #139	@ 0x8b
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	b01d      	add	sp, #116	@ 0x74
 80069e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069e4:	b002      	add	sp, #8
 80069e6:	4770      	bx	lr
 80069e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069f0:	bf14      	ite	ne
 80069f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069f6:	4623      	moveq	r3, r4
 80069f8:	9304      	str	r3, [sp, #16]
 80069fa:	9307      	str	r3, [sp, #28]
 80069fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a00:	9002      	str	r0, [sp, #8]
 8006a02:	9006      	str	r0, [sp, #24]
 8006a04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a0a:	ab21      	add	r3, sp, #132	@ 0x84
 8006a0c:	a902      	add	r1, sp, #8
 8006a0e:	4628      	mov	r0, r5
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	f001 fbfb 	bl	800820c <_svfiprintf_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	bfbc      	itt	lt
 8006a1a:	238b      	movlt	r3, #139	@ 0x8b
 8006a1c:	602b      	strlt	r3, [r5, #0]
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	d0dd      	beq.n	80069de <sniprintf+0x16>
 8006a22:	9b02      	ldr	r3, [sp, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e7d9      	b.n	80069de <sniprintf+0x16>
 8006a2a:	bf00      	nop
 8006a2c:	20000018 	.word	0x20000018

08006a30 <__sread>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f86c 	bl	8006b14 <_read_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	bfab      	itete	ge
 8006a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a42:	89a3      	ldrhlt	r3, [r4, #12]
 8006a44:	181b      	addge	r3, r3, r0
 8006a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a4a:	bfac      	ite	ge
 8006a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a4e:	81a3      	strhlt	r3, [r4, #12]
 8006a50:	bd10      	pop	{r4, pc}

08006a52 <__swrite>:
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	461f      	mov	r7, r3
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	05db      	lsls	r3, r3, #23
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4616      	mov	r6, r2
 8006a62:	d505      	bpl.n	8006a70 <__swrite+0x1e>
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f000 f840 	bl	8006af0 <_lseek_r>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	f000 b857 	b.w	8006b38 <_write_r>

08006a8a <__sseek>:
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 f82d 	bl	8006af0 <_lseek_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	bf15      	itete	ne
 8006a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aa6:	81a3      	strheq	r3, [r4, #12]
 8006aa8:	bf18      	it	ne
 8006aaa:	81a3      	strhne	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__sclose>:
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 b80d 	b.w	8006ad0 <_close_r>

08006ab6 <memset>:
 8006ab6:	4402      	add	r2, r0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <memset+0xa>
 8006abe:	4770      	bx	lr
 8006ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac4:	e7f9      	b.n	8006aba <memset+0x4>
	...

08006ac8 <_localeconv_r>:
 8006ac8:	4800      	ldr	r0, [pc, #0]	@ (8006acc <_localeconv_r+0x4>)
 8006aca:	4770      	bx	lr
 8006acc:	20000158 	.word	0x20000158

08006ad0 <_close_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	@ (8006aec <_close_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fb faca 	bl	8002074 <_close>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_close_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_close_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	2000940c 	.word	0x2000940c

08006af0 <_lseek_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d07      	ldr	r5, [pc, #28]	@ (8006b10 <_lseek_r+0x20>)
 8006af4:	4604      	mov	r4, r0
 8006af6:	4608      	mov	r0, r1
 8006af8:	4611      	mov	r1, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	602a      	str	r2, [r5, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f7fb fadf 	bl	80020c2 <_lseek>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_lseek_r+0x1e>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_lseek_r+0x1e>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	2000940c 	.word	0x2000940c

08006b14 <_read_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	@ (8006b34 <_read_r+0x20>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f7fb fa6d 	bl	8002002 <_read>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_read_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_read_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	2000940c 	.word	0x2000940c

08006b38 <_write_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	@ (8006b58 <_write_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fb fa78 	bl	800203c <_write>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_write_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_write_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	2000940c 	.word	0x2000940c

08006b5c <__errno>:
 8006b5c:	4b01      	ldr	r3, [pc, #4]	@ (8006b64 <__errno+0x8>)
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000018 	.word	0x20000018

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2600      	movs	r6, #0
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4d0b      	ldr	r5, [pc, #44]	@ (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006bac <__libc_init_array+0x44>)
 8006b7c:	f002 fbf6 	bl	800936c <_init>
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2600      	movs	r6, #0
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	080097d0 	.word	0x080097d0
 8006ba4:	080097d0 	.word	0x080097d0
 8006ba8:	080097d0 	.word	0x080097d0
 8006bac:	080097d4 	.word	0x080097d4

08006bb0 <__retarget_lock_init_recursive>:
 8006bb0:	4770      	bx	lr

08006bb2 <__retarget_lock_acquire_recursive>:
 8006bb2:	4770      	bx	lr

08006bb4 <__retarget_lock_release_recursive>:
 8006bb4:	4770      	bx	lr

08006bb6 <quorem>:
 8006bb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	6903      	ldr	r3, [r0, #16]
 8006bbc:	690c      	ldr	r4, [r1, #16]
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	db7e      	blt.n	8006cc2 <quorem+0x10c>
 8006bc4:	3c01      	subs	r4, #1
 8006bc6:	f101 0814 	add.w	r8, r1, #20
 8006bca:	00a3      	lsls	r3, r4, #2
 8006bcc:	f100 0514 	add.w	r5, r0, #20
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006be0:	3301      	adds	r3, #1
 8006be2:	429a      	cmp	r2, r3
 8006be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bec:	d32e      	bcc.n	8006c4c <quorem+0x96>
 8006bee:	f04f 0a00 	mov.w	sl, #0
 8006bf2:	46c4      	mov	ip, r8
 8006bf4:	46ae      	mov	lr, r5
 8006bf6:	46d3      	mov	fp, sl
 8006bf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bfc:	b298      	uxth	r0, r3
 8006bfe:	fb06 a000 	mla	r0, r6, r0, sl
 8006c02:	0c02      	lsrs	r2, r0, #16
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	fb06 2303 	mla	r3, r6, r3, r2
 8006c0a:	f8de 2000 	ldr.w	r2, [lr]
 8006c0e:	b280      	uxth	r0, r0
 8006c10:	b292      	uxth	r2, r2
 8006c12:	1a12      	subs	r2, r2, r0
 8006c14:	445a      	add	r2, fp
 8006c16:	f8de 0000 	ldr.w	r0, [lr]
 8006c1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c28:	b292      	uxth	r2, r2
 8006c2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c2e:	45e1      	cmp	r9, ip
 8006c30:	f84e 2b04 	str.w	r2, [lr], #4
 8006c34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c38:	d2de      	bcs.n	8006bf8 <quorem+0x42>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	58eb      	ldr	r3, [r5, r3]
 8006c3e:	b92b      	cbnz	r3, 8006c4c <quorem+0x96>
 8006c40:	9b01      	ldr	r3, [sp, #4]
 8006c42:	3b04      	subs	r3, #4
 8006c44:	429d      	cmp	r5, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	d32f      	bcc.n	8006caa <quorem+0xf4>
 8006c4a:	613c      	str	r4, [r7, #16]
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f001 f979 	bl	8007f44 <__mcmp>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	db25      	blt.n	8006ca2 <quorem+0xec>
 8006c56:	4629      	mov	r1, r5
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c5e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c62:	fa1f fe82 	uxth.w	lr, r2
 8006c66:	fa1f f38c 	uxth.w	r3, ip
 8006c6a:	eba3 030e 	sub.w	r3, r3, lr
 8006c6e:	4403      	add	r3, r0
 8006c70:	0c12      	lsrs	r2, r2, #16
 8006c72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c80:	45c1      	cmp	r9, r8
 8006c82:	f841 3b04 	str.w	r3, [r1], #4
 8006c86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c8a:	d2e6      	bcs.n	8006c5a <quorem+0xa4>
 8006c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c94:	b922      	cbnz	r2, 8006ca0 <quorem+0xea>
 8006c96:	3b04      	subs	r3, #4
 8006c98:	429d      	cmp	r5, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	d30b      	bcc.n	8006cb6 <quorem+0x100>
 8006c9e:	613c      	str	r4, [r7, #16]
 8006ca0:	3601      	adds	r6, #1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	b003      	add	sp, #12
 8006ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	d1cb      	bne.n	8006c4a <quorem+0x94>
 8006cb2:	3c01      	subs	r4, #1
 8006cb4:	e7c6      	b.n	8006c44 <quorem+0x8e>
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	3b04      	subs	r3, #4
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	d1ef      	bne.n	8006c9e <quorem+0xe8>
 8006cbe:	3c01      	subs	r4, #1
 8006cc0:	e7ea      	b.n	8006c98 <quorem+0xe2>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e7ee      	b.n	8006ca4 <quorem+0xee>
	...

08006cc8 <_dtoa_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	69c7      	ldr	r7, [r0, #28]
 8006cce:	b099      	sub	sp, #100	@ 0x64
 8006cd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cd4:	ec55 4b10 	vmov	r4, r5, d0
 8006cd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cda:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cdc:	4683      	mov	fp, r0
 8006cde:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ce0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ce2:	b97f      	cbnz	r7, 8006d04 <_dtoa_r+0x3c>
 8006ce4:	2010      	movs	r0, #16
 8006ce6:	f000 fdfd 	bl	80078e4 <malloc>
 8006cea:	4602      	mov	r2, r0
 8006cec:	f8cb 001c 	str.w	r0, [fp, #28]
 8006cf0:	b920      	cbnz	r0, 8006cfc <_dtoa_r+0x34>
 8006cf2:	4ba7      	ldr	r3, [pc, #668]	@ (8006f90 <_dtoa_r+0x2c8>)
 8006cf4:	21ef      	movs	r1, #239	@ 0xef
 8006cf6:	48a7      	ldr	r0, [pc, #668]	@ (8006f94 <_dtoa_r+0x2cc>)
 8006cf8:	f001 fc68 	bl	80085cc <__assert_func>
 8006cfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d00:	6007      	str	r7, [r0, #0]
 8006d02:	60c7      	str	r7, [r0, #12]
 8006d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	b159      	cbz	r1, 8006d24 <_dtoa_r+0x5c>
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	604a      	str	r2, [r1, #4]
 8006d10:	2301      	movs	r3, #1
 8006d12:	4093      	lsls	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
 8006d16:	4658      	mov	r0, fp
 8006d18:	f000 feda 	bl	8007ad0 <_Bfree>
 8006d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	1e2b      	subs	r3, r5, #0
 8006d26:	bfb9      	ittee	lt
 8006d28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d2c:	9303      	strlt	r3, [sp, #12]
 8006d2e:	2300      	movge	r3, #0
 8006d30:	6033      	strge	r3, [r6, #0]
 8006d32:	9f03      	ldr	r7, [sp, #12]
 8006d34:	4b98      	ldr	r3, [pc, #608]	@ (8006f98 <_dtoa_r+0x2d0>)
 8006d36:	bfbc      	itt	lt
 8006d38:	2201      	movlt	r2, #1
 8006d3a:	6032      	strlt	r2, [r6, #0]
 8006d3c:	43bb      	bics	r3, r7
 8006d3e:	d112      	bne.n	8006d66 <_dtoa_r+0x9e>
 8006d40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d4c:	4323      	orrs	r3, r4
 8006d4e:	f000 854d 	beq.w	80077ec <_dtoa_r+0xb24>
 8006d52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fac <_dtoa_r+0x2e4>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 854f 	beq.w	80077fc <_dtoa_r+0xb34>
 8006d5e:	f10a 0303 	add.w	r3, sl, #3
 8006d62:	f000 bd49 	b.w	80077f8 <_dtoa_r+0xb30>
 8006d66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	ec51 0b17 	vmov	r0, r1, d7
 8006d70:	2300      	movs	r3, #0
 8006d72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d76:	f7f9 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	b158      	cbz	r0, 8006d96 <_dtoa_r+0xce>
 8006d7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d80:	2301      	movs	r3, #1
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d86:	b113      	cbz	r3, 8006d8e <_dtoa_r+0xc6>
 8006d88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d8a:	4b84      	ldr	r3, [pc, #528]	@ (8006f9c <_dtoa_r+0x2d4>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fb0 <_dtoa_r+0x2e8>
 8006d92:	f000 bd33 	b.w	80077fc <_dtoa_r+0xb34>
 8006d96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d9a:	aa16      	add	r2, sp, #88	@ 0x58
 8006d9c:	a917      	add	r1, sp, #92	@ 0x5c
 8006d9e:	4658      	mov	r0, fp
 8006da0:	f001 f980 	bl	80080a4 <__d2b>
 8006da4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006da8:	4681      	mov	r9, r0
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	d077      	beq.n	8006e9e <_dtoa_r+0x1d6>
 8006dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006db0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006dc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006dc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006dc8:	4619      	mov	r1, r3
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4b74      	ldr	r3, [pc, #464]	@ (8006fa0 <_dtoa_r+0x2d8>)
 8006dce:	f7f9 fa7b 	bl	80002c8 <__aeabi_dsub>
 8006dd2:	a369      	add	r3, pc, #420	@ (adr r3, 8006f78 <_dtoa_r+0x2b0>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f7f9 fc2e 	bl	8000638 <__aeabi_dmul>
 8006ddc:	a368      	add	r3, pc, #416	@ (adr r3, 8006f80 <_dtoa_r+0x2b8>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fa73 	bl	80002cc <__adddf3>
 8006de6:	4604      	mov	r4, r0
 8006de8:	4630      	mov	r0, r6
 8006dea:	460d      	mov	r5, r1
 8006dec:	f7f9 fbba 	bl	8000564 <__aeabi_i2d>
 8006df0:	a365      	add	r3, pc, #404	@ (adr r3, 8006f88 <_dtoa_r+0x2c0>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fc1f 	bl	8000638 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fa63 	bl	80002cc <__adddf3>
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	f7f9 fec5 	bl	8000b98 <__aeabi_d2iz>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4607      	mov	r7, r0
 8006e12:	2300      	movs	r3, #0
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fe80 	bl	8000b1c <__aeabi_dcmplt>
 8006e1c:	b140      	cbz	r0, 8006e30 <_dtoa_r+0x168>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7f9 fba0 	bl	8000564 <__aeabi_i2d>
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 8006e2c:	b900      	cbnz	r0, 8006e30 <_dtoa_r+0x168>
 8006e2e:	3f01      	subs	r7, #1
 8006e30:	2f16      	cmp	r7, #22
 8006e32:	d851      	bhi.n	8006ed8 <_dtoa_r+0x210>
 8006e34:	4b5b      	ldr	r3, [pc, #364]	@ (8006fa4 <_dtoa_r+0x2dc>)
 8006e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e42:	f7f9 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d048      	beq.n	8006edc <_dtoa_r+0x214>
 8006e4a:	3f01      	subs	r7, #1
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e52:	1b9b      	subs	r3, r3, r6
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	bf44      	itt	mi
 8006e58:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e5c:	2300      	movmi	r3, #0
 8006e5e:	9208      	str	r2, [sp, #32]
 8006e60:	bf54      	ite	pl
 8006e62:	f04f 0800 	movpl.w	r8, #0
 8006e66:	9308      	strmi	r3, [sp, #32]
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	db39      	blt.n	8006ee0 <_dtoa_r+0x218>
 8006e6c:	9b08      	ldr	r3, [sp, #32]
 8006e6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e70:	443b      	add	r3, r7
 8006e72:	9308      	str	r3, [sp, #32]
 8006e74:	2300      	movs	r3, #0
 8006e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	d864      	bhi.n	8006f48 <_dtoa_r+0x280>
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	bfc4      	itt	gt
 8006e82:	3b04      	subgt	r3, #4
 8006e84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e88:	f1a3 0302 	sub.w	r3, r3, #2
 8006e8c:	bfcc      	ite	gt
 8006e8e:	2400      	movgt	r4, #0
 8006e90:	2401      	movle	r4, #1
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d863      	bhi.n	8006f5e <_dtoa_r+0x296>
 8006e96:	e8df f003 	tbb	[pc, r3]
 8006e9a:	372a      	.short	0x372a
 8006e9c:	5535      	.short	0x5535
 8006e9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ea2:	441e      	add	r6, r3
 8006ea4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	bfc1      	itttt	gt
 8006eac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006eb0:	409f      	lslgt	r7, r3
 8006eb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006eb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eba:	bfd6      	itet	le
 8006ebc:	f1c3 0320 	rsble	r3, r3, #32
 8006ec0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ec4:	fa04 f003 	lslle.w	r0, r4, r3
 8006ec8:	f7f9 fb3c 	bl	8000544 <__aeabi_ui2d>
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ed2:	3e01      	subs	r6, #1
 8006ed4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ed6:	e777      	b.n	8006dc8 <_dtoa_r+0x100>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e7b8      	b.n	8006e4e <_dtoa_r+0x186>
 8006edc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ede:	e7b7      	b.n	8006e50 <_dtoa_r+0x188>
 8006ee0:	427b      	negs	r3, r7
 8006ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	eba8 0807 	sub.w	r8, r8, r7
 8006eea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eec:	e7c4      	b.n	8006e78 <_dtoa_r+0x1b0>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc35      	bgt.n	8006f64 <_dtoa_r+0x29c>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	461a      	mov	r2, r3
 8006f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f02:	e00b      	b.n	8006f1c <_dtoa_r+0x254>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e7f3      	b.n	8006ef0 <_dtoa_r+0x228>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	bfb8      	it	lt
 8006f1a:	2301      	movlt	r3, #1
 8006f1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f20:	2100      	movs	r1, #0
 8006f22:	2204      	movs	r2, #4
 8006f24:	f102 0514 	add.w	r5, r2, #20
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	d91f      	bls.n	8006f6c <_dtoa_r+0x2a4>
 8006f2c:	6041      	str	r1, [r0, #4]
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f000 fd8e 	bl	8007a50 <_Balloc>
 8006f34:	4682      	mov	sl, r0
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d13c      	bne.n	8006fb4 <_dtoa_r+0x2ec>
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa8 <_dtoa_r+0x2e0>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f42:	e6d8      	b.n	8006cf6 <_dtoa_r+0x2e>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e7e0      	b.n	8006f0a <_dtoa_r+0x242>
 8006f48:	2401      	movs	r4, #1
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2312      	movs	r3, #18
 8006f5c:	e7d0      	b.n	8006f00 <_dtoa_r+0x238>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f62:	e7f5      	b.n	8006f50 <_dtoa_r+0x288>
 8006f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	9307      	str	r3, [sp, #28]
 8006f6a:	e7d7      	b.n	8006f1c <_dtoa_r+0x254>
 8006f6c:	3101      	adds	r1, #1
 8006f6e:	0052      	lsls	r2, r2, #1
 8006f70:	e7d8      	b.n	8006f24 <_dtoa_r+0x25c>
 8006f72:	bf00      	nop
 8006f74:	f3af 8000 	nop.w
 8006f78:	636f4361 	.word	0x636f4361
 8006f7c:	3fd287a7 	.word	0x3fd287a7
 8006f80:	8b60c8b3 	.word	0x8b60c8b3
 8006f84:	3fc68a28 	.word	0x3fc68a28
 8006f88:	509f79fb 	.word	0x509f79fb
 8006f8c:	3fd34413 	.word	0x3fd34413
 8006f90:	08009499 	.word	0x08009499
 8006f94:	080094b0 	.word	0x080094b0
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	08009469 	.word	0x08009469
 8006fa0:	3ff80000 	.word	0x3ff80000
 8006fa4:	080095a8 	.word	0x080095a8
 8006fa8:	08009508 	.word	0x08009508
 8006fac:	08009495 	.word	0x08009495
 8006fb0:	08009468 	.word	0x08009468
 8006fb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fb8:	6018      	str	r0, [r3, #0]
 8006fba:	9b07      	ldr	r3, [sp, #28]
 8006fbc:	2b0e      	cmp	r3, #14
 8006fbe:	f200 80a4 	bhi.w	800710a <_dtoa_r+0x442>
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	f000 80a1 	beq.w	800710a <_dtoa_r+0x442>
 8006fc8:	2f00      	cmp	r7, #0
 8006fca:	dd33      	ble.n	8007034 <_dtoa_r+0x36c>
 8006fcc:	4bad      	ldr	r3, [pc, #692]	@ (8007284 <_dtoa_r+0x5bc>)
 8006fce:	f007 020f 	and.w	r2, r7, #15
 8006fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd6:	ed93 7b00 	vldr	d7, [r3]
 8006fda:	05f8      	lsls	r0, r7, #23
 8006fdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fe0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fe4:	d516      	bpl.n	8007014 <_dtoa_r+0x34c>
 8006fe6:	4ba8      	ldr	r3, [pc, #672]	@ (8007288 <_dtoa_r+0x5c0>)
 8006fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ff0:	f7f9 fc4c 	bl	800088c <__aeabi_ddiv>
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	f004 040f 	and.w	r4, r4, #15
 8006ffc:	2603      	movs	r6, #3
 8006ffe:	4da2      	ldr	r5, [pc, #648]	@ (8007288 <_dtoa_r+0x5c0>)
 8007000:	b954      	cbnz	r4, 8007018 <_dtoa_r+0x350>
 8007002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700a:	f7f9 fc3f 	bl	800088c <__aeabi_ddiv>
 800700e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007012:	e028      	b.n	8007066 <_dtoa_r+0x39e>
 8007014:	2602      	movs	r6, #2
 8007016:	e7f2      	b.n	8006ffe <_dtoa_r+0x336>
 8007018:	07e1      	lsls	r1, r4, #31
 800701a:	d508      	bpl.n	800702e <_dtoa_r+0x366>
 800701c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007024:	f7f9 fb08 	bl	8000638 <__aeabi_dmul>
 8007028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800702c:	3601      	adds	r6, #1
 800702e:	1064      	asrs	r4, r4, #1
 8007030:	3508      	adds	r5, #8
 8007032:	e7e5      	b.n	8007000 <_dtoa_r+0x338>
 8007034:	f000 80d2 	beq.w	80071dc <_dtoa_r+0x514>
 8007038:	427c      	negs	r4, r7
 800703a:	4b92      	ldr	r3, [pc, #584]	@ (8007284 <_dtoa_r+0x5bc>)
 800703c:	4d92      	ldr	r5, [pc, #584]	@ (8007288 <_dtoa_r+0x5c0>)
 800703e:	f004 020f 	and.w	r2, r4, #15
 8007042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800704e:	f7f9 faf3 	bl	8000638 <__aeabi_dmul>
 8007052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007056:	1124      	asrs	r4, r4, #4
 8007058:	2300      	movs	r3, #0
 800705a:	2602      	movs	r6, #2
 800705c:	2c00      	cmp	r4, #0
 800705e:	f040 80b2 	bne.w	80071c6 <_dtoa_r+0x4fe>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1d3      	bne.n	800700e <_dtoa_r+0x346>
 8007066:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007068:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80b7 	beq.w	80071e0 <_dtoa_r+0x518>
 8007072:	4b86      	ldr	r3, [pc, #536]	@ (800728c <_dtoa_r+0x5c4>)
 8007074:	2200      	movs	r2, #0
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	f7f9 fd4f 	bl	8000b1c <__aeabi_dcmplt>
 800707e:	2800      	cmp	r0, #0
 8007080:	f000 80ae 	beq.w	80071e0 <_dtoa_r+0x518>
 8007084:	9b07      	ldr	r3, [sp, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80aa 	beq.w	80071e0 <_dtoa_r+0x518>
 800708c:	9b00      	ldr	r3, [sp, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	dd37      	ble.n	8007102 <_dtoa_r+0x43a>
 8007092:	1e7b      	subs	r3, r7, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	4b7d      	ldr	r3, [pc, #500]	@ (8007290 <_dtoa_r+0x5c8>)
 800709a:	2200      	movs	r2, #0
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 facb 	bl	8000638 <__aeabi_dmul>
 80070a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a6:	9c00      	ldr	r4, [sp, #0]
 80070a8:	3601      	adds	r6, #1
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7f9 fa5a 	bl	8000564 <__aeabi_i2d>
 80070b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070b4:	f7f9 fac0 	bl	8000638 <__aeabi_dmul>
 80070b8:	4b76      	ldr	r3, [pc, #472]	@ (8007294 <_dtoa_r+0x5cc>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	f7f9 f906 	bl	80002cc <__adddf3>
 80070c0:	4605      	mov	r5, r0
 80070c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070c6:	2c00      	cmp	r4, #0
 80070c8:	f040 808d 	bne.w	80071e6 <_dtoa_r+0x51e>
 80070cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d0:	4b71      	ldr	r3, [pc, #452]	@ (8007298 <_dtoa_r+0x5d0>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7f9 f8f8 	bl	80002c8 <__aeabi_dsub>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070e0:	462a      	mov	r2, r5
 80070e2:	4633      	mov	r3, r6
 80070e4:	f7f9 fd38 	bl	8000b58 <__aeabi_dcmpgt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f040 828b 	bne.w	8007604 <_dtoa_r+0x93c>
 80070ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f2:	462a      	mov	r2, r5
 80070f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070f8:	f7f9 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f040 8128 	bne.w	8007352 <_dtoa_r+0x68a>
 8007102:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800710a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f2c0 815a 	blt.w	80073c6 <_dtoa_r+0x6fe>
 8007112:	2f0e      	cmp	r7, #14
 8007114:	f300 8157 	bgt.w	80073c6 <_dtoa_r+0x6fe>
 8007118:	4b5a      	ldr	r3, [pc, #360]	@ (8007284 <_dtoa_r+0x5bc>)
 800711a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800711e:	ed93 7b00 	vldr	d7, [r3]
 8007122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	ed8d 7b00 	vstr	d7, [sp]
 800712a:	da03      	bge.n	8007134 <_dtoa_r+0x46c>
 800712c:	9b07      	ldr	r3, [sp, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f340 8101 	ble.w	8007336 <_dtoa_r+0x66e>
 8007134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007138:	4656      	mov	r6, sl
 800713a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fba3 	bl	800088c <__aeabi_ddiv>
 8007146:	f7f9 fd27 	bl	8000b98 <__aeabi_d2iz>
 800714a:	4680      	mov	r8, r0
 800714c:	f7f9 fa0a 	bl	8000564 <__aeabi_i2d>
 8007150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007154:	f7f9 fa70 	bl	8000638 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007164:	f7f9 f8b0 	bl	80002c8 <__aeabi_dsub>
 8007168:	f806 4b01 	strb.w	r4, [r6], #1
 800716c:	9d07      	ldr	r5, [sp, #28]
 800716e:	eba6 040a 	sub.w	r4, r6, sl
 8007172:	42a5      	cmp	r5, r4
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	f040 8117 	bne.w	80073aa <_dtoa_r+0x6e2>
 800717c:	f7f9 f8a6 	bl	80002cc <__adddf3>
 8007180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007184:	4604      	mov	r4, r0
 8007186:	460d      	mov	r5, r1
 8007188:	f7f9 fce6 	bl	8000b58 <__aeabi_dcmpgt>
 800718c:	2800      	cmp	r0, #0
 800718e:	f040 80f9 	bne.w	8007384 <_dtoa_r+0x6bc>
 8007192:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 800719e:	b118      	cbz	r0, 80071a8 <_dtoa_r+0x4e0>
 80071a0:	f018 0f01 	tst.w	r8, #1
 80071a4:	f040 80ee 	bne.w	8007384 <_dtoa_r+0x6bc>
 80071a8:	4649      	mov	r1, r9
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 fc90 	bl	8007ad0 <_Bfree>
 80071b0:	2300      	movs	r3, #0
 80071b2:	7033      	strb	r3, [r6, #0]
 80071b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071b6:	3701      	adds	r7, #1
 80071b8:	601f      	str	r7, [r3, #0]
 80071ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 831d 	beq.w	80077fc <_dtoa_r+0xb34>
 80071c2:	601e      	str	r6, [r3, #0]
 80071c4:	e31a      	b.n	80077fc <_dtoa_r+0xb34>
 80071c6:	07e2      	lsls	r2, r4, #31
 80071c8:	d505      	bpl.n	80071d6 <_dtoa_r+0x50e>
 80071ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071ce:	f7f9 fa33 	bl	8000638 <__aeabi_dmul>
 80071d2:	3601      	adds	r6, #1
 80071d4:	2301      	movs	r3, #1
 80071d6:	1064      	asrs	r4, r4, #1
 80071d8:	3508      	adds	r5, #8
 80071da:	e73f      	b.n	800705c <_dtoa_r+0x394>
 80071dc:	2602      	movs	r6, #2
 80071de:	e742      	b.n	8007066 <_dtoa_r+0x39e>
 80071e0:	9c07      	ldr	r4, [sp, #28]
 80071e2:	9704      	str	r7, [sp, #16]
 80071e4:	e761      	b.n	80070aa <_dtoa_r+0x3e2>
 80071e6:	4b27      	ldr	r3, [pc, #156]	@ (8007284 <_dtoa_r+0x5bc>)
 80071e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071f2:	4454      	add	r4, sl
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d053      	beq.n	80072a0 <_dtoa_r+0x5d8>
 80071f8:	4928      	ldr	r1, [pc, #160]	@ (800729c <_dtoa_r+0x5d4>)
 80071fa:	2000      	movs	r0, #0
 80071fc:	f7f9 fb46 	bl	800088c <__aeabi_ddiv>
 8007200:	4633      	mov	r3, r6
 8007202:	462a      	mov	r2, r5
 8007204:	f7f9 f860 	bl	80002c8 <__aeabi_dsub>
 8007208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800720c:	4656      	mov	r6, sl
 800720e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007212:	f7f9 fcc1 	bl	8000b98 <__aeabi_d2iz>
 8007216:	4605      	mov	r5, r0
 8007218:	f7f9 f9a4 	bl	8000564 <__aeabi_i2d>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007224:	f7f9 f850 	bl	80002c8 <__aeabi_dsub>
 8007228:	3530      	adds	r5, #48	@ 0x30
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007232:	f806 5b01 	strb.w	r5, [r6], #1
 8007236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800723a:	f7f9 fc6f 	bl	8000b1c <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	d171      	bne.n	8007326 <_dtoa_r+0x65e>
 8007242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007246:	4911      	ldr	r1, [pc, #68]	@ (800728c <_dtoa_r+0x5c4>)
 8007248:	2000      	movs	r0, #0
 800724a:	f7f9 f83d 	bl	80002c8 <__aeabi_dsub>
 800724e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007252:	f7f9 fc63 	bl	8000b1c <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f040 8095 	bne.w	8007386 <_dtoa_r+0x6be>
 800725c:	42a6      	cmp	r6, r4
 800725e:	f43f af50 	beq.w	8007102 <_dtoa_r+0x43a>
 8007262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <_dtoa_r+0x5c8>)
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <_dtoa_r+0x5c8>)
 8007270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007274:	2200      	movs	r2, #0
 8007276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727a:	f7f9 f9dd 	bl	8000638 <__aeabi_dmul>
 800727e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007282:	e7c4      	b.n	800720e <_dtoa_r+0x546>
 8007284:	080095a8 	.word	0x080095a8
 8007288:	08009580 	.word	0x08009580
 800728c:	3ff00000 	.word	0x3ff00000
 8007290:	40240000 	.word	0x40240000
 8007294:	401c0000 	.word	0x401c0000
 8007298:	40140000 	.word	0x40140000
 800729c:	3fe00000 	.word	0x3fe00000
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7f9 f9c8 	bl	8000638 <__aeabi_dmul>
 80072a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80072ae:	4656      	mov	r6, sl
 80072b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b4:	f7f9 fc70 	bl	8000b98 <__aeabi_d2iz>
 80072b8:	4605      	mov	r5, r0
 80072ba:	f7f9 f953 	bl	8000564 <__aeabi_i2d>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c6:	f7f8 ffff 	bl	80002c8 <__aeabi_dsub>
 80072ca:	3530      	adds	r5, #48	@ 0x30
 80072cc:	f806 5b01 	strb.w	r5, [r6], #1
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	d124      	bne.n	800732a <_dtoa_r+0x662>
 80072e0:	4bac      	ldr	r3, [pc, #688]	@ (8007594 <_dtoa_r+0x8cc>)
 80072e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072e6:	f7f8 fff1 	bl	80002cc <__adddf3>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f2:	f7f9 fc31 	bl	8000b58 <__aeabi_dcmpgt>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d145      	bne.n	8007386 <_dtoa_r+0x6be>
 80072fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072fe:	49a5      	ldr	r1, [pc, #660]	@ (8007594 <_dtoa_r+0x8cc>)
 8007300:	2000      	movs	r0, #0
 8007302:	f7f8 ffe1 	bl	80002c8 <__aeabi_dsub>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730e:	f7f9 fc05 	bl	8000b1c <__aeabi_dcmplt>
 8007312:	2800      	cmp	r0, #0
 8007314:	f43f aef5 	beq.w	8007102 <_dtoa_r+0x43a>
 8007318:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800731a:	1e73      	subs	r3, r6, #1
 800731c:	9315      	str	r3, [sp, #84]	@ 0x54
 800731e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007322:	2b30      	cmp	r3, #48	@ 0x30
 8007324:	d0f8      	beq.n	8007318 <_dtoa_r+0x650>
 8007326:	9f04      	ldr	r7, [sp, #16]
 8007328:	e73e      	b.n	80071a8 <_dtoa_r+0x4e0>
 800732a:	4b9b      	ldr	r3, [pc, #620]	@ (8007598 <_dtoa_r+0x8d0>)
 800732c:	f7f9 f984 	bl	8000638 <__aeabi_dmul>
 8007330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007334:	e7bc      	b.n	80072b0 <_dtoa_r+0x5e8>
 8007336:	d10c      	bne.n	8007352 <_dtoa_r+0x68a>
 8007338:	4b98      	ldr	r3, [pc, #608]	@ (800759c <_dtoa_r+0x8d4>)
 800733a:	2200      	movs	r2, #0
 800733c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007340:	f7f9 f97a 	bl	8000638 <__aeabi_dmul>
 8007344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007348:	f7f9 fbfc 	bl	8000b44 <__aeabi_dcmpge>
 800734c:	2800      	cmp	r0, #0
 800734e:	f000 8157 	beq.w	8007600 <_dtoa_r+0x938>
 8007352:	2400      	movs	r4, #0
 8007354:	4625      	mov	r5, r4
 8007356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007358:	43db      	mvns	r3, r3
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	4656      	mov	r6, sl
 800735e:	2700      	movs	r7, #0
 8007360:	4621      	mov	r1, r4
 8007362:	4658      	mov	r0, fp
 8007364:	f000 fbb4 	bl	8007ad0 <_Bfree>
 8007368:	2d00      	cmp	r5, #0
 800736a:	d0dc      	beq.n	8007326 <_dtoa_r+0x65e>
 800736c:	b12f      	cbz	r7, 800737a <_dtoa_r+0x6b2>
 800736e:	42af      	cmp	r7, r5
 8007370:	d003      	beq.n	800737a <_dtoa_r+0x6b2>
 8007372:	4639      	mov	r1, r7
 8007374:	4658      	mov	r0, fp
 8007376:	f000 fbab 	bl	8007ad0 <_Bfree>
 800737a:	4629      	mov	r1, r5
 800737c:	4658      	mov	r0, fp
 800737e:	f000 fba7 	bl	8007ad0 <_Bfree>
 8007382:	e7d0      	b.n	8007326 <_dtoa_r+0x65e>
 8007384:	9704      	str	r7, [sp, #16]
 8007386:	4633      	mov	r3, r6
 8007388:	461e      	mov	r6, r3
 800738a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800738e:	2a39      	cmp	r2, #57	@ 0x39
 8007390:	d107      	bne.n	80073a2 <_dtoa_r+0x6da>
 8007392:	459a      	cmp	sl, r3
 8007394:	d1f8      	bne.n	8007388 <_dtoa_r+0x6c0>
 8007396:	9a04      	ldr	r2, [sp, #16]
 8007398:	3201      	adds	r2, #1
 800739a:	9204      	str	r2, [sp, #16]
 800739c:	2230      	movs	r2, #48	@ 0x30
 800739e:	f88a 2000 	strb.w	r2, [sl]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	3201      	adds	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e7bd      	b.n	8007326 <_dtoa_r+0x65e>
 80073aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007598 <_dtoa_r+0x8d0>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	f7f9 f943 	bl	8000638 <__aeabi_dmul>
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	460d      	mov	r5, r1
 80073ba:	f7f9 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f aebb 	beq.w	800713a <_dtoa_r+0x472>
 80073c4:	e6f0      	b.n	80071a8 <_dtoa_r+0x4e0>
 80073c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	f000 80db 	beq.w	8007584 <_dtoa_r+0x8bc>
 80073ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073d0:	2a01      	cmp	r2, #1
 80073d2:	f300 80bf 	bgt.w	8007554 <_dtoa_r+0x88c>
 80073d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073d8:	2a00      	cmp	r2, #0
 80073da:	f000 80b7 	beq.w	800754c <_dtoa_r+0x884>
 80073de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073e4:	4646      	mov	r6, r8
 80073e6:	9a08      	ldr	r2, [sp, #32]
 80073e8:	2101      	movs	r1, #1
 80073ea:	441a      	add	r2, r3
 80073ec:	4658      	mov	r0, fp
 80073ee:	4498      	add	r8, r3
 80073f0:	9208      	str	r2, [sp, #32]
 80073f2:	f000 fc21 	bl	8007c38 <__i2b>
 80073f6:	4605      	mov	r5, r0
 80073f8:	b15e      	cbz	r6, 8007412 <_dtoa_r+0x74a>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd08      	ble.n	8007412 <_dtoa_r+0x74a>
 8007400:	42b3      	cmp	r3, r6
 8007402:	9a08      	ldr	r2, [sp, #32]
 8007404:	bfa8      	it	ge
 8007406:	4633      	movge	r3, r6
 8007408:	eba8 0803 	sub.w	r8, r8, r3
 800740c:	1af6      	subs	r6, r6, r3
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	9308      	str	r3, [sp, #32]
 8007412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007414:	b1f3      	cbz	r3, 8007454 <_dtoa_r+0x78c>
 8007416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80b7 	beq.w	800758c <_dtoa_r+0x8c4>
 800741e:	b18c      	cbz	r4, 8007444 <_dtoa_r+0x77c>
 8007420:	4629      	mov	r1, r5
 8007422:	4622      	mov	r2, r4
 8007424:	4658      	mov	r0, fp
 8007426:	f000 fcc7 	bl	8007db8 <__pow5mult>
 800742a:	464a      	mov	r2, r9
 800742c:	4601      	mov	r1, r0
 800742e:	4605      	mov	r5, r0
 8007430:	4658      	mov	r0, fp
 8007432:	f000 fc17 	bl	8007c64 <__multiply>
 8007436:	4649      	mov	r1, r9
 8007438:	9004      	str	r0, [sp, #16]
 800743a:	4658      	mov	r0, fp
 800743c:	f000 fb48 	bl	8007ad0 <_Bfree>
 8007440:	9b04      	ldr	r3, [sp, #16]
 8007442:	4699      	mov	r9, r3
 8007444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007446:	1b1a      	subs	r2, r3, r4
 8007448:	d004      	beq.n	8007454 <_dtoa_r+0x78c>
 800744a:	4649      	mov	r1, r9
 800744c:	4658      	mov	r0, fp
 800744e:	f000 fcb3 	bl	8007db8 <__pow5mult>
 8007452:	4681      	mov	r9, r0
 8007454:	2101      	movs	r1, #1
 8007456:	4658      	mov	r0, fp
 8007458:	f000 fbee 	bl	8007c38 <__i2b>
 800745c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745e:	4604      	mov	r4, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 81cf 	beq.w	8007804 <_dtoa_r+0xb3c>
 8007466:	461a      	mov	r2, r3
 8007468:	4601      	mov	r1, r0
 800746a:	4658      	mov	r0, fp
 800746c:	f000 fca4 	bl	8007db8 <__pow5mult>
 8007470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007472:	2b01      	cmp	r3, #1
 8007474:	4604      	mov	r4, r0
 8007476:	f300 8095 	bgt.w	80075a4 <_dtoa_r+0x8dc>
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 8087 	bne.w	8007590 <_dtoa_r+0x8c8>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007488:	2b00      	cmp	r3, #0
 800748a:	f040 8089 	bne.w	80075a0 <_dtoa_r+0x8d8>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007494:	0d1b      	lsrs	r3, r3, #20
 8007496:	051b      	lsls	r3, r3, #20
 8007498:	b12b      	cbz	r3, 80074a6 <_dtoa_r+0x7de>
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	3301      	adds	r3, #1
 800749e:	9308      	str	r3, [sp, #32]
 80074a0:	f108 0801 	add.w	r8, r8, #1
 80074a4:	2301      	movs	r3, #1
 80074a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 81b0 	beq.w	8007810 <_dtoa_r+0xb48>
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074b6:	6918      	ldr	r0, [r3, #16]
 80074b8:	f000 fb72 	bl	8007ba0 <__hi0bits>
 80074bc:	f1c0 0020 	rsb	r0, r0, #32
 80074c0:	9b08      	ldr	r3, [sp, #32]
 80074c2:	4418      	add	r0, r3
 80074c4:	f010 001f 	ands.w	r0, r0, #31
 80074c8:	d077      	beq.n	80075ba <_dtoa_r+0x8f2>
 80074ca:	f1c0 0320 	rsb	r3, r0, #32
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	dd6b      	ble.n	80075aa <_dtoa_r+0x8e2>
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	f1c0 001c 	rsb	r0, r0, #28
 80074d8:	4403      	add	r3, r0
 80074da:	4480      	add	r8, r0
 80074dc:	4406      	add	r6, r0
 80074de:	9308      	str	r3, [sp, #32]
 80074e0:	f1b8 0f00 	cmp.w	r8, #0
 80074e4:	dd05      	ble.n	80074f2 <_dtoa_r+0x82a>
 80074e6:	4649      	mov	r1, r9
 80074e8:	4642      	mov	r2, r8
 80074ea:	4658      	mov	r0, fp
 80074ec:	f000 fcbe 	bl	8007e6c <__lshift>
 80074f0:	4681      	mov	r9, r0
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dd05      	ble.n	8007504 <_dtoa_r+0x83c>
 80074f8:	4621      	mov	r1, r4
 80074fa:	461a      	mov	r2, r3
 80074fc:	4658      	mov	r0, fp
 80074fe:	f000 fcb5 	bl	8007e6c <__lshift>
 8007502:	4604      	mov	r4, r0
 8007504:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007506:	2b00      	cmp	r3, #0
 8007508:	d059      	beq.n	80075be <_dtoa_r+0x8f6>
 800750a:	4621      	mov	r1, r4
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fd19 	bl	8007f44 <__mcmp>
 8007512:	2800      	cmp	r0, #0
 8007514:	da53      	bge.n	80075be <_dtoa_r+0x8f6>
 8007516:	1e7b      	subs	r3, r7, #1
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	4649      	mov	r1, r9
 800751c:	2300      	movs	r3, #0
 800751e:	220a      	movs	r2, #10
 8007520:	4658      	mov	r0, fp
 8007522:	f000 faf7 	bl	8007b14 <__multadd>
 8007526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007528:	4681      	mov	r9, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8172 	beq.w	8007814 <_dtoa_r+0xb4c>
 8007530:	2300      	movs	r3, #0
 8007532:	4629      	mov	r1, r5
 8007534:	220a      	movs	r2, #10
 8007536:	4658      	mov	r0, fp
 8007538:	f000 faec 	bl	8007b14 <__multadd>
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	4605      	mov	r5, r0
 8007542:	dc67      	bgt.n	8007614 <_dtoa_r+0x94c>
 8007544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007546:	2b02      	cmp	r3, #2
 8007548:	dc41      	bgt.n	80075ce <_dtoa_r+0x906>
 800754a:	e063      	b.n	8007614 <_dtoa_r+0x94c>
 800754c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800754e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007552:	e746      	b.n	80073e2 <_dtoa_r+0x71a>
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	1e5c      	subs	r4, r3, #1
 8007558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755a:	42a3      	cmp	r3, r4
 800755c:	bfbf      	itttt	lt
 800755e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007560:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007562:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007564:	1ae3      	sublt	r3, r4, r3
 8007566:	bfb4      	ite	lt
 8007568:	18d2      	addlt	r2, r2, r3
 800756a:	1b1c      	subge	r4, r3, r4
 800756c:	9b07      	ldr	r3, [sp, #28]
 800756e:	bfbc      	itt	lt
 8007570:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007572:	2400      	movlt	r4, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	bfb5      	itete	lt
 8007578:	eba8 0603 	sublt.w	r6, r8, r3
 800757c:	9b07      	ldrge	r3, [sp, #28]
 800757e:	2300      	movlt	r3, #0
 8007580:	4646      	movge	r6, r8
 8007582:	e730      	b.n	80073e6 <_dtoa_r+0x71e>
 8007584:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007586:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007588:	4646      	mov	r6, r8
 800758a:	e735      	b.n	80073f8 <_dtoa_r+0x730>
 800758c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800758e:	e75c      	b.n	800744a <_dtoa_r+0x782>
 8007590:	2300      	movs	r3, #0
 8007592:	e788      	b.n	80074a6 <_dtoa_r+0x7de>
 8007594:	3fe00000 	.word	0x3fe00000
 8007598:	40240000 	.word	0x40240000
 800759c:	40140000 	.word	0x40140000
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	e780      	b.n	80074a6 <_dtoa_r+0x7de>
 80075a4:	2300      	movs	r3, #0
 80075a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a8:	e782      	b.n	80074b0 <_dtoa_r+0x7e8>
 80075aa:	d099      	beq.n	80074e0 <_dtoa_r+0x818>
 80075ac:	9a08      	ldr	r2, [sp, #32]
 80075ae:	331c      	adds	r3, #28
 80075b0:	441a      	add	r2, r3
 80075b2:	4498      	add	r8, r3
 80075b4:	441e      	add	r6, r3
 80075b6:	9208      	str	r2, [sp, #32]
 80075b8:	e792      	b.n	80074e0 <_dtoa_r+0x818>
 80075ba:	4603      	mov	r3, r0
 80075bc:	e7f6      	b.n	80075ac <_dtoa_r+0x8e4>
 80075be:	9b07      	ldr	r3, [sp, #28]
 80075c0:	9704      	str	r7, [sp, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc20      	bgt.n	8007608 <_dtoa_r+0x940>
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	dd1e      	ble.n	800760c <_dtoa_r+0x944>
 80075ce:	9b00      	ldr	r3, [sp, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f47f aec0 	bne.w	8007356 <_dtoa_r+0x68e>
 80075d6:	4621      	mov	r1, r4
 80075d8:	2205      	movs	r2, #5
 80075da:	4658      	mov	r0, fp
 80075dc:	f000 fa9a 	bl	8007b14 <__multadd>
 80075e0:	4601      	mov	r1, r0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4648      	mov	r0, r9
 80075e6:	f000 fcad 	bl	8007f44 <__mcmp>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f77f aeb3 	ble.w	8007356 <_dtoa_r+0x68e>
 80075f0:	4656      	mov	r6, sl
 80075f2:	2331      	movs	r3, #49	@ 0x31
 80075f4:	f806 3b01 	strb.w	r3, [r6], #1
 80075f8:	9b04      	ldr	r3, [sp, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	e6ae      	b.n	800735e <_dtoa_r+0x696>
 8007600:	9c07      	ldr	r4, [sp, #28]
 8007602:	9704      	str	r7, [sp, #16]
 8007604:	4625      	mov	r5, r4
 8007606:	e7f3      	b.n	80075f0 <_dtoa_r+0x928>
 8007608:	9b07      	ldr	r3, [sp, #28]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8104 	beq.w	800781c <_dtoa_r+0xb54>
 8007614:	2e00      	cmp	r6, #0
 8007616:	dd05      	ble.n	8007624 <_dtoa_r+0x95c>
 8007618:	4629      	mov	r1, r5
 800761a:	4632      	mov	r2, r6
 800761c:	4658      	mov	r0, fp
 800761e:	f000 fc25 	bl	8007e6c <__lshift>
 8007622:	4605      	mov	r5, r0
 8007624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d05a      	beq.n	80076e0 <_dtoa_r+0xa18>
 800762a:	6869      	ldr	r1, [r5, #4]
 800762c:	4658      	mov	r0, fp
 800762e:	f000 fa0f 	bl	8007a50 <_Balloc>
 8007632:	4606      	mov	r6, r0
 8007634:	b928      	cbnz	r0, 8007642 <_dtoa_r+0x97a>
 8007636:	4b84      	ldr	r3, [pc, #528]	@ (8007848 <_dtoa_r+0xb80>)
 8007638:	4602      	mov	r2, r0
 800763a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800763e:	f7ff bb5a 	b.w	8006cf6 <_dtoa_r+0x2e>
 8007642:	692a      	ldr	r2, [r5, #16]
 8007644:	3202      	adds	r2, #2
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	f105 010c 	add.w	r1, r5, #12
 800764c:	300c      	adds	r0, #12
 800764e:	f000 ffaf 	bl	80085b0 <memcpy>
 8007652:	2201      	movs	r2, #1
 8007654:	4631      	mov	r1, r6
 8007656:	4658      	mov	r0, fp
 8007658:	f000 fc08 	bl	8007e6c <__lshift>
 800765c:	f10a 0301 	add.w	r3, sl, #1
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	9b00      	ldr	r3, [sp, #0]
 8007664:	4453      	add	r3, sl
 8007666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007668:	9b02      	ldr	r3, [sp, #8]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	462f      	mov	r7, r5
 8007670:	930a      	str	r3, [sp, #40]	@ 0x28
 8007672:	4605      	mov	r5, r0
 8007674:	9b07      	ldr	r3, [sp, #28]
 8007676:	4621      	mov	r1, r4
 8007678:	3b01      	subs	r3, #1
 800767a:	4648      	mov	r0, r9
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f7ff fa9a 	bl	8006bb6 <quorem>
 8007682:	4639      	mov	r1, r7
 8007684:	9002      	str	r0, [sp, #8]
 8007686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800768a:	4648      	mov	r0, r9
 800768c:	f000 fc5a 	bl	8007f44 <__mcmp>
 8007690:	462a      	mov	r2, r5
 8007692:	9008      	str	r0, [sp, #32]
 8007694:	4621      	mov	r1, r4
 8007696:	4658      	mov	r0, fp
 8007698:	f000 fc70 	bl	8007f7c <__mdiff>
 800769c:	68c2      	ldr	r2, [r0, #12]
 800769e:	4606      	mov	r6, r0
 80076a0:	bb02      	cbnz	r2, 80076e4 <_dtoa_r+0xa1c>
 80076a2:	4601      	mov	r1, r0
 80076a4:	4648      	mov	r0, r9
 80076a6:	f000 fc4d 	bl	8007f44 <__mcmp>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4631      	mov	r1, r6
 80076ae:	4658      	mov	r0, fp
 80076b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076b2:	f000 fa0d 	bl	8007ad0 <_Bfree>
 80076b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ba:	9e07      	ldr	r6, [sp, #28]
 80076bc:	ea43 0102 	orr.w	r1, r3, r2
 80076c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076c2:	4319      	orrs	r1, r3
 80076c4:	d110      	bne.n	80076e8 <_dtoa_r+0xa20>
 80076c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ca:	d029      	beq.n	8007720 <_dtoa_r+0xa58>
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dd02      	ble.n	80076d8 <_dtoa_r+0xa10>
 80076d2:	9b02      	ldr	r3, [sp, #8]
 80076d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076d8:	9b00      	ldr	r3, [sp, #0]
 80076da:	f883 8000 	strb.w	r8, [r3]
 80076de:	e63f      	b.n	8007360 <_dtoa_r+0x698>
 80076e0:	4628      	mov	r0, r5
 80076e2:	e7bb      	b.n	800765c <_dtoa_r+0x994>
 80076e4:	2201      	movs	r2, #1
 80076e6:	e7e1      	b.n	80076ac <_dtoa_r+0x9e4>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	db04      	blt.n	80076f8 <_dtoa_r+0xa30>
 80076ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076f0:	430b      	orrs	r3, r1
 80076f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076f4:	430b      	orrs	r3, r1
 80076f6:	d120      	bne.n	800773a <_dtoa_r+0xa72>
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	dded      	ble.n	80076d8 <_dtoa_r+0xa10>
 80076fc:	4649      	mov	r1, r9
 80076fe:	2201      	movs	r2, #1
 8007700:	4658      	mov	r0, fp
 8007702:	f000 fbb3 	bl	8007e6c <__lshift>
 8007706:	4621      	mov	r1, r4
 8007708:	4681      	mov	r9, r0
 800770a:	f000 fc1b 	bl	8007f44 <__mcmp>
 800770e:	2800      	cmp	r0, #0
 8007710:	dc03      	bgt.n	800771a <_dtoa_r+0xa52>
 8007712:	d1e1      	bne.n	80076d8 <_dtoa_r+0xa10>
 8007714:	f018 0f01 	tst.w	r8, #1
 8007718:	d0de      	beq.n	80076d8 <_dtoa_r+0xa10>
 800771a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800771e:	d1d8      	bne.n	80076d2 <_dtoa_r+0xa0a>
 8007720:	9a00      	ldr	r2, [sp, #0]
 8007722:	2339      	movs	r3, #57	@ 0x39
 8007724:	7013      	strb	r3, [r2, #0]
 8007726:	4633      	mov	r3, r6
 8007728:	461e      	mov	r6, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007730:	2a39      	cmp	r2, #57	@ 0x39
 8007732:	d052      	beq.n	80077da <_dtoa_r+0xb12>
 8007734:	3201      	adds	r2, #1
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e612      	b.n	8007360 <_dtoa_r+0x698>
 800773a:	2a00      	cmp	r2, #0
 800773c:	dd07      	ble.n	800774e <_dtoa_r+0xa86>
 800773e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007742:	d0ed      	beq.n	8007720 <_dtoa_r+0xa58>
 8007744:	9a00      	ldr	r2, [sp, #0]
 8007746:	f108 0301 	add.w	r3, r8, #1
 800774a:	7013      	strb	r3, [r2, #0]
 800774c:	e608      	b.n	8007360 <_dtoa_r+0x698>
 800774e:	9b07      	ldr	r3, [sp, #28]
 8007750:	9a07      	ldr	r2, [sp, #28]
 8007752:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007758:	4293      	cmp	r3, r2
 800775a:	d028      	beq.n	80077ae <_dtoa_r+0xae6>
 800775c:	4649      	mov	r1, r9
 800775e:	2300      	movs	r3, #0
 8007760:	220a      	movs	r2, #10
 8007762:	4658      	mov	r0, fp
 8007764:	f000 f9d6 	bl	8007b14 <__multadd>
 8007768:	42af      	cmp	r7, r5
 800776a:	4681      	mov	r9, r0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	f04f 020a 	mov.w	r2, #10
 8007774:	4639      	mov	r1, r7
 8007776:	4658      	mov	r0, fp
 8007778:	d107      	bne.n	800778a <_dtoa_r+0xac2>
 800777a:	f000 f9cb 	bl	8007b14 <__multadd>
 800777e:	4607      	mov	r7, r0
 8007780:	4605      	mov	r5, r0
 8007782:	9b07      	ldr	r3, [sp, #28]
 8007784:	3301      	adds	r3, #1
 8007786:	9307      	str	r3, [sp, #28]
 8007788:	e774      	b.n	8007674 <_dtoa_r+0x9ac>
 800778a:	f000 f9c3 	bl	8007b14 <__multadd>
 800778e:	4629      	mov	r1, r5
 8007790:	4607      	mov	r7, r0
 8007792:	2300      	movs	r3, #0
 8007794:	220a      	movs	r2, #10
 8007796:	4658      	mov	r0, fp
 8007798:	f000 f9bc 	bl	8007b14 <__multadd>
 800779c:	4605      	mov	r5, r0
 800779e:	e7f0      	b.n	8007782 <_dtoa_r+0xaba>
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfcc      	ite	gt
 80077a6:	461e      	movgt	r6, r3
 80077a8:	2601      	movle	r6, #1
 80077aa:	4456      	add	r6, sl
 80077ac:	2700      	movs	r7, #0
 80077ae:	4649      	mov	r1, r9
 80077b0:	2201      	movs	r2, #1
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fb5a 	bl	8007e6c <__lshift>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4681      	mov	r9, r0
 80077bc:	f000 fbc2 	bl	8007f44 <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	dcb0      	bgt.n	8007726 <_dtoa_r+0xa5e>
 80077c4:	d102      	bne.n	80077cc <_dtoa_r+0xb04>
 80077c6:	f018 0f01 	tst.w	r8, #1
 80077ca:	d1ac      	bne.n	8007726 <_dtoa_r+0xa5e>
 80077cc:	4633      	mov	r3, r6
 80077ce:	461e      	mov	r6, r3
 80077d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d4:	2a30      	cmp	r2, #48	@ 0x30
 80077d6:	d0fa      	beq.n	80077ce <_dtoa_r+0xb06>
 80077d8:	e5c2      	b.n	8007360 <_dtoa_r+0x698>
 80077da:	459a      	cmp	sl, r3
 80077dc:	d1a4      	bne.n	8007728 <_dtoa_r+0xa60>
 80077de:	9b04      	ldr	r3, [sp, #16]
 80077e0:	3301      	adds	r3, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	2331      	movs	r3, #49	@ 0x31
 80077e6:	f88a 3000 	strb.w	r3, [sl]
 80077ea:	e5b9      	b.n	8007360 <_dtoa_r+0x698>
 80077ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800784c <_dtoa_r+0xb84>
 80077f2:	b11b      	cbz	r3, 80077fc <_dtoa_r+0xb34>
 80077f4:	f10a 0308 	add.w	r3, sl, #8
 80077f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	4650      	mov	r0, sl
 80077fe:	b019      	add	sp, #100	@ 0x64
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007806:	2b01      	cmp	r3, #1
 8007808:	f77f ae37 	ble.w	800747a <_dtoa_r+0x7b2>
 800780c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007810:	2001      	movs	r0, #1
 8007812:	e655      	b.n	80074c0 <_dtoa_r+0x7f8>
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f77f aed6 	ble.w	80075c8 <_dtoa_r+0x900>
 800781c:	4656      	mov	r6, sl
 800781e:	4621      	mov	r1, r4
 8007820:	4648      	mov	r0, r9
 8007822:	f7ff f9c8 	bl	8006bb6 <quorem>
 8007826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800782a:	f806 8b01 	strb.w	r8, [r6], #1
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	eba6 020a 	sub.w	r2, r6, sl
 8007834:	4293      	cmp	r3, r2
 8007836:	ddb3      	ble.n	80077a0 <_dtoa_r+0xad8>
 8007838:	4649      	mov	r1, r9
 800783a:	2300      	movs	r3, #0
 800783c:	220a      	movs	r2, #10
 800783e:	4658      	mov	r0, fp
 8007840:	f000 f968 	bl	8007b14 <__multadd>
 8007844:	4681      	mov	r9, r0
 8007846:	e7ea      	b.n	800781e <_dtoa_r+0xb56>
 8007848:	08009508 	.word	0x08009508
 800784c:	0800948c 	.word	0x0800948c

08007850 <_free_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4605      	mov	r5, r0
 8007854:	2900      	cmp	r1, #0
 8007856:	d041      	beq.n	80078dc <_free_r+0x8c>
 8007858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785c:	1f0c      	subs	r4, r1, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfb8      	it	lt
 8007862:	18e4      	addlt	r4, r4, r3
 8007864:	f000 f8e8 	bl	8007a38 <__malloc_lock>
 8007868:	4a1d      	ldr	r2, [pc, #116]	@ (80078e0 <_free_r+0x90>)
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	b933      	cbnz	r3, 800787c <_free_r+0x2c>
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	6014      	str	r4, [r2, #0]
 8007872:	4628      	mov	r0, r5
 8007874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007878:	f000 b8e4 	b.w	8007a44 <__malloc_unlock>
 800787c:	42a3      	cmp	r3, r4
 800787e:	d908      	bls.n	8007892 <_free_r+0x42>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	1821      	adds	r1, r4, r0
 8007884:	428b      	cmp	r3, r1
 8007886:	bf01      	itttt	eq
 8007888:	6819      	ldreq	r1, [r3, #0]
 800788a:	685b      	ldreq	r3, [r3, #4]
 800788c:	1809      	addeq	r1, r1, r0
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	e7ed      	b.n	800786e <_free_r+0x1e>
 8007892:	461a      	mov	r2, r3
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b10b      	cbz	r3, 800789c <_free_r+0x4c>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d9fa      	bls.n	8007892 <_free_r+0x42>
 800789c:	6811      	ldr	r1, [r2, #0]
 800789e:	1850      	adds	r0, r2, r1
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d10b      	bne.n	80078bc <_free_r+0x6c>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	4401      	add	r1, r0
 80078a8:	1850      	adds	r0, r2, r1
 80078aa:	4283      	cmp	r3, r0
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	d1e0      	bne.n	8007872 <_free_r+0x22>
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	6053      	str	r3, [r2, #4]
 80078b6:	4408      	add	r0, r1
 80078b8:	6010      	str	r0, [r2, #0]
 80078ba:	e7da      	b.n	8007872 <_free_r+0x22>
 80078bc:	d902      	bls.n	80078c4 <_free_r+0x74>
 80078be:	230c      	movs	r3, #12
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	e7d6      	b.n	8007872 <_free_r+0x22>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	1821      	adds	r1, r4, r0
 80078c8:	428b      	cmp	r3, r1
 80078ca:	bf04      	itt	eq
 80078cc:	6819      	ldreq	r1, [r3, #0]
 80078ce:	685b      	ldreq	r3, [r3, #4]
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	bf04      	itt	eq
 80078d4:	1809      	addeq	r1, r1, r0
 80078d6:	6021      	streq	r1, [r4, #0]
 80078d8:	6054      	str	r4, [r2, #4]
 80078da:	e7ca      	b.n	8007872 <_free_r+0x22>
 80078dc:	bd38      	pop	{r3, r4, r5, pc}
 80078de:	bf00      	nop
 80078e0:	20009418 	.word	0x20009418

080078e4 <malloc>:
 80078e4:	4b02      	ldr	r3, [pc, #8]	@ (80078f0 <malloc+0xc>)
 80078e6:	4601      	mov	r1, r0
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	f000 b825 	b.w	8007938 <_malloc_r>
 80078ee:	bf00      	nop
 80078f0:	20000018 	.word	0x20000018

080078f4 <sbrk_aligned>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007934 <sbrk_aligned+0x40>)
 80078f8:	460c      	mov	r4, r1
 80078fa:	6831      	ldr	r1, [r6, #0]
 80078fc:	4605      	mov	r5, r0
 80078fe:	b911      	cbnz	r1, 8007906 <sbrk_aligned+0x12>
 8007900:	f000 fe46 	bl	8008590 <_sbrk_r>
 8007904:	6030      	str	r0, [r6, #0]
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fe41 	bl	8008590 <_sbrk_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d103      	bne.n	800791a <sbrk_aligned+0x26>
 8007912:	f04f 34ff 	mov.w	r4, #4294967295
 8007916:	4620      	mov	r0, r4
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	1cc4      	adds	r4, r0, #3
 800791c:	f024 0403 	bic.w	r4, r4, #3
 8007920:	42a0      	cmp	r0, r4
 8007922:	d0f8      	beq.n	8007916 <sbrk_aligned+0x22>
 8007924:	1a21      	subs	r1, r4, r0
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fe32 	bl	8008590 <_sbrk_r>
 800792c:	3001      	adds	r0, #1
 800792e:	d1f2      	bne.n	8007916 <sbrk_aligned+0x22>
 8007930:	e7ef      	b.n	8007912 <sbrk_aligned+0x1e>
 8007932:	bf00      	nop
 8007934:	20009414 	.word	0x20009414

08007938 <_malloc_r>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	1ccd      	adds	r5, r1, #3
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	2d00      	cmp	r5, #0
 800794c:	4606      	mov	r6, r0
 800794e:	db01      	blt.n	8007954 <_malloc_r+0x1c>
 8007950:	42a9      	cmp	r1, r5
 8007952:	d904      	bls.n	800795e <_malloc_r+0x26>
 8007954:	230c      	movs	r3, #12
 8007956:	6033      	str	r3, [r6, #0]
 8007958:	2000      	movs	r0, #0
 800795a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a34 <_malloc_r+0xfc>
 8007962:	f000 f869 	bl	8007a38 <__malloc_lock>
 8007966:	f8d8 3000 	ldr.w	r3, [r8]
 800796a:	461c      	mov	r4, r3
 800796c:	bb44      	cbnz	r4, 80079c0 <_malloc_r+0x88>
 800796e:	4629      	mov	r1, r5
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ffbf 	bl	80078f4 <sbrk_aligned>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	4604      	mov	r4, r0
 800797a:	d158      	bne.n	8007a2e <_malloc_r+0xf6>
 800797c:	f8d8 4000 	ldr.w	r4, [r8]
 8007980:	4627      	mov	r7, r4
 8007982:	2f00      	cmp	r7, #0
 8007984:	d143      	bne.n	8007a0e <_malloc_r+0xd6>
 8007986:	2c00      	cmp	r4, #0
 8007988:	d04b      	beq.n	8007a22 <_malloc_r+0xea>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	4639      	mov	r1, r7
 800798e:	4630      	mov	r0, r6
 8007990:	eb04 0903 	add.w	r9, r4, r3
 8007994:	f000 fdfc 	bl	8008590 <_sbrk_r>
 8007998:	4581      	cmp	r9, r0
 800799a:	d142      	bne.n	8007a22 <_malloc_r+0xea>
 800799c:	6821      	ldr	r1, [r4, #0]
 800799e:	1a6d      	subs	r5, r5, r1
 80079a0:	4629      	mov	r1, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff ffa6 	bl	80078f4 <sbrk_aligned>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d03a      	beq.n	8007a22 <_malloc_r+0xea>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	442b      	add	r3, r5
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	f8d8 3000 	ldr.w	r3, [r8]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	bb62      	cbnz	r2, 8007a14 <_malloc_r+0xdc>
 80079ba:	f8c8 7000 	str.w	r7, [r8]
 80079be:	e00f      	b.n	80079e0 <_malloc_r+0xa8>
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	1b52      	subs	r2, r2, r5
 80079c4:	d420      	bmi.n	8007a08 <_malloc_r+0xd0>
 80079c6:	2a0b      	cmp	r2, #11
 80079c8:	d917      	bls.n	80079fa <_malloc_r+0xc2>
 80079ca:	1961      	adds	r1, r4, r5
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	6025      	str	r5, [r4, #0]
 80079d0:	bf18      	it	ne
 80079d2:	6059      	strne	r1, [r3, #4]
 80079d4:	6863      	ldr	r3, [r4, #4]
 80079d6:	bf08      	it	eq
 80079d8:	f8c8 1000 	streq.w	r1, [r8]
 80079dc:	5162      	str	r2, [r4, r5]
 80079de:	604b      	str	r3, [r1, #4]
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 f82f 	bl	8007a44 <__malloc_unlock>
 80079e6:	f104 000b 	add.w	r0, r4, #11
 80079ea:	1d23      	adds	r3, r4, #4
 80079ec:	f020 0007 	bic.w	r0, r0, #7
 80079f0:	1ac2      	subs	r2, r0, r3
 80079f2:	bf1c      	itt	ne
 80079f4:	1a1b      	subne	r3, r3, r0
 80079f6:	50a3      	strne	r3, [r4, r2]
 80079f8:	e7af      	b.n	800795a <_malloc_r+0x22>
 80079fa:	6862      	ldr	r2, [r4, #4]
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	bf0c      	ite	eq
 8007a00:	f8c8 2000 	streq.w	r2, [r8]
 8007a04:	605a      	strne	r2, [r3, #4]
 8007a06:	e7eb      	b.n	80079e0 <_malloc_r+0xa8>
 8007a08:	4623      	mov	r3, r4
 8007a0a:	6864      	ldr	r4, [r4, #4]
 8007a0c:	e7ae      	b.n	800796c <_malloc_r+0x34>
 8007a0e:	463c      	mov	r4, r7
 8007a10:	687f      	ldr	r7, [r7, #4]
 8007a12:	e7b6      	b.n	8007982 <_malloc_r+0x4a>
 8007a14:	461a      	mov	r2, r3
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d1fb      	bne.n	8007a14 <_malloc_r+0xdc>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6053      	str	r3, [r2, #4]
 8007a20:	e7de      	b.n	80079e0 <_malloc_r+0xa8>
 8007a22:	230c      	movs	r3, #12
 8007a24:	6033      	str	r3, [r6, #0]
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 f80c 	bl	8007a44 <__malloc_unlock>
 8007a2c:	e794      	b.n	8007958 <_malloc_r+0x20>
 8007a2e:	6005      	str	r5, [r0, #0]
 8007a30:	e7d6      	b.n	80079e0 <_malloc_r+0xa8>
 8007a32:	bf00      	nop
 8007a34:	20009418 	.word	0x20009418

08007a38 <__malloc_lock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__malloc_lock+0x8>)
 8007a3a:	f7ff b8ba 	b.w	8006bb2 <__retarget_lock_acquire_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20009410 	.word	0x20009410

08007a44 <__malloc_unlock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	@ (8007a4c <__malloc_unlock+0x8>)
 8007a46:	f7ff b8b5 	b.w	8006bb4 <__retarget_lock_release_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20009410 	.word	0x20009410

08007a50 <_Balloc>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	69c6      	ldr	r6, [r0, #28]
 8007a54:	4604      	mov	r4, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Balloc+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ff42 	bl	80078e4 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	61e0      	str	r0, [r4, #28]
 8007a64:	b920      	cbnz	r0, 8007a70 <_Balloc+0x20>
 8007a66:	4b18      	ldr	r3, [pc, #96]	@ (8007ac8 <_Balloc+0x78>)
 8007a68:	4818      	ldr	r0, [pc, #96]	@ (8007acc <_Balloc+0x7c>)
 8007a6a:	216b      	movs	r1, #107	@ 0x6b
 8007a6c:	f000 fdae 	bl	80085cc <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	69e6      	ldr	r6, [r4, #28]
 8007a7a:	68f3      	ldr	r3, [r6, #12]
 8007a7c:	b183      	cbz	r3, 8007aa0 <_Balloc+0x50>
 8007a7e:	69e3      	ldr	r3, [r4, #28]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a86:	b9b8      	cbnz	r0, 8007ab8 <_Balloc+0x68>
 8007a88:	2101      	movs	r1, #1
 8007a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a8e:	1d72      	adds	r2, r6, #5
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fdb8 	bl	8008608 <_calloc_r>
 8007a98:	b160      	cbz	r0, 8007ab4 <_Balloc+0x64>
 8007a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a9e:	e00e      	b.n	8007abe <_Balloc+0x6e>
 8007aa0:	2221      	movs	r2, #33	@ 0x21
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fdaf 	bl	8008608 <_calloc_r>
 8007aaa:	69e3      	ldr	r3, [r4, #28]
 8007aac:	60f0      	str	r0, [r6, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <_Balloc+0x2e>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	6802      	ldr	r2, [r0, #0]
 8007aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ac4:	e7f7      	b.n	8007ab6 <_Balloc+0x66>
 8007ac6:	bf00      	nop
 8007ac8:	08009499 	.word	0x08009499
 8007acc:	08009519 	.word	0x08009519

08007ad0 <_Bfree>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	69c6      	ldr	r6, [r0, #28]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b976      	cbnz	r6, 8007af8 <_Bfree+0x28>
 8007ada:	2010      	movs	r0, #16
 8007adc:	f7ff ff02 	bl	80078e4 <malloc>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	61e8      	str	r0, [r5, #28]
 8007ae4:	b920      	cbnz	r0, 8007af0 <_Bfree+0x20>
 8007ae6:	4b09      	ldr	r3, [pc, #36]	@ (8007b0c <_Bfree+0x3c>)
 8007ae8:	4809      	ldr	r0, [pc, #36]	@ (8007b10 <_Bfree+0x40>)
 8007aea:	218f      	movs	r1, #143	@ 0x8f
 8007aec:	f000 fd6e 	bl	80085cc <__assert_func>
 8007af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af4:	6006      	str	r6, [r0, #0]
 8007af6:	60c6      	str	r6, [r0, #12]
 8007af8:	b13c      	cbz	r4, 8007b0a <_Bfree+0x3a>
 8007afa:	69eb      	ldr	r3, [r5, #28]
 8007afc:	6862      	ldr	r2, [r4, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b04:	6021      	str	r1, [r4, #0]
 8007b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	08009499 	.word	0x08009499
 8007b10:	08009519 	.word	0x08009519

08007b14 <__multadd>:
 8007b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b18:	690d      	ldr	r5, [r1, #16]
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	461e      	mov	r6, r3
 8007b20:	f101 0c14 	add.w	ip, r1, #20
 8007b24:	2000      	movs	r0, #0
 8007b26:	f8dc 3000 	ldr.w	r3, [ip]
 8007b2a:	b299      	uxth	r1, r3
 8007b2c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b30:	0c1e      	lsrs	r6, r3, #16
 8007b32:	0c0b      	lsrs	r3, r1, #16
 8007b34:	fb02 3306 	mla	r3, r2, r6, r3
 8007b38:	b289      	uxth	r1, r1
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b40:	4285      	cmp	r5, r0
 8007b42:	f84c 1b04 	str.w	r1, [ip], #4
 8007b46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b4a:	dcec      	bgt.n	8007b26 <__multadd+0x12>
 8007b4c:	b30e      	cbz	r6, 8007b92 <__multadd+0x7e>
 8007b4e:	68a3      	ldr	r3, [r4, #8]
 8007b50:	42ab      	cmp	r3, r5
 8007b52:	dc19      	bgt.n	8007b88 <__multadd+0x74>
 8007b54:	6861      	ldr	r1, [r4, #4]
 8007b56:	4638      	mov	r0, r7
 8007b58:	3101      	adds	r1, #1
 8007b5a:	f7ff ff79 	bl	8007a50 <_Balloc>
 8007b5e:	4680      	mov	r8, r0
 8007b60:	b928      	cbnz	r0, 8007b6e <__multadd+0x5a>
 8007b62:	4602      	mov	r2, r0
 8007b64:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <__multadd+0x84>)
 8007b66:	480d      	ldr	r0, [pc, #52]	@ (8007b9c <__multadd+0x88>)
 8007b68:	21ba      	movs	r1, #186	@ 0xba
 8007b6a:	f000 fd2f 	bl	80085cc <__assert_func>
 8007b6e:	6922      	ldr	r2, [r4, #16]
 8007b70:	3202      	adds	r2, #2
 8007b72:	f104 010c 	add.w	r1, r4, #12
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	300c      	adds	r0, #12
 8007b7a:	f000 fd19 	bl	80085b0 <memcpy>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ffa5 	bl	8007ad0 <_Bfree>
 8007b86:	4644      	mov	r4, r8
 8007b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	615e      	str	r6, [r3, #20]
 8007b90:	6125      	str	r5, [r4, #16]
 8007b92:	4620      	mov	r0, r4
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	08009508 	.word	0x08009508
 8007b9c:	08009519 	.word	0x08009519

08007ba0 <__hi0bits>:
 8007ba0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	bf36      	itet	cc
 8007ba8:	0403      	lslcc	r3, r0, #16
 8007baa:	2000      	movcs	r0, #0
 8007bac:	2010      	movcc	r0, #16
 8007bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bb2:	bf3c      	itt	cc
 8007bb4:	021b      	lslcc	r3, r3, #8
 8007bb6:	3008      	addcc	r0, #8
 8007bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bbc:	bf3c      	itt	cc
 8007bbe:	011b      	lslcc	r3, r3, #4
 8007bc0:	3004      	addcc	r0, #4
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc6:	bf3c      	itt	cc
 8007bc8:	009b      	lslcc	r3, r3, #2
 8007bca:	3002      	addcc	r0, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	db05      	blt.n	8007bdc <__hi0bits+0x3c>
 8007bd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007bd4:	f100 0001 	add.w	r0, r0, #1
 8007bd8:	bf08      	it	eq
 8007bda:	2020      	moveq	r0, #32
 8007bdc:	4770      	bx	lr

08007bde <__lo0bits>:
 8007bde:	6803      	ldr	r3, [r0, #0]
 8007be0:	4602      	mov	r2, r0
 8007be2:	f013 0007 	ands.w	r0, r3, #7
 8007be6:	d00b      	beq.n	8007c00 <__lo0bits+0x22>
 8007be8:	07d9      	lsls	r1, r3, #31
 8007bea:	d421      	bmi.n	8007c30 <__lo0bits+0x52>
 8007bec:	0798      	lsls	r0, r3, #30
 8007bee:	bf49      	itett	mi
 8007bf0:	085b      	lsrmi	r3, r3, #1
 8007bf2:	089b      	lsrpl	r3, r3, #2
 8007bf4:	2001      	movmi	r0, #1
 8007bf6:	6013      	strmi	r3, [r2, #0]
 8007bf8:	bf5c      	itt	pl
 8007bfa:	6013      	strpl	r3, [r2, #0]
 8007bfc:	2002      	movpl	r0, #2
 8007bfe:	4770      	bx	lr
 8007c00:	b299      	uxth	r1, r3
 8007c02:	b909      	cbnz	r1, 8007c08 <__lo0bits+0x2a>
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	2010      	movs	r0, #16
 8007c08:	b2d9      	uxtb	r1, r3
 8007c0a:	b909      	cbnz	r1, 8007c10 <__lo0bits+0x32>
 8007c0c:	3008      	adds	r0, #8
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	0719      	lsls	r1, r3, #28
 8007c12:	bf04      	itt	eq
 8007c14:	091b      	lsreq	r3, r3, #4
 8007c16:	3004      	addeq	r0, #4
 8007c18:	0799      	lsls	r1, r3, #30
 8007c1a:	bf04      	itt	eq
 8007c1c:	089b      	lsreq	r3, r3, #2
 8007c1e:	3002      	addeq	r0, #2
 8007c20:	07d9      	lsls	r1, r3, #31
 8007c22:	d403      	bmi.n	8007c2c <__lo0bits+0x4e>
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	f100 0001 	add.w	r0, r0, #1
 8007c2a:	d003      	beq.n	8007c34 <__lo0bits+0x56>
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	4770      	bx	lr
 8007c30:	2000      	movs	r0, #0
 8007c32:	4770      	bx	lr
 8007c34:	2020      	movs	r0, #32
 8007c36:	4770      	bx	lr

08007c38 <__i2b>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	f7ff ff07 	bl	8007a50 <_Balloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	b928      	cbnz	r0, 8007c52 <__i2b+0x1a>
 8007c46:	4b05      	ldr	r3, [pc, #20]	@ (8007c5c <__i2b+0x24>)
 8007c48:	4805      	ldr	r0, [pc, #20]	@ (8007c60 <__i2b+0x28>)
 8007c4a:	f240 1145 	movw	r1, #325	@ 0x145
 8007c4e:	f000 fcbd 	bl	80085cc <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	6144      	str	r4, [r0, #20]
 8007c56:	6103      	str	r3, [r0, #16]
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	08009508 	.word	0x08009508
 8007c60:	08009519 	.word	0x08009519

08007c64 <__multiply>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4614      	mov	r4, r2
 8007c6a:	690a      	ldr	r2, [r1, #16]
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	bfa8      	it	ge
 8007c72:	4623      	movge	r3, r4
 8007c74:	460f      	mov	r7, r1
 8007c76:	bfa4      	itt	ge
 8007c78:	460c      	movge	r4, r1
 8007c7a:	461f      	movge	r7, r3
 8007c7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	6861      	ldr	r1, [r4, #4]
 8007c88:	eb0a 0609 	add.w	r6, sl, r9
 8007c8c:	42b3      	cmp	r3, r6
 8007c8e:	b085      	sub	sp, #20
 8007c90:	bfb8      	it	lt
 8007c92:	3101      	addlt	r1, #1
 8007c94:	f7ff fedc 	bl	8007a50 <_Balloc>
 8007c98:	b930      	cbnz	r0, 8007ca8 <__multiply+0x44>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b44      	ldr	r3, [pc, #272]	@ (8007db0 <__multiply+0x14c>)
 8007c9e:	4845      	ldr	r0, [pc, #276]	@ (8007db4 <__multiply+0x150>)
 8007ca0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ca4:	f000 fc92 	bl	80085cc <__assert_func>
 8007ca8:	f100 0514 	add.w	r5, r0, #20
 8007cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	d321      	bcc.n	8007cfc <__multiply+0x98>
 8007cb8:	f107 0114 	add.w	r1, r7, #20
 8007cbc:	f104 0214 	add.w	r2, r4, #20
 8007cc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007cc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	1b13      	subs	r3, r2, r4
 8007ccc:	3b15      	subs	r3, #21
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	f104 0715 	add.w	r7, r4, #21
 8007cd8:	42ba      	cmp	r2, r7
 8007cda:	bf38      	it	cc
 8007cdc:	2304      	movcc	r3, #4
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	9b02      	ldr	r3, [sp, #8]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	428b      	cmp	r3, r1
 8007ce6:	d80c      	bhi.n	8007d02 <__multiply+0x9e>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	dd03      	ble.n	8007cf4 <__multiply+0x90>
 8007cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05b      	beq.n	8007dac <__multiply+0x148>
 8007cf4:	6106      	str	r6, [r0, #16]
 8007cf6:	b005      	add	sp, #20
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	f843 2b04 	str.w	r2, [r3], #4
 8007d00:	e7d8      	b.n	8007cb4 <__multiply+0x50>
 8007d02:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d024      	beq.n	8007d56 <__multiply+0xf2>
 8007d0c:	f104 0e14 	add.w	lr, r4, #20
 8007d10:	46a9      	mov	r9, r5
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d1a:	f8d9 3000 	ldr.w	r3, [r9]
 8007d1e:	fa1f fb87 	uxth.w	fp, r7
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d2c:	f8d9 7000 	ldr.w	r7, [r9]
 8007d30:	4463      	add	r3, ip
 8007d32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d36:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d44:	4572      	cmp	r2, lr
 8007d46:	f849 3b04 	str.w	r3, [r9], #4
 8007d4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d4e:	d8e2      	bhi.n	8007d16 <__multiply+0xb2>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	f845 c003 	str.w	ip, [r5, r3]
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d5c:	3104      	adds	r1, #4
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d021      	beq.n	8007da8 <__multiply+0x144>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	f104 0c14 	add.w	ip, r4, #20
 8007d6a:	46ae      	mov	lr, r5
 8007d6c:	f04f 0a00 	mov.w	sl, #0
 8007d70:	f8bc b000 	ldrh.w	fp, [ip]
 8007d74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d78:	fb09 770b 	mla	r7, r9, fp, r7
 8007d7c:	4457      	add	r7, sl
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d84:	f84e 3b04 	str.w	r3, [lr], #4
 8007d88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d90:	f8be 3000 	ldrh.w	r3, [lr]
 8007d94:	fb09 330a 	mla	r3, r9, sl, r3
 8007d98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d9c:	4562      	cmp	r2, ip
 8007d9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007da2:	d8e5      	bhi.n	8007d70 <__multiply+0x10c>
 8007da4:	9f01      	ldr	r7, [sp, #4]
 8007da6:	51eb      	str	r3, [r5, r7]
 8007da8:	3504      	adds	r5, #4
 8007daa:	e799      	b.n	8007ce0 <__multiply+0x7c>
 8007dac:	3e01      	subs	r6, #1
 8007dae:	e79b      	b.n	8007ce8 <__multiply+0x84>
 8007db0:	08009508 	.word	0x08009508
 8007db4:	08009519 	.word	0x08009519

08007db8 <__pow5mult>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	f012 0203 	ands.w	r2, r2, #3
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	d007      	beq.n	8007dd8 <__pow5mult+0x20>
 8007dc8:	4c25      	ldr	r4, [pc, #148]	@ (8007e60 <__pow5mult+0xa8>)
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dd2:	f7ff fe9f 	bl	8007b14 <__multadd>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	10ad      	asrs	r5, r5, #2
 8007dda:	d03d      	beq.n	8007e58 <__pow5mult+0xa0>
 8007ddc:	69fc      	ldr	r4, [r7, #28]
 8007dde:	b97c      	cbnz	r4, 8007e00 <__pow5mult+0x48>
 8007de0:	2010      	movs	r0, #16
 8007de2:	f7ff fd7f 	bl	80078e4 <malloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	61f8      	str	r0, [r7, #28]
 8007dea:	b928      	cbnz	r0, 8007df8 <__pow5mult+0x40>
 8007dec:	4b1d      	ldr	r3, [pc, #116]	@ (8007e64 <__pow5mult+0xac>)
 8007dee:	481e      	ldr	r0, [pc, #120]	@ (8007e68 <__pow5mult+0xb0>)
 8007df0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007df4:	f000 fbea 	bl	80085cc <__assert_func>
 8007df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dfc:	6004      	str	r4, [r0, #0]
 8007dfe:	60c4      	str	r4, [r0, #12]
 8007e00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e08:	b94c      	cbnz	r4, 8007e1e <__pow5mult+0x66>
 8007e0a:	f240 2171 	movw	r1, #625	@ 0x271
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7ff ff12 	bl	8007c38 <__i2b>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	07eb      	lsls	r3, r5, #31
 8007e24:	d50a      	bpl.n	8007e3c <__pow5mult+0x84>
 8007e26:	4631      	mov	r1, r6
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	f7ff ff1a 	bl	8007c64 <__multiply>
 8007e30:	4631      	mov	r1, r6
 8007e32:	4680      	mov	r8, r0
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff fe4b 	bl	8007ad0 <_Bfree>
 8007e3a:	4646      	mov	r6, r8
 8007e3c:	106d      	asrs	r5, r5, #1
 8007e3e:	d00b      	beq.n	8007e58 <__pow5mult+0xa0>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	b938      	cbnz	r0, 8007e54 <__pow5mult+0x9c>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4621      	mov	r1, r4
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff ff0b 	bl	8007c64 <__multiply>
 8007e4e:	6020      	str	r0, [r4, #0]
 8007e50:	f8c0 9000 	str.w	r9, [r0]
 8007e54:	4604      	mov	r4, r0
 8007e56:	e7e4      	b.n	8007e22 <__pow5mult+0x6a>
 8007e58:	4630      	mov	r0, r6
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	bf00      	nop
 8007e60:	08009574 	.word	0x08009574
 8007e64:	08009499 	.word	0x08009499
 8007e68:	08009519 	.word	0x08009519

08007e6c <__lshift>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	6849      	ldr	r1, [r1, #4]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	4691      	mov	r9, r2
 8007e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e84:	f108 0601 	add.w	r6, r8, #1
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	db0b      	blt.n	8007ea4 <__lshift+0x38>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fddf 	bl	8007a50 <_Balloc>
 8007e92:	4605      	mov	r5, r0
 8007e94:	b948      	cbnz	r0, 8007eaa <__lshift+0x3e>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <__lshift+0xd0>)
 8007e9a:	4829      	ldr	r0, [pc, #164]	@ (8007f40 <__lshift+0xd4>)
 8007e9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ea0:	f000 fb94 	bl	80085cc <__assert_func>
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	e7ee      	b.n	8007e88 <__lshift+0x1c>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f100 0114 	add.w	r1, r0, #20
 8007eb0:	f100 0210 	add.w	r2, r0, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	4553      	cmp	r3, sl
 8007eb8:	db33      	blt.n	8007f22 <__lshift+0xb6>
 8007eba:	6920      	ldr	r0, [r4, #16]
 8007ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec0:	f104 0314 	add.w	r3, r4, #20
 8007ec4:	f019 091f 	ands.w	r9, r9, #31
 8007ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ed0:	d02b      	beq.n	8007f2a <__lshift+0xbe>
 8007ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ed6:	468a      	mov	sl, r1
 8007ed8:	2200      	movs	r2, #0
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ee0:	4310      	orrs	r0, r2
 8007ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eea:	459c      	cmp	ip, r3
 8007eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ef0:	d8f3      	bhi.n	8007eda <__lshift+0x6e>
 8007ef2:	ebac 0304 	sub.w	r3, ip, r4
 8007ef6:	3b15      	subs	r3, #21
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	3304      	adds	r3, #4
 8007efe:	f104 0015 	add.w	r0, r4, #21
 8007f02:	4584      	cmp	ip, r0
 8007f04:	bf38      	it	cc
 8007f06:	2304      	movcc	r3, #4
 8007f08:	50ca      	str	r2, [r1, r3]
 8007f0a:	b10a      	cbz	r2, 8007f10 <__lshift+0xa4>
 8007f0c:	f108 0602 	add.w	r6, r8, #2
 8007f10:	3e01      	subs	r6, #1
 8007f12:	4638      	mov	r0, r7
 8007f14:	612e      	str	r6, [r5, #16]
 8007f16:	4621      	mov	r1, r4
 8007f18:	f7ff fdda 	bl	8007ad0 <_Bfree>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f26:	3301      	adds	r3, #1
 8007f28:	e7c5      	b.n	8007eb6 <__lshift+0x4a>
 8007f2a:	3904      	subs	r1, #4
 8007f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f34:	459c      	cmp	ip, r3
 8007f36:	d8f9      	bhi.n	8007f2c <__lshift+0xc0>
 8007f38:	e7ea      	b.n	8007f10 <__lshift+0xa4>
 8007f3a:	bf00      	nop
 8007f3c:	08009508 	.word	0x08009508
 8007f40:	08009519 	.word	0x08009519

08007f44 <__mcmp>:
 8007f44:	690a      	ldr	r2, [r1, #16]
 8007f46:	4603      	mov	r3, r0
 8007f48:	6900      	ldr	r0, [r0, #16]
 8007f4a:	1a80      	subs	r0, r0, r2
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	d10e      	bne.n	8007f6e <__mcmp+0x2a>
 8007f50:	3314      	adds	r3, #20
 8007f52:	3114      	adds	r1, #20
 8007f54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f64:	4295      	cmp	r5, r2
 8007f66:	d003      	beq.n	8007f70 <__mcmp+0x2c>
 8007f68:	d205      	bcs.n	8007f76 <__mcmp+0x32>
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	d3f3      	bcc.n	8007f5c <__mcmp+0x18>
 8007f74:	e7fb      	b.n	8007f6e <__mcmp+0x2a>
 8007f76:	2001      	movs	r0, #1
 8007f78:	e7f9      	b.n	8007f6e <__mcmp+0x2a>
	...

08007f7c <__mdiff>:
 8007f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	4689      	mov	r9, r1
 8007f82:	4606      	mov	r6, r0
 8007f84:	4611      	mov	r1, r2
 8007f86:	4648      	mov	r0, r9
 8007f88:	4614      	mov	r4, r2
 8007f8a:	f7ff ffdb 	bl	8007f44 <__mcmp>
 8007f8e:	1e05      	subs	r5, r0, #0
 8007f90:	d112      	bne.n	8007fb8 <__mdiff+0x3c>
 8007f92:	4629      	mov	r1, r5
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fd5b 	bl	8007a50 <_Balloc>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	b928      	cbnz	r0, 8007faa <__mdiff+0x2e>
 8007f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800809c <__mdiff+0x120>)
 8007fa0:	f240 2137 	movw	r1, #567	@ 0x237
 8007fa4:	483e      	ldr	r0, [pc, #248]	@ (80080a0 <__mdiff+0x124>)
 8007fa6:	f000 fb11 	bl	80085cc <__assert_func>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	b003      	add	sp, #12
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	bfbc      	itt	lt
 8007fba:	464b      	movlt	r3, r9
 8007fbc:	46a1      	movlt	r9, r4
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007fc4:	bfba      	itte	lt
 8007fc6:	461c      	movlt	r4, r3
 8007fc8:	2501      	movlt	r5, #1
 8007fca:	2500      	movge	r5, #0
 8007fcc:	f7ff fd40 	bl	8007a50 <_Balloc>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	b918      	cbnz	r0, 8007fdc <__mdiff+0x60>
 8007fd4:	4b31      	ldr	r3, [pc, #196]	@ (800809c <__mdiff+0x120>)
 8007fd6:	f240 2145 	movw	r1, #581	@ 0x245
 8007fda:	e7e3      	b.n	8007fa4 <__mdiff+0x28>
 8007fdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fe0:	6926      	ldr	r6, [r4, #16]
 8007fe2:	60c5      	str	r5, [r0, #12]
 8007fe4:	f109 0310 	add.w	r3, r9, #16
 8007fe8:	f109 0514 	add.w	r5, r9, #20
 8007fec:	f104 0e14 	add.w	lr, r4, #20
 8007ff0:	f100 0b14 	add.w	fp, r0, #20
 8007ff4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ff8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	46d9      	mov	r9, fp
 8008000:	f04f 0c00 	mov.w	ip, #0
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	f85e 0b04 	ldr.w	r0, [lr], #4
 800800a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	fa1f f38a 	uxth.w	r3, sl
 8008014:	4619      	mov	r1, r3
 8008016:	b283      	uxth	r3, r0
 8008018:	1acb      	subs	r3, r1, r3
 800801a:	0c00      	lsrs	r0, r0, #16
 800801c:	4463      	add	r3, ip
 800801e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008022:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008026:	b29b      	uxth	r3, r3
 8008028:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800802c:	4576      	cmp	r6, lr
 800802e:	f849 3b04 	str.w	r3, [r9], #4
 8008032:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008036:	d8e5      	bhi.n	8008004 <__mdiff+0x88>
 8008038:	1b33      	subs	r3, r6, r4
 800803a:	3b15      	subs	r3, #21
 800803c:	f023 0303 	bic.w	r3, r3, #3
 8008040:	3415      	adds	r4, #21
 8008042:	3304      	adds	r3, #4
 8008044:	42a6      	cmp	r6, r4
 8008046:	bf38      	it	cc
 8008048:	2304      	movcc	r3, #4
 800804a:	441d      	add	r5, r3
 800804c:	445b      	add	r3, fp
 800804e:	461e      	mov	r6, r3
 8008050:	462c      	mov	r4, r5
 8008052:	4544      	cmp	r4, r8
 8008054:	d30e      	bcc.n	8008074 <__mdiff+0xf8>
 8008056:	f108 0103 	add.w	r1, r8, #3
 800805a:	1b49      	subs	r1, r1, r5
 800805c:	f021 0103 	bic.w	r1, r1, #3
 8008060:	3d03      	subs	r5, #3
 8008062:	45a8      	cmp	r8, r5
 8008064:	bf38      	it	cc
 8008066:	2100      	movcc	r1, #0
 8008068:	440b      	add	r3, r1
 800806a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800806e:	b191      	cbz	r1, 8008096 <__mdiff+0x11a>
 8008070:	6117      	str	r7, [r2, #16]
 8008072:	e79d      	b.n	8007fb0 <__mdiff+0x34>
 8008074:	f854 1b04 	ldr.w	r1, [r4], #4
 8008078:	46e6      	mov	lr, ip
 800807a:	0c08      	lsrs	r0, r1, #16
 800807c:	fa1c fc81 	uxtah	ip, ip, r1
 8008080:	4471      	add	r1, lr
 8008082:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008086:	b289      	uxth	r1, r1
 8008088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800808c:	f846 1b04 	str.w	r1, [r6], #4
 8008090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008094:	e7dd      	b.n	8008052 <__mdiff+0xd6>
 8008096:	3f01      	subs	r7, #1
 8008098:	e7e7      	b.n	800806a <__mdiff+0xee>
 800809a:	bf00      	nop
 800809c:	08009508 	.word	0x08009508
 80080a0:	08009519 	.word	0x08009519

080080a4 <__d2b>:
 80080a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	460f      	mov	r7, r1
 80080aa:	2101      	movs	r1, #1
 80080ac:	ec59 8b10 	vmov	r8, r9, d0
 80080b0:	4616      	mov	r6, r2
 80080b2:	f7ff fccd 	bl	8007a50 <_Balloc>
 80080b6:	4604      	mov	r4, r0
 80080b8:	b930      	cbnz	r0, 80080c8 <__d2b+0x24>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4b23      	ldr	r3, [pc, #140]	@ (800814c <__d2b+0xa8>)
 80080be:	4824      	ldr	r0, [pc, #144]	@ (8008150 <__d2b+0xac>)
 80080c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80080c4:	f000 fa82 	bl	80085cc <__assert_func>
 80080c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080d0:	b10d      	cbz	r5, 80080d6 <__d2b+0x32>
 80080d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	f1b8 0300 	subs.w	r3, r8, #0
 80080dc:	d023      	beq.n	8008126 <__d2b+0x82>
 80080de:	4668      	mov	r0, sp
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	f7ff fd7c 	bl	8007bde <__lo0bits>
 80080e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080ea:	b1d0      	cbz	r0, 8008122 <__d2b+0x7e>
 80080ec:	f1c0 0320 	rsb	r3, r0, #32
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	430b      	orrs	r3, r1
 80080f6:	40c2      	lsrs	r2, r0
 80080f8:	6163      	str	r3, [r4, #20]
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	61a3      	str	r3, [r4, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bf0c      	ite	eq
 8008104:	2201      	moveq	r2, #1
 8008106:	2202      	movne	r2, #2
 8008108:	6122      	str	r2, [r4, #16]
 800810a:	b1a5      	cbz	r5, 8008136 <__d2b+0x92>
 800810c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008110:	4405      	add	r5, r0
 8008112:	603d      	str	r5, [r7, #0]
 8008114:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008118:	6030      	str	r0, [r6, #0]
 800811a:	4620      	mov	r0, r4
 800811c:	b003      	add	sp, #12
 800811e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008122:	6161      	str	r1, [r4, #20]
 8008124:	e7ea      	b.n	80080fc <__d2b+0x58>
 8008126:	a801      	add	r0, sp, #4
 8008128:	f7ff fd59 	bl	8007bde <__lo0bits>
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	6163      	str	r3, [r4, #20]
 8008130:	3020      	adds	r0, #32
 8008132:	2201      	movs	r2, #1
 8008134:	e7e8      	b.n	8008108 <__d2b+0x64>
 8008136:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800813a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800813e:	6038      	str	r0, [r7, #0]
 8008140:	6918      	ldr	r0, [r3, #16]
 8008142:	f7ff fd2d 	bl	8007ba0 <__hi0bits>
 8008146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800814a:	e7e5      	b.n	8008118 <__d2b+0x74>
 800814c:	08009508 	.word	0x08009508
 8008150:	08009519 	.word	0x08009519

08008154 <__ssputs_r>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	688e      	ldr	r6, [r1, #8]
 800815a:	461f      	mov	r7, r3
 800815c:	42be      	cmp	r6, r7
 800815e:	680b      	ldr	r3, [r1, #0]
 8008160:	4682      	mov	sl, r0
 8008162:	460c      	mov	r4, r1
 8008164:	4690      	mov	r8, r2
 8008166:	d82d      	bhi.n	80081c4 <__ssputs_r+0x70>
 8008168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800816c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008170:	d026      	beq.n	80081c0 <__ssputs_r+0x6c>
 8008172:	6965      	ldr	r5, [r4, #20]
 8008174:	6909      	ldr	r1, [r1, #16]
 8008176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800817a:	eba3 0901 	sub.w	r9, r3, r1
 800817e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008182:	1c7b      	adds	r3, r7, #1
 8008184:	444b      	add	r3, r9
 8008186:	106d      	asrs	r5, r5, #1
 8008188:	429d      	cmp	r5, r3
 800818a:	bf38      	it	cc
 800818c:	461d      	movcc	r5, r3
 800818e:	0553      	lsls	r3, r2, #21
 8008190:	d527      	bpl.n	80081e2 <__ssputs_r+0x8e>
 8008192:	4629      	mov	r1, r5
 8008194:	f7ff fbd0 	bl	8007938 <_malloc_r>
 8008198:	4606      	mov	r6, r0
 800819a:	b360      	cbz	r0, 80081f6 <__ssputs_r+0xa2>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	464a      	mov	r2, r9
 80081a0:	f000 fa06 	bl	80085b0 <memcpy>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	6126      	str	r6, [r4, #16]
 80081b2:	6165      	str	r5, [r4, #20]
 80081b4:	444e      	add	r6, r9
 80081b6:	eba5 0509 	sub.w	r5, r5, r9
 80081ba:	6026      	str	r6, [r4, #0]
 80081bc:	60a5      	str	r5, [r4, #8]
 80081be:	463e      	mov	r6, r7
 80081c0:	42be      	cmp	r6, r7
 80081c2:	d900      	bls.n	80081c6 <__ssputs_r+0x72>
 80081c4:	463e      	mov	r6, r7
 80081c6:	6820      	ldr	r0, [r4, #0]
 80081c8:	4632      	mov	r2, r6
 80081ca:	4641      	mov	r1, r8
 80081cc:	f000 f9c6 	bl	800855c <memmove>
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	1b9b      	subs	r3, r3, r6
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	4433      	add	r3, r6
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	2000      	movs	r0, #0
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	462a      	mov	r2, r5
 80081e4:	f000 fa36 	bl	8008654 <_realloc_r>
 80081e8:	4606      	mov	r6, r0
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1e0      	bne.n	80081b0 <__ssputs_r+0x5c>
 80081ee:	6921      	ldr	r1, [r4, #16]
 80081f0:	4650      	mov	r0, sl
 80081f2:	f7ff fb2d 	bl	8007850 <_free_r>
 80081f6:	230c      	movs	r3, #12
 80081f8:	f8ca 3000 	str.w	r3, [sl]
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e7e9      	b.n	80081de <__ssputs_r+0x8a>
	...

0800820c <_svfiprintf_r>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	4698      	mov	r8, r3
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	b09d      	sub	sp, #116	@ 0x74
 8008218:	4607      	mov	r7, r0
 800821a:	460d      	mov	r5, r1
 800821c:	4614      	mov	r4, r2
 800821e:	d510      	bpl.n	8008242 <_svfiprintf_r+0x36>
 8008220:	690b      	ldr	r3, [r1, #16]
 8008222:	b973      	cbnz	r3, 8008242 <_svfiprintf_r+0x36>
 8008224:	2140      	movs	r1, #64	@ 0x40
 8008226:	f7ff fb87 	bl	8007938 <_malloc_r>
 800822a:	6028      	str	r0, [r5, #0]
 800822c:	6128      	str	r0, [r5, #16]
 800822e:	b930      	cbnz	r0, 800823e <_svfiprintf_r+0x32>
 8008230:	230c      	movs	r3, #12
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	@ 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	2340      	movs	r3, #64	@ 0x40
 8008240:	616b      	str	r3, [r5, #20]
 8008242:	2300      	movs	r3, #0
 8008244:	9309      	str	r3, [sp, #36]	@ 0x24
 8008246:	2320      	movs	r3, #32
 8008248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800824c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008250:	2330      	movs	r3, #48	@ 0x30
 8008252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083f0 <_svfiprintf_r+0x1e4>
 8008256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800825a:	f04f 0901 	mov.w	r9, #1
 800825e:	4623      	mov	r3, r4
 8008260:	469a      	mov	sl, r3
 8008262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008266:	b10a      	cbz	r2, 800826c <_svfiprintf_r+0x60>
 8008268:	2a25      	cmp	r2, #37	@ 0x25
 800826a:	d1f9      	bne.n	8008260 <_svfiprintf_r+0x54>
 800826c:	ebba 0b04 	subs.w	fp, sl, r4
 8008270:	d00b      	beq.n	800828a <_svfiprintf_r+0x7e>
 8008272:	465b      	mov	r3, fp
 8008274:	4622      	mov	r2, r4
 8008276:	4629      	mov	r1, r5
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ff6b 	bl	8008154 <__ssputs_r>
 800827e:	3001      	adds	r0, #1
 8008280:	f000 80a7 	beq.w	80083d2 <_svfiprintf_r+0x1c6>
 8008284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008286:	445a      	add	r2, fp
 8008288:	9209      	str	r2, [sp, #36]	@ 0x24
 800828a:	f89a 3000 	ldrb.w	r3, [sl]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 809f 	beq.w	80083d2 <_svfiprintf_r+0x1c6>
 8008294:	2300      	movs	r3, #0
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829e:	f10a 0a01 	add.w	sl, sl, #1
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	9307      	str	r3, [sp, #28]
 80082a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80082ac:	4654      	mov	r4, sl
 80082ae:	2205      	movs	r2, #5
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	484e      	ldr	r0, [pc, #312]	@ (80083f0 <_svfiprintf_r+0x1e4>)
 80082b6:	f7f7 ffab 	bl	8000210 <memchr>
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	b9d8      	cbnz	r0, 80082f6 <_svfiprintf_r+0xea>
 80082be:	06d0      	lsls	r0, r2, #27
 80082c0:	bf44      	itt	mi
 80082c2:	2320      	movmi	r3, #32
 80082c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c8:	0711      	lsls	r1, r2, #28
 80082ca:	bf44      	itt	mi
 80082cc:	232b      	movmi	r3, #43	@ 0x2b
 80082ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d2:	f89a 3000 	ldrb.w	r3, [sl]
 80082d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d8:	d015      	beq.n	8008306 <_svfiprintf_r+0xfa>
 80082da:	9a07      	ldr	r2, [sp, #28]
 80082dc:	4654      	mov	r4, sl
 80082de:	2000      	movs	r0, #0
 80082e0:	f04f 0c0a 	mov.w	ip, #10
 80082e4:	4621      	mov	r1, r4
 80082e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ea:	3b30      	subs	r3, #48	@ 0x30
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	d94b      	bls.n	8008388 <_svfiprintf_r+0x17c>
 80082f0:	b1b0      	cbz	r0, 8008320 <_svfiprintf_r+0x114>
 80082f2:	9207      	str	r2, [sp, #28]
 80082f4:	e014      	b.n	8008320 <_svfiprintf_r+0x114>
 80082f6:	eba0 0308 	sub.w	r3, r0, r8
 80082fa:	fa09 f303 	lsl.w	r3, r9, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	46a2      	mov	sl, r4
 8008304:	e7d2      	b.n	80082ac <_svfiprintf_r+0xa0>
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	1d19      	adds	r1, r3, #4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	9103      	str	r1, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfbb      	ittet	lt
 8008312:	425b      	neglt	r3, r3
 8008314:	f042 0202 	orrlt.w	r2, r2, #2
 8008318:	9307      	strge	r3, [sp, #28]
 800831a:	9307      	strlt	r3, [sp, #28]
 800831c:	bfb8      	it	lt
 800831e:	9204      	strlt	r2, [sp, #16]
 8008320:	7823      	ldrb	r3, [r4, #0]
 8008322:	2b2e      	cmp	r3, #46	@ 0x2e
 8008324:	d10a      	bne.n	800833c <_svfiprintf_r+0x130>
 8008326:	7863      	ldrb	r3, [r4, #1]
 8008328:	2b2a      	cmp	r3, #42	@ 0x2a
 800832a:	d132      	bne.n	8008392 <_svfiprintf_r+0x186>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	9203      	str	r2, [sp, #12]
 8008334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008338:	3402      	adds	r4, #2
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008400 <_svfiprintf_r+0x1f4>
 8008340:	7821      	ldrb	r1, [r4, #0]
 8008342:	2203      	movs	r2, #3
 8008344:	4650      	mov	r0, sl
 8008346:	f7f7 ff63 	bl	8000210 <memchr>
 800834a:	b138      	cbz	r0, 800835c <_svfiprintf_r+0x150>
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	eba0 000a 	sub.w	r0, r0, sl
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	4082      	lsls	r2, r0
 8008356:	4313      	orrs	r3, r2
 8008358:	3401      	adds	r4, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008360:	4824      	ldr	r0, [pc, #144]	@ (80083f4 <_svfiprintf_r+0x1e8>)
 8008362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008366:	2206      	movs	r2, #6
 8008368:	f7f7 ff52 	bl	8000210 <memchr>
 800836c:	2800      	cmp	r0, #0
 800836e:	d036      	beq.n	80083de <_svfiprintf_r+0x1d2>
 8008370:	4b21      	ldr	r3, [pc, #132]	@ (80083f8 <_svfiprintf_r+0x1ec>)
 8008372:	bb1b      	cbnz	r3, 80083bc <_svfiprintf_r+0x1b0>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	3307      	adds	r3, #7
 8008378:	f023 0307 	bic.w	r3, r3, #7
 800837c:	3308      	adds	r3, #8
 800837e:	9303      	str	r3, [sp, #12]
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	4433      	add	r3, r6
 8008384:	9309      	str	r3, [sp, #36]	@ 0x24
 8008386:	e76a      	b.n	800825e <_svfiprintf_r+0x52>
 8008388:	fb0c 3202 	mla	r2, ip, r2, r3
 800838c:	460c      	mov	r4, r1
 800838e:	2001      	movs	r0, #1
 8008390:	e7a8      	b.n	80082e4 <_svfiprintf_r+0xd8>
 8008392:	2300      	movs	r3, #0
 8008394:	3401      	adds	r4, #1
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	4619      	mov	r1, r3
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4620      	mov	r0, r4
 80083a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a4:	3a30      	subs	r2, #48	@ 0x30
 80083a6:	2a09      	cmp	r2, #9
 80083a8:	d903      	bls.n	80083b2 <_svfiprintf_r+0x1a6>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c6      	beq.n	800833c <_svfiprintf_r+0x130>
 80083ae:	9105      	str	r1, [sp, #20]
 80083b0:	e7c4      	b.n	800833c <_svfiprintf_r+0x130>
 80083b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b6:	4604      	mov	r4, r0
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7f0      	b.n	800839e <_svfiprintf_r+0x192>
 80083bc:	ab03      	add	r3, sp, #12
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <_svfiprintf_r+0x1f0>)
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7fd fe84 	bl	80060d4 <_printf_float>
 80083cc:	1c42      	adds	r2, r0, #1
 80083ce:	4606      	mov	r6, r0
 80083d0:	d1d6      	bne.n	8008380 <_svfiprintf_r+0x174>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	065b      	lsls	r3, r3, #25
 80083d6:	f53f af2d 	bmi.w	8008234 <_svfiprintf_r+0x28>
 80083da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083dc:	e72c      	b.n	8008238 <_svfiprintf_r+0x2c>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <_svfiprintf_r+0x1f0>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7fe f90b 	bl	8006604 <_printf_i>
 80083ee:	e7ed      	b.n	80083cc <_svfiprintf_r+0x1c0>
 80083f0:	08009670 	.word	0x08009670
 80083f4:	0800967a 	.word	0x0800967a
 80083f8:	080060d5 	.word	0x080060d5
 80083fc:	08008155 	.word	0x08008155
 8008400:	08009676 	.word	0x08009676

08008404 <__sflush_r>:
 8008404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	0716      	lsls	r6, r2, #28
 800840e:	4605      	mov	r5, r0
 8008410:	460c      	mov	r4, r1
 8008412:	d454      	bmi.n	80084be <__sflush_r+0xba>
 8008414:	684b      	ldr	r3, [r1, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc02      	bgt.n	8008420 <__sflush_r+0x1c>
 800841a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd48      	ble.n	80084b2 <__sflush_r+0xae>
 8008420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008422:	2e00      	cmp	r6, #0
 8008424:	d045      	beq.n	80084b2 <__sflush_r+0xae>
 8008426:	2300      	movs	r3, #0
 8008428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800842c:	682f      	ldr	r7, [r5, #0]
 800842e:	6a21      	ldr	r1, [r4, #32]
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	d030      	beq.n	8008496 <__sflush_r+0x92>
 8008434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	0759      	lsls	r1, r3, #29
 800843a:	d505      	bpl.n	8008448 <__sflush_r+0x44>
 800843c:	6863      	ldr	r3, [r4, #4]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008442:	b10b      	cbz	r3, 8008448 <__sflush_r+0x44>
 8008444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008446:	1ad2      	subs	r2, r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800844c:	6a21      	ldr	r1, [r4, #32]
 800844e:	4628      	mov	r0, r5
 8008450:	47b0      	blx	r6
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	d106      	bne.n	8008466 <__sflush_r+0x62>
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	291d      	cmp	r1, #29
 800845c:	d82b      	bhi.n	80084b6 <__sflush_r+0xb2>
 800845e:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <__sflush_r+0x104>)
 8008460:	410a      	asrs	r2, r1
 8008462:	07d6      	lsls	r6, r2, #31
 8008464:	d427      	bmi.n	80084b6 <__sflush_r+0xb2>
 8008466:	2200      	movs	r2, #0
 8008468:	6062      	str	r2, [r4, #4]
 800846a:	04d9      	lsls	r1, r3, #19
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	6022      	str	r2, [r4, #0]
 8008470:	d504      	bpl.n	800847c <__sflush_r+0x78>
 8008472:	1c42      	adds	r2, r0, #1
 8008474:	d101      	bne.n	800847a <__sflush_r+0x76>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	b903      	cbnz	r3, 800847c <__sflush_r+0x78>
 800847a:	6560      	str	r0, [r4, #84]	@ 0x54
 800847c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800847e:	602f      	str	r7, [r5, #0]
 8008480:	b1b9      	cbz	r1, 80084b2 <__sflush_r+0xae>
 8008482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008486:	4299      	cmp	r1, r3
 8008488:	d002      	beq.n	8008490 <__sflush_r+0x8c>
 800848a:	4628      	mov	r0, r5
 800848c:	f7ff f9e0 	bl	8007850 <_free_r>
 8008490:	2300      	movs	r3, #0
 8008492:	6363      	str	r3, [r4, #52]	@ 0x34
 8008494:	e00d      	b.n	80084b2 <__sflush_r+0xae>
 8008496:	2301      	movs	r3, #1
 8008498:	4628      	mov	r0, r5
 800849a:	47b0      	blx	r6
 800849c:	4602      	mov	r2, r0
 800849e:	1c50      	adds	r0, r2, #1
 80084a0:	d1c9      	bne.n	8008436 <__sflush_r+0x32>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0c6      	beq.n	8008436 <__sflush_r+0x32>
 80084a8:	2b1d      	cmp	r3, #29
 80084aa:	d001      	beq.n	80084b0 <__sflush_r+0xac>
 80084ac:	2b16      	cmp	r3, #22
 80084ae:	d11e      	bne.n	80084ee <__sflush_r+0xea>
 80084b0:	602f      	str	r7, [r5, #0]
 80084b2:	2000      	movs	r0, #0
 80084b4:	e022      	b.n	80084fc <__sflush_r+0xf8>
 80084b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ba:	b21b      	sxth	r3, r3
 80084bc:	e01b      	b.n	80084f6 <__sflush_r+0xf2>
 80084be:	690f      	ldr	r7, [r1, #16]
 80084c0:	2f00      	cmp	r7, #0
 80084c2:	d0f6      	beq.n	80084b2 <__sflush_r+0xae>
 80084c4:	0793      	lsls	r3, r2, #30
 80084c6:	680e      	ldr	r6, [r1, #0]
 80084c8:	bf08      	it	eq
 80084ca:	694b      	ldreq	r3, [r1, #20]
 80084cc:	600f      	str	r7, [r1, #0]
 80084ce:	bf18      	it	ne
 80084d0:	2300      	movne	r3, #0
 80084d2:	eba6 0807 	sub.w	r8, r6, r7
 80084d6:	608b      	str	r3, [r1, #8]
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	dde9      	ble.n	80084b2 <__sflush_r+0xae>
 80084de:	6a21      	ldr	r1, [r4, #32]
 80084e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084e2:	4643      	mov	r3, r8
 80084e4:	463a      	mov	r2, r7
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b0      	blx	r6
 80084ea:	2800      	cmp	r0, #0
 80084ec:	dc08      	bgt.n	8008500 <__sflush_r+0xfc>
 80084ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	4407      	add	r7, r0
 8008502:	eba8 0800 	sub.w	r8, r8, r0
 8008506:	e7e7      	b.n	80084d8 <__sflush_r+0xd4>
 8008508:	dfbffffe 	.word	0xdfbffffe

0800850c <_fflush_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b913      	cbnz	r3, 800851c <_fflush_r+0x10>
 8008516:	2500      	movs	r5, #0
 8008518:	4628      	mov	r0, r5
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	b118      	cbz	r0, 8008526 <_fflush_r+0x1a>
 800851e:	6a03      	ldr	r3, [r0, #32]
 8008520:	b90b      	cbnz	r3, 8008526 <_fflush_r+0x1a>
 8008522:	f7fe fa1b 	bl	800695c <__sinit>
 8008526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f3      	beq.n	8008516 <_fflush_r+0xa>
 800852e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008530:	07d0      	lsls	r0, r2, #31
 8008532:	d404      	bmi.n	800853e <_fflush_r+0x32>
 8008534:	0599      	lsls	r1, r3, #22
 8008536:	d402      	bmi.n	800853e <_fflush_r+0x32>
 8008538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800853a:	f7fe fb3a 	bl	8006bb2 <__retarget_lock_acquire_recursive>
 800853e:	4628      	mov	r0, r5
 8008540:	4621      	mov	r1, r4
 8008542:	f7ff ff5f 	bl	8008404 <__sflush_r>
 8008546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008548:	07da      	lsls	r2, r3, #31
 800854a:	4605      	mov	r5, r0
 800854c:	d4e4      	bmi.n	8008518 <_fflush_r+0xc>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	059b      	lsls	r3, r3, #22
 8008552:	d4e1      	bmi.n	8008518 <_fflush_r+0xc>
 8008554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008556:	f7fe fb2d 	bl	8006bb4 <__retarget_lock_release_recursive>
 800855a:	e7dd      	b.n	8008518 <_fflush_r+0xc>

0800855c <memmove>:
 800855c:	4288      	cmp	r0, r1
 800855e:	b510      	push	{r4, lr}
 8008560:	eb01 0402 	add.w	r4, r1, r2
 8008564:	d902      	bls.n	800856c <memmove+0x10>
 8008566:	4284      	cmp	r4, r0
 8008568:	4623      	mov	r3, r4
 800856a:	d807      	bhi.n	800857c <memmove+0x20>
 800856c:	1e43      	subs	r3, r0, #1
 800856e:	42a1      	cmp	r1, r4
 8008570:	d008      	beq.n	8008584 <memmove+0x28>
 8008572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800857a:	e7f8      	b.n	800856e <memmove+0x12>
 800857c:	4402      	add	r2, r0
 800857e:	4601      	mov	r1, r0
 8008580:	428a      	cmp	r2, r1
 8008582:	d100      	bne.n	8008586 <memmove+0x2a>
 8008584:	bd10      	pop	{r4, pc}
 8008586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800858a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800858e:	e7f7      	b.n	8008580 <memmove+0x24>

08008590 <_sbrk_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d06      	ldr	r5, [pc, #24]	@ (80085ac <_sbrk_r+0x1c>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f9 fd9e 	bl	80020dc <_sbrk>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_sbrk_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_sbrk_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	2000940c 	.word	0x2000940c

080085b0 <memcpy>:
 80085b0:	440a      	add	r2, r1
 80085b2:	4291      	cmp	r1, r2
 80085b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085b8:	d100      	bne.n	80085bc <memcpy+0xc>
 80085ba:	4770      	bx	lr
 80085bc:	b510      	push	{r4, lr}
 80085be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085c6:	4291      	cmp	r1, r2
 80085c8:	d1f9      	bne.n	80085be <memcpy+0xe>
 80085ca:	bd10      	pop	{r4, pc}

080085cc <__assert_func>:
 80085cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ce:	4614      	mov	r4, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <__assert_func+0x2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4605      	mov	r5, r0
 80085d8:	68d8      	ldr	r0, [r3, #12]
 80085da:	b954      	cbnz	r4, 80085f2 <__assert_func+0x26>
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <__assert_func+0x30>)
 80085de:	461c      	mov	r4, r3
 80085e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085e4:	9100      	str	r1, [sp, #0]
 80085e6:	462b      	mov	r3, r5
 80085e8:	4905      	ldr	r1, [pc, #20]	@ (8008600 <__assert_func+0x34>)
 80085ea:	f000 f86f 	bl	80086cc <fiprintf>
 80085ee:	f000 f87f 	bl	80086f0 <abort>
 80085f2:	4b04      	ldr	r3, [pc, #16]	@ (8008604 <__assert_func+0x38>)
 80085f4:	e7f4      	b.n	80085e0 <__assert_func+0x14>
 80085f6:	bf00      	nop
 80085f8:	20000018 	.word	0x20000018
 80085fc:	080096c6 	.word	0x080096c6
 8008600:	08009698 	.word	0x08009698
 8008604:	0800968b 	.word	0x0800968b

08008608 <_calloc_r>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	fba1 5402 	umull	r5, r4, r1, r2
 800860e:	b93c      	cbnz	r4, 8008620 <_calloc_r+0x18>
 8008610:	4629      	mov	r1, r5
 8008612:	f7ff f991 	bl	8007938 <_malloc_r>
 8008616:	4606      	mov	r6, r0
 8008618:	b928      	cbnz	r0, 8008626 <_calloc_r+0x1e>
 800861a:	2600      	movs	r6, #0
 800861c:	4630      	mov	r0, r6
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	220c      	movs	r2, #12
 8008622:	6002      	str	r2, [r0, #0]
 8008624:	e7f9      	b.n	800861a <_calloc_r+0x12>
 8008626:	462a      	mov	r2, r5
 8008628:	4621      	mov	r1, r4
 800862a:	f7fe fa44 	bl	8006ab6 <memset>
 800862e:	e7f5      	b.n	800861c <_calloc_r+0x14>

08008630 <__ascii_mbtowc>:
 8008630:	b082      	sub	sp, #8
 8008632:	b901      	cbnz	r1, 8008636 <__ascii_mbtowc+0x6>
 8008634:	a901      	add	r1, sp, #4
 8008636:	b142      	cbz	r2, 800864a <__ascii_mbtowc+0x1a>
 8008638:	b14b      	cbz	r3, 800864e <__ascii_mbtowc+0x1e>
 800863a:	7813      	ldrb	r3, [r2, #0]
 800863c:	600b      	str	r3, [r1, #0]
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	1e10      	subs	r0, r2, #0
 8008642:	bf18      	it	ne
 8008644:	2001      	movne	r0, #1
 8008646:	b002      	add	sp, #8
 8008648:	4770      	bx	lr
 800864a:	4610      	mov	r0, r2
 800864c:	e7fb      	b.n	8008646 <__ascii_mbtowc+0x16>
 800864e:	f06f 0001 	mvn.w	r0, #1
 8008652:	e7f8      	b.n	8008646 <__ascii_mbtowc+0x16>

08008654 <_realloc_r>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4680      	mov	r8, r0
 800865a:	4615      	mov	r5, r2
 800865c:	460c      	mov	r4, r1
 800865e:	b921      	cbnz	r1, 800866a <_realloc_r+0x16>
 8008660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	4611      	mov	r1, r2
 8008666:	f7ff b967 	b.w	8007938 <_malloc_r>
 800866a:	b92a      	cbnz	r2, 8008678 <_realloc_r+0x24>
 800866c:	f7ff f8f0 	bl	8007850 <_free_r>
 8008670:	2400      	movs	r4, #0
 8008672:	4620      	mov	r0, r4
 8008674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008678:	f000 f841 	bl	80086fe <_malloc_usable_size_r>
 800867c:	4285      	cmp	r5, r0
 800867e:	4606      	mov	r6, r0
 8008680:	d802      	bhi.n	8008688 <_realloc_r+0x34>
 8008682:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008686:	d8f4      	bhi.n	8008672 <_realloc_r+0x1e>
 8008688:	4629      	mov	r1, r5
 800868a:	4640      	mov	r0, r8
 800868c:	f7ff f954 	bl	8007938 <_malloc_r>
 8008690:	4607      	mov	r7, r0
 8008692:	2800      	cmp	r0, #0
 8008694:	d0ec      	beq.n	8008670 <_realloc_r+0x1c>
 8008696:	42b5      	cmp	r5, r6
 8008698:	462a      	mov	r2, r5
 800869a:	4621      	mov	r1, r4
 800869c:	bf28      	it	cs
 800869e:	4632      	movcs	r2, r6
 80086a0:	f7ff ff86 	bl	80085b0 <memcpy>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff f8d2 	bl	8007850 <_free_r>
 80086ac:	463c      	mov	r4, r7
 80086ae:	e7e0      	b.n	8008672 <_realloc_r+0x1e>

080086b0 <__ascii_wctomb>:
 80086b0:	4603      	mov	r3, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	b141      	cbz	r1, 80086c8 <__ascii_wctomb+0x18>
 80086b6:	2aff      	cmp	r2, #255	@ 0xff
 80086b8:	d904      	bls.n	80086c4 <__ascii_wctomb+0x14>
 80086ba:	228a      	movs	r2, #138	@ 0x8a
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f04f 30ff 	mov.w	r0, #4294967295
 80086c2:	4770      	bx	lr
 80086c4:	700a      	strb	r2, [r1, #0]
 80086c6:	2001      	movs	r0, #1
 80086c8:	4770      	bx	lr
	...

080086cc <fiprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b503      	push	{r0, r1, lr}
 80086d0:	4601      	mov	r1, r0
 80086d2:	ab03      	add	r3, sp, #12
 80086d4:	4805      	ldr	r0, [pc, #20]	@ (80086ec <fiprintf+0x20>)
 80086d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f000 f83f 	bl	8008760 <_vfiprintf_r>
 80086e2:	b002      	add	sp, #8
 80086e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e8:	b003      	add	sp, #12
 80086ea:	4770      	bx	lr
 80086ec:	20000018 	.word	0x20000018

080086f0 <abort>:
 80086f0:	b508      	push	{r3, lr}
 80086f2:	2006      	movs	r0, #6
 80086f4:	f000 fa08 	bl	8008b08 <raise>
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7f9 fc77 	bl	8001fec <_exit>

080086fe <_malloc_usable_size_r>:
 80086fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008702:	1f18      	subs	r0, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbc      	itt	lt
 8008708:	580b      	ldrlt	r3, [r1, r0]
 800870a:	18c0      	addlt	r0, r0, r3
 800870c:	4770      	bx	lr

0800870e <__sfputc_r>:
 800870e:	6893      	ldr	r3, [r2, #8]
 8008710:	3b01      	subs	r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	b410      	push	{r4}
 8008716:	6093      	str	r3, [r2, #8]
 8008718:	da08      	bge.n	800872c <__sfputc_r+0x1e>
 800871a:	6994      	ldr	r4, [r2, #24]
 800871c:	42a3      	cmp	r3, r4
 800871e:	db01      	blt.n	8008724 <__sfputc_r+0x16>
 8008720:	290a      	cmp	r1, #10
 8008722:	d103      	bne.n	800872c <__sfputc_r+0x1e>
 8008724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008728:	f000 b932 	b.w	8008990 <__swbuf_r>
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	1c58      	adds	r0, r3, #1
 8008730:	6010      	str	r0, [r2, #0]
 8008732:	7019      	strb	r1, [r3, #0]
 8008734:	4608      	mov	r0, r1
 8008736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873a:	4770      	bx	lr

0800873c <__sfputs_r>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	4606      	mov	r6, r0
 8008740:	460f      	mov	r7, r1
 8008742:	4614      	mov	r4, r2
 8008744:	18d5      	adds	r5, r2, r3
 8008746:	42ac      	cmp	r4, r5
 8008748:	d101      	bne.n	800874e <__sfputs_r+0x12>
 800874a:	2000      	movs	r0, #0
 800874c:	e007      	b.n	800875e <__sfputs_r+0x22>
 800874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008752:	463a      	mov	r2, r7
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ffda 	bl	800870e <__sfputc_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d1f3      	bne.n	8008746 <__sfputs_r+0xa>
 800875e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008760 <_vfiprintf_r>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	460d      	mov	r5, r1
 8008766:	b09d      	sub	sp, #116	@ 0x74
 8008768:	4614      	mov	r4, r2
 800876a:	4698      	mov	r8, r3
 800876c:	4606      	mov	r6, r0
 800876e:	b118      	cbz	r0, 8008778 <_vfiprintf_r+0x18>
 8008770:	6a03      	ldr	r3, [r0, #32]
 8008772:	b90b      	cbnz	r3, 8008778 <_vfiprintf_r+0x18>
 8008774:	f7fe f8f2 	bl	800695c <__sinit>
 8008778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800877a:	07d9      	lsls	r1, r3, #31
 800877c:	d405      	bmi.n	800878a <_vfiprintf_r+0x2a>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	059a      	lsls	r2, r3, #22
 8008782:	d402      	bmi.n	800878a <_vfiprintf_r+0x2a>
 8008784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008786:	f7fe fa14 	bl	8006bb2 <__retarget_lock_acquire_recursive>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	071b      	lsls	r3, r3, #28
 800878e:	d501      	bpl.n	8008794 <_vfiprintf_r+0x34>
 8008790:	692b      	ldr	r3, [r5, #16]
 8008792:	b99b      	cbnz	r3, 80087bc <_vfiprintf_r+0x5c>
 8008794:	4629      	mov	r1, r5
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f938 	bl	8008a0c <__swsetup_r>
 800879c:	b170      	cbz	r0, 80087bc <_vfiprintf_r+0x5c>
 800879e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a0:	07dc      	lsls	r4, r3, #31
 80087a2:	d504      	bpl.n	80087ae <_vfiprintf_r+0x4e>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b01d      	add	sp, #116	@ 0x74
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	0598      	lsls	r0, r3, #22
 80087b2:	d4f7      	bmi.n	80087a4 <_vfiprintf_r+0x44>
 80087b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087b6:	f7fe f9fd 	bl	8006bb4 <__retarget_lock_release_recursive>
 80087ba:	e7f3      	b.n	80087a4 <_vfiprintf_r+0x44>
 80087bc:	2300      	movs	r3, #0
 80087be:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c0:	2320      	movs	r3, #32
 80087c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ca:	2330      	movs	r3, #48	@ 0x30
 80087cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800897c <_vfiprintf_r+0x21c>
 80087d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087d4:	f04f 0901 	mov.w	r9, #1
 80087d8:	4623      	mov	r3, r4
 80087da:	469a      	mov	sl, r3
 80087dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e0:	b10a      	cbz	r2, 80087e6 <_vfiprintf_r+0x86>
 80087e2:	2a25      	cmp	r2, #37	@ 0x25
 80087e4:	d1f9      	bne.n	80087da <_vfiprintf_r+0x7a>
 80087e6:	ebba 0b04 	subs.w	fp, sl, r4
 80087ea:	d00b      	beq.n	8008804 <_vfiprintf_r+0xa4>
 80087ec:	465b      	mov	r3, fp
 80087ee:	4622      	mov	r2, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ffa2 	bl	800873c <__sfputs_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	f000 80a7 	beq.w	800894c <_vfiprintf_r+0x1ec>
 80087fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008800:	445a      	add	r2, fp
 8008802:	9209      	str	r2, [sp, #36]	@ 0x24
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 809f 	beq.w	800894c <_vfiprintf_r+0x1ec>
 800880e:	2300      	movs	r3, #0
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008818:	f10a 0a01 	add.w	sl, sl, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008824:	931a      	str	r3, [sp, #104]	@ 0x68
 8008826:	4654      	mov	r4, sl
 8008828:	2205      	movs	r2, #5
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4853      	ldr	r0, [pc, #332]	@ (800897c <_vfiprintf_r+0x21c>)
 8008830:	f7f7 fcee 	bl	8000210 <memchr>
 8008834:	9a04      	ldr	r2, [sp, #16]
 8008836:	b9d8      	cbnz	r0, 8008870 <_vfiprintf_r+0x110>
 8008838:	06d1      	lsls	r1, r2, #27
 800883a:	bf44      	itt	mi
 800883c:	2320      	movmi	r3, #32
 800883e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008842:	0713      	lsls	r3, r2, #28
 8008844:	bf44      	itt	mi
 8008846:	232b      	movmi	r3, #43	@ 0x2b
 8008848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884c:	f89a 3000 	ldrb.w	r3, [sl]
 8008850:	2b2a      	cmp	r3, #42	@ 0x2a
 8008852:	d015      	beq.n	8008880 <_vfiprintf_r+0x120>
 8008854:	9a07      	ldr	r2, [sp, #28]
 8008856:	4654      	mov	r4, sl
 8008858:	2000      	movs	r0, #0
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	4621      	mov	r1, r4
 8008860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008864:	3b30      	subs	r3, #48	@ 0x30
 8008866:	2b09      	cmp	r3, #9
 8008868:	d94b      	bls.n	8008902 <_vfiprintf_r+0x1a2>
 800886a:	b1b0      	cbz	r0, 800889a <_vfiprintf_r+0x13a>
 800886c:	9207      	str	r2, [sp, #28]
 800886e:	e014      	b.n	800889a <_vfiprintf_r+0x13a>
 8008870:	eba0 0308 	sub.w	r3, r0, r8
 8008874:	fa09 f303 	lsl.w	r3, r9, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	46a2      	mov	sl, r4
 800887e:	e7d2      	b.n	8008826 <_vfiprintf_r+0xc6>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	1d19      	adds	r1, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9103      	str	r1, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfbb      	ittet	lt
 800888c:	425b      	neglt	r3, r3
 800888e:	f042 0202 	orrlt.w	r2, r2, #2
 8008892:	9307      	strge	r3, [sp, #28]
 8008894:	9307      	strlt	r3, [sp, #28]
 8008896:	bfb8      	it	lt
 8008898:	9204      	strlt	r2, [sp, #16]
 800889a:	7823      	ldrb	r3, [r4, #0]
 800889c:	2b2e      	cmp	r3, #46	@ 0x2e
 800889e:	d10a      	bne.n	80088b6 <_vfiprintf_r+0x156>
 80088a0:	7863      	ldrb	r3, [r4, #1]
 80088a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a4:	d132      	bne.n	800890c <_vfiprintf_r+0x1ac>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9203      	str	r2, [sp, #12]
 80088ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b2:	3402      	adds	r4, #2
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800898c <_vfiprintf_r+0x22c>
 80088ba:	7821      	ldrb	r1, [r4, #0]
 80088bc:	2203      	movs	r2, #3
 80088be:	4650      	mov	r0, sl
 80088c0:	f7f7 fca6 	bl	8000210 <memchr>
 80088c4:	b138      	cbz	r0, 80088d6 <_vfiprintf_r+0x176>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	eba0 000a 	sub.w	r0, r0, sl
 80088cc:	2240      	movs	r2, #64	@ 0x40
 80088ce:	4082      	lsls	r2, r0
 80088d0:	4313      	orrs	r3, r2
 80088d2:	3401      	adds	r4, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4829      	ldr	r0, [pc, #164]	@ (8008980 <_vfiprintf_r+0x220>)
 80088dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088e0:	2206      	movs	r2, #6
 80088e2:	f7f7 fc95 	bl	8000210 <memchr>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d03f      	beq.n	800896a <_vfiprintf_r+0x20a>
 80088ea:	4b26      	ldr	r3, [pc, #152]	@ (8008984 <_vfiprintf_r+0x224>)
 80088ec:	bb1b      	cbnz	r3, 8008936 <_vfiprintf_r+0x1d6>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	3308      	adds	r3, #8
 80088f8:	9303      	str	r3, [sp, #12]
 80088fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fc:	443b      	add	r3, r7
 80088fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008900:	e76a      	b.n	80087d8 <_vfiprintf_r+0x78>
 8008902:	fb0c 3202 	mla	r2, ip, r2, r3
 8008906:	460c      	mov	r4, r1
 8008908:	2001      	movs	r0, #1
 800890a:	e7a8      	b.n	800885e <_vfiprintf_r+0xfe>
 800890c:	2300      	movs	r3, #0
 800890e:	3401      	adds	r4, #1
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0c0a 	mov.w	ip, #10
 8008918:	4620      	mov	r0, r4
 800891a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891e:	3a30      	subs	r2, #48	@ 0x30
 8008920:	2a09      	cmp	r2, #9
 8008922:	d903      	bls.n	800892c <_vfiprintf_r+0x1cc>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0c6      	beq.n	80088b6 <_vfiprintf_r+0x156>
 8008928:	9105      	str	r1, [sp, #20]
 800892a:	e7c4      	b.n	80088b6 <_vfiprintf_r+0x156>
 800892c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008930:	4604      	mov	r4, r0
 8008932:	2301      	movs	r3, #1
 8008934:	e7f0      	b.n	8008918 <_vfiprintf_r+0x1b8>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <_vfiprintf_r+0x228>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4630      	mov	r0, r6
 8008942:	f7fd fbc7 	bl	80060d4 <_printf_float>
 8008946:	4607      	mov	r7, r0
 8008948:	1c78      	adds	r0, r7, #1
 800894a:	d1d6      	bne.n	80088fa <_vfiprintf_r+0x19a>
 800894c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	d405      	bmi.n	800895e <_vfiprintf_r+0x1fe>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	059a      	lsls	r2, r3, #22
 8008956:	d402      	bmi.n	800895e <_vfiprintf_r+0x1fe>
 8008958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800895a:	f7fe f92b 	bl	8006bb4 <__retarget_lock_release_recursive>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	065b      	lsls	r3, r3, #25
 8008962:	f53f af1f 	bmi.w	80087a4 <_vfiprintf_r+0x44>
 8008966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008968:	e71e      	b.n	80087a8 <_vfiprintf_r+0x48>
 800896a:	ab03      	add	r3, sp, #12
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462a      	mov	r2, r5
 8008970:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <_vfiprintf_r+0x228>)
 8008972:	a904      	add	r1, sp, #16
 8008974:	4630      	mov	r0, r6
 8008976:	f7fd fe45 	bl	8006604 <_printf_i>
 800897a:	e7e4      	b.n	8008946 <_vfiprintf_r+0x1e6>
 800897c:	08009670 	.word	0x08009670
 8008980:	0800967a 	.word	0x0800967a
 8008984:	080060d5 	.word	0x080060d5
 8008988:	0800873d 	.word	0x0800873d
 800898c:	08009676 	.word	0x08009676

08008990 <__swbuf_r>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	460e      	mov	r6, r1
 8008994:	4614      	mov	r4, r2
 8008996:	4605      	mov	r5, r0
 8008998:	b118      	cbz	r0, 80089a2 <__swbuf_r+0x12>
 800899a:	6a03      	ldr	r3, [r0, #32]
 800899c:	b90b      	cbnz	r3, 80089a2 <__swbuf_r+0x12>
 800899e:	f7fd ffdd 	bl	800695c <__sinit>
 80089a2:	69a3      	ldr	r3, [r4, #24]
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	071a      	lsls	r2, r3, #28
 80089aa:	d501      	bpl.n	80089b0 <__swbuf_r+0x20>
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	b943      	cbnz	r3, 80089c2 <__swbuf_r+0x32>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f82a 	bl	8008a0c <__swsetup_r>
 80089b8:	b118      	cbz	r0, 80089c2 <__swbuf_r+0x32>
 80089ba:	f04f 37ff 	mov.w	r7, #4294967295
 80089be:	4638      	mov	r0, r7
 80089c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	1a98      	subs	r0, r3, r2
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	b2f6      	uxtb	r6, r6
 80089cc:	4283      	cmp	r3, r0
 80089ce:	4637      	mov	r7, r6
 80089d0:	dc05      	bgt.n	80089de <__swbuf_r+0x4e>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7ff fd99 	bl	800850c <_fflush_r>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d1ed      	bne.n	80089ba <__swbuf_r+0x2a>
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	701e      	strb	r6, [r3, #0]
 80089ec:	6962      	ldr	r2, [r4, #20]
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d004      	beq.n	80089fe <__swbuf_r+0x6e>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	07db      	lsls	r3, r3, #31
 80089f8:	d5e1      	bpl.n	80089be <__swbuf_r+0x2e>
 80089fa:	2e0a      	cmp	r6, #10
 80089fc:	d1df      	bne.n	80089be <__swbuf_r+0x2e>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7ff fd83 	bl	800850c <_fflush_r>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0d9      	beq.n	80089be <__swbuf_r+0x2e>
 8008a0a:	e7d6      	b.n	80089ba <__swbuf_r+0x2a>

08008a0c <__swsetup_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4b29      	ldr	r3, [pc, #164]	@ (8008ab4 <__swsetup_r+0xa8>)
 8008a10:	4605      	mov	r5, r0
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	460c      	mov	r4, r1
 8008a16:	b118      	cbz	r0, 8008a20 <__swsetup_r+0x14>
 8008a18:	6a03      	ldr	r3, [r0, #32]
 8008a1a:	b90b      	cbnz	r3, 8008a20 <__swsetup_r+0x14>
 8008a1c:	f7fd ff9e 	bl	800695c <__sinit>
 8008a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a24:	0719      	lsls	r1, r3, #28
 8008a26:	d422      	bmi.n	8008a6e <__swsetup_r+0x62>
 8008a28:	06da      	lsls	r2, r3, #27
 8008a2a:	d407      	bmi.n	8008a3c <__swsetup_r+0x30>
 8008a2c:	2209      	movs	r2, #9
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	e033      	b.n	8008aa4 <__swsetup_r+0x98>
 8008a3c:	0758      	lsls	r0, r3, #29
 8008a3e:	d512      	bpl.n	8008a66 <__swsetup_r+0x5a>
 8008a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a42:	b141      	cbz	r1, 8008a56 <__swsetup_r+0x4a>
 8008a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d002      	beq.n	8008a52 <__swsetup_r+0x46>
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f7fe feff 	bl	8007850 <_free_r>
 8008a52:	2300      	movs	r3, #0
 8008a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f043 0308 	orr.w	r3, r3, #8
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	b94b      	cbnz	r3, 8008a86 <__swsetup_r+0x7a>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7c:	d003      	beq.n	8008a86 <__swsetup_r+0x7a>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 f883 	bl	8008b8c <__smakebuf_r>
 8008a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8a:	f013 0201 	ands.w	r2, r3, #1
 8008a8e:	d00a      	beq.n	8008aa6 <__swsetup_r+0x9a>
 8008a90:	2200      	movs	r2, #0
 8008a92:	60a2      	str	r2, [r4, #8]
 8008a94:	6962      	ldr	r2, [r4, #20]
 8008a96:	4252      	negs	r2, r2
 8008a98:	61a2      	str	r2, [r4, #24]
 8008a9a:	6922      	ldr	r2, [r4, #16]
 8008a9c:	b942      	cbnz	r2, 8008ab0 <__swsetup_r+0xa4>
 8008a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aa2:	d1c5      	bne.n	8008a30 <__swsetup_r+0x24>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	0799      	lsls	r1, r3, #30
 8008aa8:	bf58      	it	pl
 8008aaa:	6962      	ldrpl	r2, [r4, #20]
 8008aac:	60a2      	str	r2, [r4, #8]
 8008aae:	e7f4      	b.n	8008a9a <__swsetup_r+0x8e>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e7f7      	b.n	8008aa4 <__swsetup_r+0x98>
 8008ab4:	20000018 	.word	0x20000018

08008ab8 <_raise_r>:
 8008ab8:	291f      	cmp	r1, #31
 8008aba:	b538      	push	{r3, r4, r5, lr}
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	d904      	bls.n	8008acc <_raise_r+0x14>
 8008ac2:	2316      	movs	r3, #22
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ace:	b112      	cbz	r2, 8008ad6 <_raise_r+0x1e>
 8008ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad4:	b94b      	cbnz	r3, 8008aea <_raise_r+0x32>
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f830 	bl	8008b3c <_getpid_r>
 8008adc:	4622      	mov	r2, r4
 8008ade:	4601      	mov	r1, r0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae6:	f000 b817 	b.w	8008b18 <_kill_r>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d00a      	beq.n	8008b04 <_raise_r+0x4c>
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	d103      	bne.n	8008afa <_raise_r+0x42>
 8008af2:	2316      	movs	r3, #22
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	2001      	movs	r0, #1
 8008af8:	e7e7      	b.n	8008aca <_raise_r+0x12>
 8008afa:	2100      	movs	r1, #0
 8008afc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b00:	4620      	mov	r0, r4
 8008b02:	4798      	blx	r3
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7e0      	b.n	8008aca <_raise_r+0x12>

08008b08 <raise>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <raise+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f7ff bfd3 	b.w	8008ab8 <_raise_r>
 8008b12:	bf00      	nop
 8008b14:	20000018 	.word	0x20000018

08008b18 <_kill_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_kill_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f7f9 fa51 	bl	8001fcc <_kill>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_kill_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_kill_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	2000940c 	.word	0x2000940c

08008b3c <_getpid_r>:
 8008b3c:	f7f9 ba3e 	b.w	8001fbc <_getpid>

08008b40 <__swhatbuf_r>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	b096      	sub	sp, #88	@ 0x58
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	461e      	mov	r6, r3
 8008b50:	da0d      	bge.n	8008b6e <__swhatbuf_r+0x2e>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2340      	movne	r3, #64	@ 0x40
 8008b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b64:	2000      	movs	r0, #0
 8008b66:	6031      	str	r1, [r6, #0]
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	b016      	add	sp, #88	@ 0x58
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f000 f848 	bl	8008c04 <_fstat_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	dbec      	blt.n	8008b52 <__swhatbuf_r+0x12>
 8008b78:	9901      	ldr	r1, [sp, #4]
 8008b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b82:	4259      	negs	r1, r3
 8008b84:	4159      	adcs	r1, r3
 8008b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b8a:	e7eb      	b.n	8008b64 <__swhatbuf_r+0x24>

08008b8c <__smakebuf_r>:
 8008b8c:	898b      	ldrh	r3, [r1, #12]
 8008b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b90:	079d      	lsls	r5, r3, #30
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	d507      	bpl.n	8008ba8 <__smakebuf_r+0x1c>
 8008b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	6163      	str	r3, [r4, #20]
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba8:	ab01      	add	r3, sp, #4
 8008baa:	466a      	mov	r2, sp
 8008bac:	f7ff ffc8 	bl	8008b40 <__swhatbuf_r>
 8008bb0:	9f00      	ldr	r7, [sp, #0]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7fe febe 	bl	8007938 <_malloc_r>
 8008bbc:	b948      	cbnz	r0, 8008bd2 <__smakebuf_r+0x46>
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d4ee      	bmi.n	8008ba4 <__smakebuf_r+0x18>
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	f043 0302 	orr.w	r3, r3, #2
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	e7e2      	b.n	8008b98 <__smakebuf_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	6020      	str	r0, [r4, #0]
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008be2:	b15b      	cbz	r3, 8008bfc <__smakebuf_r+0x70>
 8008be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be8:	4630      	mov	r0, r6
 8008bea:	f000 f81d 	bl	8008c28 <_isatty_r>
 8008bee:	b128      	cbz	r0, 8008bfc <__smakebuf_r+0x70>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	431d      	orrs	r5, r3
 8008c00:	81a5      	strh	r5, [r4, #12]
 8008c02:	e7cf      	b.n	8008ba4 <__smakebuf_r+0x18>

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	@ (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7f9 fa3b 	bl	800208c <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	2000940c 	.word	0x2000940c

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	@ (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f9 fa3a 	bl	80020ac <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	2000940c 	.word	0x2000940c

08008c48 <log10>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	ed2d 8b02 	vpush	{d8}
 8008c4e:	ec55 4b10 	vmov	r4, r5, d0
 8008c52:	f000 f949 	bl	8008ee8 <__ieee754_log10>
 8008c56:	4622      	mov	r2, r4
 8008c58:	462b      	mov	r3, r5
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	eeb0 8a40 	vmov.f32	s16, s0
 8008c62:	eef0 8a60 	vmov.f32	s17, s1
 8008c66:	f7f7 ff81 	bl	8000b6c <__aeabi_dcmpun>
 8008c6a:	b998      	cbnz	r0, 8008c94 <log10+0x4c>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 ff5c 	bl	8000b30 <__aeabi_dcmple>
 8008c78:	b160      	cbz	r0, 8008c94 <log10+0x4c>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8008c86:	b160      	cbz	r0, 8008ca2 <log10+0x5a>
 8008c88:	f7fd ff68 	bl	8006b5c <__errno>
 8008c8c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008cb8 <log10+0x70>
 8008c90:	2322      	movs	r3, #34	@ 0x22
 8008c92:	6003      	str	r3, [r0, #0]
 8008c94:	eeb0 0a48 	vmov.f32	s0, s16
 8008c98:	eef0 0a68 	vmov.f32	s1, s17
 8008c9c:	ecbd 8b02 	vpop	{d8}
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	f7fd ff5b 	bl	8006b5c <__errno>
 8008ca6:	ecbd 8b02 	vpop	{d8}
 8008caa:	2321      	movs	r3, #33	@ 0x21
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb2:	4803      	ldr	r0, [pc, #12]	@ (8008cc0 <log10+0x78>)
 8008cb4:	f000 b834 	b.w	8008d20 <nan>
 8008cb8:	00000000 	.word	0x00000000
 8008cbc:	fff00000 	.word	0xfff00000
 8008cc0:	080096c6 	.word	0x080096c6

08008cc4 <sqrt>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	ed2d 8b02 	vpush	{d8}
 8008cca:	ec55 4b10 	vmov	r4, r5, d0
 8008cce:	f000 f82f 	bl	8008d30 <__ieee754_sqrt>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	eeb0 8a40 	vmov.f32	s16, s0
 8008cde:	eef0 8a60 	vmov.f32	s17, s1
 8008ce2:	f7f7 ff43 	bl	8000b6c <__aeabi_dcmpun>
 8008ce6:	b990      	cbnz	r0, 8008d0e <sqrt+0x4a>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 ff14 	bl	8000b1c <__aeabi_dcmplt>
 8008cf4:	b158      	cbz	r0, 8008d0e <sqrt+0x4a>
 8008cf6:	f7fd ff31 	bl	8006b5c <__errno>
 8008cfa:	2321      	movs	r3, #33	@ 0x21
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7f7 fdc1 	bl	800088c <__aeabi_ddiv>
 8008d0a:	ec41 0b18 	vmov	d8, r0, r1
 8008d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8008d12:	eef0 0a68 	vmov.f32	s1, s17
 8008d16:	ecbd 8b02 	vpop	{d8}
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	0000      	movs	r0, r0
	...

08008d20 <nan>:
 8008d20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d28 <nan+0x8>
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	7ff80000 	.word	0x7ff80000

08008d30 <__ieee754_sqrt>:
 8008d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4a68      	ldr	r2, [pc, #416]	@ (8008ed8 <__ieee754_sqrt+0x1a8>)
 8008d36:	ec55 4b10 	vmov	r4, r5, d0
 8008d3a:	43aa      	bics	r2, r5
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	4621      	mov	r1, r4
 8008d40:	d110      	bne.n	8008d64 <__ieee754_sqrt+0x34>
 8008d42:	4622      	mov	r2, r4
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7f7 fc76 	bl	8000638 <__aeabi_dmul>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4620      	mov	r0, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	f7f7 faba 	bl	80002cc <__adddf3>
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	ec45 4b10 	vmov	d0, r4, r5
 8008d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	dc0e      	bgt.n	8008d86 <__ieee754_sqrt+0x56>
 8008d68:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008d6c:	4322      	orrs	r2, r4
 8008d6e:	d0f5      	beq.n	8008d5c <__ieee754_sqrt+0x2c>
 8008d70:	b19d      	cbz	r5, 8008d9a <__ieee754_sqrt+0x6a>
 8008d72:	4622      	mov	r2, r4
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 faa6 	bl	80002c8 <__aeabi_dsub>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	f7f7 fd84 	bl	800088c <__aeabi_ddiv>
 8008d84:	e7e8      	b.n	8008d58 <__ieee754_sqrt+0x28>
 8008d86:	152a      	asrs	r2, r5, #20
 8008d88:	d115      	bne.n	8008db6 <__ieee754_sqrt+0x86>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e009      	b.n	8008da2 <__ieee754_sqrt+0x72>
 8008d8e:	0acb      	lsrs	r3, r1, #11
 8008d90:	3a15      	subs	r2, #21
 8008d92:	0549      	lsls	r1, r1, #21
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0fa      	beq.n	8008d8e <__ieee754_sqrt+0x5e>
 8008d98:	e7f7      	b.n	8008d8a <__ieee754_sqrt+0x5a>
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	e7fa      	b.n	8008d94 <__ieee754_sqrt+0x64>
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	3001      	adds	r0, #1
 8008da2:	02dc      	lsls	r4, r3, #11
 8008da4:	d5fb      	bpl.n	8008d9e <__ieee754_sqrt+0x6e>
 8008da6:	1e44      	subs	r4, r0, #1
 8008da8:	1b12      	subs	r2, r2, r4
 8008daa:	f1c0 0420 	rsb	r4, r0, #32
 8008dae:	fa21 f404 	lsr.w	r4, r1, r4
 8008db2:	4323      	orrs	r3, r4
 8008db4:	4081      	lsls	r1, r0
 8008db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dc2:	07d2      	lsls	r2, r2, #31
 8008dc4:	bf5c      	itt	pl
 8008dc6:	005b      	lslpl	r3, r3, #1
 8008dc8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008dcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dd0:	bf58      	it	pl
 8008dd2:	0049      	lslpl	r1, r1, #1
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008dda:	106d      	asrs	r5, r5, #1
 8008ddc:	0049      	lsls	r1, r1, #1
 8008dde:	2016      	movs	r0, #22
 8008de0:	4632      	mov	r2, r6
 8008de2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008de6:	1917      	adds	r7, r2, r4
 8008de8:	429f      	cmp	r7, r3
 8008dea:	bfde      	ittt	le
 8008dec:	193a      	addle	r2, r7, r4
 8008dee:	1bdb      	suble	r3, r3, r7
 8008df0:	1936      	addle	r6, r6, r4
 8008df2:	0fcf      	lsrs	r7, r1, #31
 8008df4:	3801      	subs	r0, #1
 8008df6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008dfa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008dfe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008e02:	d1f0      	bne.n	8008de6 <__ieee754_sqrt+0xb6>
 8008e04:	4604      	mov	r4, r0
 8008e06:	2720      	movs	r7, #32
 8008e08:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	eb00 0e0c 	add.w	lr, r0, ip
 8008e12:	db02      	blt.n	8008e1a <__ieee754_sqrt+0xea>
 8008e14:	d113      	bne.n	8008e3e <__ieee754_sqrt+0x10e>
 8008e16:	458e      	cmp	lr, r1
 8008e18:	d811      	bhi.n	8008e3e <__ieee754_sqrt+0x10e>
 8008e1a:	f1be 0f00 	cmp.w	lr, #0
 8008e1e:	eb0e 000c 	add.w	r0, lr, ip
 8008e22:	da42      	bge.n	8008eaa <__ieee754_sqrt+0x17a>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	db40      	blt.n	8008eaa <__ieee754_sqrt+0x17a>
 8008e28:	f102 0801 	add.w	r8, r2, #1
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	458e      	cmp	lr, r1
 8008e30:	bf88      	it	hi
 8008e32:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e36:	eba1 010e 	sub.w	r1, r1, lr
 8008e3a:	4464      	add	r4, ip
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008e42:	3f01      	subs	r7, #1
 8008e44:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008e48:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008e50:	d1dc      	bne.n	8008e0c <__ieee754_sqrt+0xdc>
 8008e52:	4319      	orrs	r1, r3
 8008e54:	d01b      	beq.n	8008e8e <__ieee754_sqrt+0x15e>
 8008e56:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008edc <__ieee754_sqrt+0x1ac>
 8008e5a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008ee0 <__ieee754_sqrt+0x1b0>
 8008e5e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e62:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e66:	f7f7 fa2f 	bl	80002c8 <__aeabi_dsub>
 8008e6a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fe5b 	bl	8000b30 <__aeabi_dcmple>
 8008e7a:	b140      	cbz	r0, 8008e8e <__ieee754_sqrt+0x15e>
 8008e7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008e80:	e9da 0100 	ldrd	r0, r1, [sl]
 8008e84:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e88:	d111      	bne.n	8008eae <__ieee754_sqrt+0x17e>
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	463c      	mov	r4, r7
 8008e8e:	1072      	asrs	r2, r6, #1
 8008e90:	0863      	lsrs	r3, r4, #1
 8008e92:	07f1      	lsls	r1, r6, #31
 8008e94:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008e98:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008e9c:	bf48      	it	mi
 8008e9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008ea2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	e756      	b.n	8008d58 <__ieee754_sqrt+0x28>
 8008eaa:	4690      	mov	r8, r2
 8008eac:	e7be      	b.n	8008e2c <__ieee754_sqrt+0xfc>
 8008eae:	f7f7 fa0d 	bl	80002cc <__adddf3>
 8008eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 fe2d 	bl	8000b1c <__aeabi_dcmplt>
 8008ec2:	b120      	cbz	r0, 8008ece <__ieee754_sqrt+0x19e>
 8008ec4:	1ca0      	adds	r0, r4, #2
 8008ec6:	bf08      	it	eq
 8008ec8:	3601      	addeq	r6, #1
 8008eca:	3402      	adds	r4, #2
 8008ecc:	e7df      	b.n	8008e8e <__ieee754_sqrt+0x15e>
 8008ece:	1c63      	adds	r3, r4, #1
 8008ed0:	f023 0401 	bic.w	r4, r3, #1
 8008ed4:	e7db      	b.n	8008e8e <__ieee754_sqrt+0x15e>
 8008ed6:	bf00      	nop
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	200001e0 	.word	0x200001e0
 8008ee0:	200001d8 	.word	0x200001d8
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <__ieee754_log10>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	ec55 4b10 	vmov	r4, r5, d0
 8008ef0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8008ef4:	ed2d 8b02 	vpush	{d8}
 8008ef8:	462b      	mov	r3, r5
 8008efa:	da2e      	bge.n	8008f5a <__ieee754_log10+0x72>
 8008efc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008f00:	4322      	orrs	r2, r4
 8008f02:	d10b      	bne.n	8008f1c <__ieee754_log10+0x34>
 8008f04:	493a      	ldr	r1, [pc, #232]	@ (8008ff0 <__ieee754_log10+0x108>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f7f7 fcbe 	bl	800088c <__aeabi_ddiv>
 8008f10:	ecbd 8b02 	vpop	{d8}
 8008f14:	ec41 0b10 	vmov	d0, r0, r1
 8008f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	da07      	bge.n	8008f30 <__ieee754_log10+0x48>
 8008f20:	4622      	mov	r2, r4
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 f9cf 	bl	80002c8 <__aeabi_dsub>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e7ed      	b.n	8008f0c <__ieee754_log10+0x24>
 8008f30:	4b30      	ldr	r3, [pc, #192]	@ (8008ff4 <__ieee754_log10+0x10c>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 fb7e 	bl	8000638 <__aeabi_dmul>
 8008f3c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	460b      	mov	r3, r1
 8008f46:	492c      	ldr	r1, [pc, #176]	@ (8008ff8 <__ieee754_log10+0x110>)
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	dd08      	ble.n	8008f5e <__ieee754_log10+0x76>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	462b      	mov	r3, r5
 8008f50:	4620      	mov	r0, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	f7f7 f9ba 	bl	80002cc <__adddf3>
 8008f58:	e7da      	b.n	8008f10 <__ieee754_log10+0x28>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	e7f3      	b.n	8008f46 <__ieee754_log10+0x5e>
 8008f5e:	1518      	asrs	r0, r3, #20
 8008f60:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8008f64:	4410      	add	r0, r2
 8008f66:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008f6a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008f6e:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008f72:	f7f7 faf7 	bl	8000564 <__aeabi_i2d>
 8008f76:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8008f7a:	3303      	adds	r3, #3
 8008f7c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008f80:	a315      	add	r3, pc, #84	@ (adr r3, 8008fd8 <__ieee754_log10+0xf0>)
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	ec45 4b18 	vmov	d8, r4, r5
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	f7f7 fb53 	bl	8000638 <__aeabi_dmul>
 8008f92:	eeb0 0a48 	vmov.f32	s0, s16
 8008f96:	eef0 0a68 	vmov.f32	s1, s17
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	f000 f82f 	bl	8009000 <__ieee754_log>
 8008fa2:	a30f      	add	r3, pc, #60	@ (adr r3, 8008fe0 <__ieee754_log10+0xf8>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	ec51 0b10 	vmov	r0, r1, d0
 8008fac:	f7f7 fb44 	bl	8000638 <__aeabi_dmul>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f7f7 f98a 	bl	80002cc <__adddf3>
 8008fb8:	a30b      	add	r3, pc, #44	@ (adr r3, 8008fe8 <__ieee754_log10+0x100>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	e7bf      	b.n	8008f54 <__ieee754_log10+0x6c>
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	11f12b36 	.word	0x11f12b36
 8008fdc:	3d59fef3 	.word	0x3d59fef3
 8008fe0:	1526e50e 	.word	0x1526e50e
 8008fe4:	3fdbcb7b 	.word	0x3fdbcb7b
 8008fe8:	509f6000 	.word	0x509f6000
 8008fec:	3fd34413 	.word	0x3fd34413
 8008ff0:	c3500000 	.word	0xc3500000
 8008ff4:	43500000 	.word	0x43500000
 8008ff8:	7fefffff 	.word	0x7fefffff
 8008ffc:	00000000 	.word	0x00000000

08009000 <__ieee754_log>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	ec51 0b10 	vmov	r0, r1, d0
 8009008:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800900c:	b087      	sub	sp, #28
 800900e:	460d      	mov	r5, r1
 8009010:	da26      	bge.n	8009060 <__ieee754_log+0x60>
 8009012:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009016:	4303      	orrs	r3, r0
 8009018:	4602      	mov	r2, r0
 800901a:	d10a      	bne.n	8009032 <__ieee754_log+0x32>
 800901c:	49ce      	ldr	r1, [pc, #824]	@ (8009358 <__ieee754_log+0x358>)
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	2000      	movs	r0, #0
 8009024:	f7f7 fc32 	bl	800088c <__aeabi_ddiv>
 8009028:	ec41 0b10 	vmov	d0, r0, r1
 800902c:	b007      	add	sp, #28
 800902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009032:	2900      	cmp	r1, #0
 8009034:	da05      	bge.n	8009042 <__ieee754_log+0x42>
 8009036:	460b      	mov	r3, r1
 8009038:	f7f7 f946 	bl	80002c8 <__aeabi_dsub>
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	e7f0      	b.n	8009024 <__ieee754_log+0x24>
 8009042:	4bc6      	ldr	r3, [pc, #792]	@ (800935c <__ieee754_log+0x35c>)
 8009044:	2200      	movs	r2, #0
 8009046:	f7f7 faf7 	bl	8000638 <__aeabi_dmul>
 800904a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800904e:	460d      	mov	r5, r1
 8009050:	4ac3      	ldr	r2, [pc, #780]	@ (8009360 <__ieee754_log+0x360>)
 8009052:	4295      	cmp	r5, r2
 8009054:	dd06      	ble.n	8009064 <__ieee754_log+0x64>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	f7f7 f937 	bl	80002cc <__adddf3>
 800905e:	e7e3      	b.n	8009028 <__ieee754_log+0x28>
 8009060:	2300      	movs	r3, #0
 8009062:	e7f5      	b.n	8009050 <__ieee754_log+0x50>
 8009064:	152c      	asrs	r4, r5, #20
 8009066:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800906a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800906e:	441c      	add	r4, r3
 8009070:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009074:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800907c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009080:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009084:	ea42 0105 	orr.w	r1, r2, r5
 8009088:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800908c:	2200      	movs	r2, #0
 800908e:	4bb5      	ldr	r3, [pc, #724]	@ (8009364 <__ieee754_log+0x364>)
 8009090:	f7f7 f91a 	bl	80002c8 <__aeabi_dsub>
 8009094:	1cab      	adds	r3, r5, #2
 8009096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800909a:	2b02      	cmp	r3, #2
 800909c:	4682      	mov	sl, r0
 800909e:	468b      	mov	fp, r1
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	dc53      	bgt.n	800914e <__ieee754_log+0x14e>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f7f7 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80090ac:	b1d0      	cbz	r0, 80090e4 <__ieee754_log+0xe4>
 80090ae:	2c00      	cmp	r4, #0
 80090b0:	f000 8120 	beq.w	80092f4 <__ieee754_log+0x2f4>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7f7 fa55 	bl	8000564 <__aeabi_i2d>
 80090ba:	a391      	add	r3, pc, #580	@ (adr r3, 8009300 <__ieee754_log+0x300>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4606      	mov	r6, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	f7f7 fab8 	bl	8000638 <__aeabi_dmul>
 80090c8:	a38f      	add	r3, pc, #572	@ (adr r3, 8009308 <__ieee754_log+0x308>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 faaf 	bl	8000638 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	e7ba      	b.n	800905a <__ieee754_log+0x5a>
 80090e4:	a38a      	add	r3, pc, #552	@ (adr r3, 8009310 <__ieee754_log+0x310>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	4650      	mov	r0, sl
 80090ec:	4659      	mov	r1, fp
 80090ee:	f7f7 faa3 	bl	8000638 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	2000      	movs	r0, #0
 80090f8:	499b      	ldr	r1, [pc, #620]	@ (8009368 <__ieee754_log+0x368>)
 80090fa:	f7f7 f8e5 	bl	80002c8 <__aeabi_dsub>
 80090fe:	4652      	mov	r2, sl
 8009100:	4606      	mov	r6, r0
 8009102:	460f      	mov	r7, r1
 8009104:	465b      	mov	r3, fp
 8009106:	4650      	mov	r0, sl
 8009108:	4659      	mov	r1, fp
 800910a:	f7f7 fa95 	bl	8000638 <__aeabi_dmul>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 fa8f 	bl	8000638 <__aeabi_dmul>
 800911a:	4606      	mov	r6, r0
 800911c:	460f      	mov	r7, r1
 800911e:	b914      	cbnz	r4, 8009126 <__ieee754_log+0x126>
 8009120:	4632      	mov	r2, r6
 8009122:	463b      	mov	r3, r7
 8009124:	e0a0      	b.n	8009268 <__ieee754_log+0x268>
 8009126:	4620      	mov	r0, r4
 8009128:	f7f7 fa1c 	bl	8000564 <__aeabi_i2d>
 800912c:	a374      	add	r3, pc, #464	@ (adr r3, 8009300 <__ieee754_log+0x300>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	4680      	mov	r8, r0
 8009134:	4689      	mov	r9, r1
 8009136:	f7f7 fa7f 	bl	8000638 <__aeabi_dmul>
 800913a:	a373      	add	r3, pc, #460	@ (adr r3, 8009308 <__ieee754_log+0x308>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	4604      	mov	r4, r0
 8009142:	460d      	mov	r5, r1
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 fa76 	bl	8000638 <__aeabi_dmul>
 800914c:	e0a5      	b.n	800929a <__ieee754_log+0x29a>
 800914e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009152:	f7f7 f8bb 	bl	80002cc <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4650      	mov	r0, sl
 800915c:	4659      	mov	r1, fp
 800915e:	f7f7 fb95 	bl	800088c <__aeabi_ddiv>
 8009162:	e9cd 0100 	strd	r0, r1, [sp]
 8009166:	4620      	mov	r0, r4
 8009168:	f7f7 f9fc 	bl	8000564 <__aeabi_i2d>
 800916c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f7f7 fa5e 	bl	8000638 <__aeabi_dmul>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009184:	f7f7 fa58 	bl	8000638 <__aeabi_dmul>
 8009188:	a363      	add	r3, pc, #396	@ (adr r3, 8009318 <__ieee754_log+0x318>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	f7f7 fa51 	bl	8000638 <__aeabi_dmul>
 8009196:	a362      	add	r3, pc, #392	@ (adr r3, 8009320 <__ieee754_log+0x320>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 f896 	bl	80002cc <__adddf3>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	f7f7 fa48 	bl	8000638 <__aeabi_dmul>
 80091a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009328 <__ieee754_log+0x328>)
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f7f7 f88d 	bl	80002cc <__adddf3>
 80091b2:	4642      	mov	r2, r8
 80091b4:	464b      	mov	r3, r9
 80091b6:	f7f7 fa3f 	bl	8000638 <__aeabi_dmul>
 80091ba:	a35d      	add	r3, pc, #372	@ (adr r3, 8009330 <__ieee754_log+0x330>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f7f7 f884 	bl	80002cc <__adddf3>
 80091c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c8:	f7f7 fa36 	bl	8000638 <__aeabi_dmul>
 80091cc:	a35a      	add	r3, pc, #360	@ (adr r3, 8009338 <__ieee754_log+0x338>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091d6:	4640      	mov	r0, r8
 80091d8:	4649      	mov	r1, r9
 80091da:	f7f7 fa2d 	bl	8000638 <__aeabi_dmul>
 80091de:	a358      	add	r3, pc, #352	@ (adr r3, 8009340 <__ieee754_log+0x340>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f7f7 f872 	bl	80002cc <__adddf3>
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	f7f7 fa24 	bl	8000638 <__aeabi_dmul>
 80091f0:	a355      	add	r3, pc, #340	@ (adr r3, 8009348 <__ieee754_log+0x348>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 f869 	bl	80002cc <__adddf3>
 80091fa:	4642      	mov	r2, r8
 80091fc:	464b      	mov	r3, r9
 80091fe:	f7f7 fa1b 	bl	8000638 <__aeabi_dmul>
 8009202:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800920e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009212:	f7f7 f85b 	bl	80002cc <__adddf3>
 8009216:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800921a:	3551      	adds	r5, #81	@ 0x51
 800921c:	4335      	orrs	r5, r6
 800921e:	2d00      	cmp	r5, #0
 8009220:	4680      	mov	r8, r0
 8009222:	4689      	mov	r9, r1
 8009224:	dd48      	ble.n	80092b8 <__ieee754_log+0x2b8>
 8009226:	4b50      	ldr	r3, [pc, #320]	@ (8009368 <__ieee754_log+0x368>)
 8009228:	2200      	movs	r2, #0
 800922a:	4650      	mov	r0, sl
 800922c:	4659      	mov	r1, fp
 800922e:	f7f7 fa03 	bl	8000638 <__aeabi_dmul>
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	f7f7 f9ff 	bl	8000638 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f7f7 f841 	bl	80002cc <__adddf3>
 800924a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	4680      	mov	r8, r0
 8009254:	4689      	mov	r9, r1
 8009256:	b964      	cbnz	r4, 8009272 <__ieee754_log+0x272>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f7f7 f832 	bl	80002c8 <__aeabi_dsub>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4650      	mov	r0, sl
 800926a:	4659      	mov	r1, fp
 800926c:	f7f7 f82c 	bl	80002c8 <__aeabi_dsub>
 8009270:	e6da      	b.n	8009028 <__ieee754_log+0x28>
 8009272:	a323      	add	r3, pc, #140	@ (adr r3, 8009300 <__ieee754_log+0x300>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800927c:	f7f7 f9dc 	bl	8000638 <__aeabi_dmul>
 8009280:	a321      	add	r3, pc, #132	@ (adr r3, 8009308 <__ieee754_log+0x308>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	4642      	mov	r2, r8
 8009294:	464b      	mov	r3, r9
 8009296:	f7f7 f819 	bl	80002cc <__adddf3>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 f811 	bl	80002c8 <__aeabi_dsub>
 80092a6:	4652      	mov	r2, sl
 80092a8:	465b      	mov	r3, fp
 80092aa:	f7f7 f80d 	bl	80002c8 <__aeabi_dsub>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	e7d9      	b.n	800926c <__ieee754_log+0x26c>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4650      	mov	r0, sl
 80092be:	4659      	mov	r1, fp
 80092c0:	f7f7 f802 	bl	80002c8 <__aeabi_dsub>
 80092c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c8:	f7f7 f9b6 	bl	8000638 <__aeabi_dmul>
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	2c00      	cmp	r4, #0
 80092d2:	f43f af25 	beq.w	8009120 <__ieee754_log+0x120>
 80092d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009300 <__ieee754_log+0x300>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092e0:	f7f7 f9aa 	bl	8000638 <__aeabi_dmul>
 80092e4:	a308      	add	r3, pc, #32	@ (adr r3, 8009308 <__ieee754_log+0x308>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f2:	e729      	b.n	8009148 <__ieee754_log+0x148>
 80092f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009350 <__ieee754_log+0x350>
 80092f8:	e698      	b.n	800902c <__ieee754_log+0x2c>
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w
 8009300:	fee00000 	.word	0xfee00000
 8009304:	3fe62e42 	.word	0x3fe62e42
 8009308:	35793c76 	.word	0x35793c76
 800930c:	3dea39ef 	.word	0x3dea39ef
 8009310:	55555555 	.word	0x55555555
 8009314:	3fd55555 	.word	0x3fd55555
 8009318:	df3e5244 	.word	0xdf3e5244
 800931c:	3fc2f112 	.word	0x3fc2f112
 8009320:	96cb03de 	.word	0x96cb03de
 8009324:	3fc74664 	.word	0x3fc74664
 8009328:	94229359 	.word	0x94229359
 800932c:	3fd24924 	.word	0x3fd24924
 8009330:	55555593 	.word	0x55555593
 8009334:	3fe55555 	.word	0x3fe55555
 8009338:	d078c69f 	.word	0xd078c69f
 800933c:	3fc39a09 	.word	0x3fc39a09
 8009340:	1d8e78af 	.word	0x1d8e78af
 8009344:	3fcc71c5 	.word	0x3fcc71c5
 8009348:	9997fa04 	.word	0x9997fa04
 800934c:	3fd99999 	.word	0x3fd99999
	...
 8009358:	c3500000 	.word	0xc3500000
 800935c:	43500000 	.word	0x43500000
 8009360:	7fefffff 	.word	0x7fefffff
 8009364:	3ff00000 	.word	0x3ff00000
 8009368:	3fe00000 	.word	0x3fe00000

0800936c <_init>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr

08009378 <_fini>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr
